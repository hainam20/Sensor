
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb10  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800bc20  0800bc20  0001bc20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bffc  0800bffc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800bffc  0800bffc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bffc  0800bffc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bffc  0800bffc  0001bffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c000  0800c000  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800c004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20000204  0800c208  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800c208  0002055c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002267f  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cad  00000000  00000000  000428ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000455a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f09  00000000  00000000  00046910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcf6  00000000  00000000  00047819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c11  00000000  00000000  0006550f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9200  00000000  00000000  0007d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006448  00000000  00000000  00126320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0012c768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bc08 	.word	0x0800bc08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800bc08 	.word	0x0800bc08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint8_t buff[50];
	  VL53L1_RangingMeasurementData_t RangingData;
	  VL53L1_Dev_t  vl53l1_c; // center module
	  VL53L1_DEV    Dev = &vl53l1_c;
 8000a90:	463b      	mov	r3, r7
 8000a92:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a96:	f000 fbf1 	bl	800127c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9a:	f000 f88d 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9e:	f000 f961 	bl	8000d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000aa2:	f000 f907 	bl	8000cb4 <MX_I2C1_Init>
  MX_CAN_Init();
 8000aa6:	f000 f8cd 	bl	8000c44 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000aaa:	f000 f931 	bl	8000d10 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Dev->I2cHandle = &hi2c1;
 8000aae:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000ab2:	4a39      	ldr	r2, [pc, #228]	; (8000b98 <main+0x110>)
 8000ab4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev->I2cDevAddr = 0x52;
 8000ab8:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8000abc:	2252      	movs	r2, #82	; 0x52
 8000abe:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  	HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac8:	4834      	ldr	r0, [pc, #208]	; (8000b9c <main+0x114>)
 8000aca:	f001 f8d3 	bl	8001c74 <HAL_GPIO_WritePin>
    HAL_Delay(2); // 2ms reset time
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 fc36 	bl	8001340 <HAL_Delay>
    HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ada:	4830      	ldr	r0, [pc, #192]	; (8000b9c <main+0x114>)
 8000adc:	f001 f8ca 	bl	8001c74 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8000ae0:	2002      	movs	r0, #2
 8000ae2:	f000 fc2d 	bl	8001340 <HAL_Delay>


    /*** VL53L1X Initialization ***/
    VL53L1_WaitDeviceBooted( Dev );
 8000ae6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000aea:	f002 ff47 	bl	800397c <VL53L1_WaitDeviceBooted>
    VL53L1_DataInit( Dev );
 8000aee:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000af2:	f002 feeb 	bl	80038cc <VL53L1_DataInit>
    VL53L1_StaticInit( Dev );
 8000af6:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000afa:	f002 ff20 	bl	800393e <VL53L1_StaticInit>
    VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8000afe:	2103      	movs	r1, #3
 8000b00:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b04:	f003 f868 	bl	8003bd8 <VL53L1_SetDistanceMode>
    VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8000b08:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000b0c:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b10:	f003 f8d8 	bl	8003cc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
    VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 8000b14:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b18:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b1c:	f003 fa5c 	bl	8003fd8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
    VL53L1_StartMeasurement( Dev );
 8000b20:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b24:	f003 fb96 	bl	8004254 <VL53L1_StartMeasurement>

    HAL_CAN_Start(&hcan);
 8000b28:	481d      	ldr	r0, [pc, #116]	; (8000ba0 <main+0x118>)
 8000b2a:	f000 fd28 	bl	800157e <HAL_CAN_Start>
    TxHeader.DLC = 8;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <main+0x11c>)
 8000b30:	2208      	movs	r2, #8
 8000b32:	611a      	str	r2, [r3, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VL53L1_WaitMeasurementDataReady( Dev );
 8000b34:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b38:	f003 fc0e 	bl	8004358 <VL53L1_WaitMeasurementDataReady>

	  	VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8000b3c:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8000b40:	4619      	mov	r1, r3
 8000b42:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b46:	f003 fdc1 	bl	80046cc <VL53L1_GetRangingMeasurementData>

	  	sprintf( (char*)buff, "%u,%d,", RangingData.RangeStatus, RangingData.RangeMilliMeter);
 8000b4a:	f897 33bf 	ldrb.w	r3, [r7, #959]	; 0x3bf
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f9b7 33bc 	ldrsh.w	r3, [r7, #956]	; 0x3bc
 8000b54:	f507 7070 	add.w	r0, r7, #960	; 0x3c0
 8000b58:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <main+0x120>)
 8000b5a:	f008 fef7 	bl	800994c <siprintf>
	  	HAL_UART_Transmit(&huart1, buff, strlen((char*)buff ), 500);
 8000b5e:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff faf4 	bl	8000150 <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f507 7170 	add.w	r1, r7, #960	; 0x3c0
 8000b70:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b74:	480d      	ldr	r0, [pc, #52]	; (8000bac <main+0x124>)
 8000b76:	f002 fd29 	bl	80035cc <HAL_UART_Transmit>
	  	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &MailBox);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <main+0x128>)
 8000b7c:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <main+0x12c>)
 8000b7e:	4909      	ldr	r1, [pc, #36]	; (8000ba4 <main+0x11c>)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <main+0x118>)
 8000b82:	f000 fd40 	bl	8001606 <HAL_CAN_AddTxMessage>
	  	HAL_Delay(1000);
 8000b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b8a:	f000 fbd9 	bl	8001340 <HAL_Delay>
	  	VL53L1_ClearInterruptAndStartMeasurement( Dev );
 8000b8e:	f8d7 03f4 	ldr.w	r0, [r7, #1012]	; 0x3f4
 8000b92:	f003 fbcb 	bl	800432c <VL53L1_ClearInterruptAndStartMeasurement>
	  VL53L1_WaitMeasurementDataReady( Dev );
 8000b96:	e7cd      	b.n	8000b34 <main+0xac>
 8000b98:	2000026c 	.word	0x2000026c
 8000b9c:	40010c00 	.word	0x40010c00
 8000ba0:	20000244 	.word	0x20000244
 8000ba4:	2000022c 	.word	0x2000022c
 8000ba8:	0800bc20 	.word	0x0800bc20
 8000bac:	200002c0 	.word	0x200002c0
 8000bb0:	20000220 	.word	0x20000220
 8000bb4:	20000224 	.word	0x20000224

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b090      	sub	sp, #64	; 0x40
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0318 	add.w	r3, r7, #24
 8000bc2:	2228      	movs	r2, #40	; 0x28
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f008 ff23 	bl	8009a12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be8:	2301      	movs	r3, #1
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bec:	2302      	movs	r3, #2
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bf6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	f107 0318 	add.w	r3, r7, #24
 8000c00:	4618      	mov	r0, r3
 8000c02:	f002 f883 	bl	8002d0c <HAL_RCC_OscConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c0c:	f000 f924 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c10:	230f      	movs	r3, #15
 8000c12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2102      	movs	r1, #2
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f002 faf0 	bl	8003210 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c36:	f000 f90f 	bl	8000e58 <Error_Handler>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3740      	adds	r7, #64	; 0x40
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <MX_CAN_Init+0x68>)
 8000c4a:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <MX_CAN_Init+0x6c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000c4e:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_CAN_Init+0x68>)
 8000c50:	2204      	movs	r2, #4
 8000c52:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <MX_CAN_Init+0x68>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_CAN_Init+0x68>)
 8000c5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c60:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_CAN_Init+0x68>)
 8000c64:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000c68:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_CAN_Init+0x68>)
 8000c6c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c70:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_CAN_Init+0x68>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_CAN_Init+0x68>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_CAN_Init+0x68>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_CAN_Init+0x68>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_CAN_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_CAN_Init+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_CAN_Init+0x68>)
 8000c98:	f000 fb76 	bl	8001388 <HAL_CAN_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000ca2:	f000 f8d9 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000244 	.word	0x20000244
 8000cb0:	40006400 	.word	0x40006400

08000cb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cba:	4a13      	ldr	r2, [pc, #76]	; (8000d08 <MX_I2C1_Init+0x54>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cc0:	4a12      	ldr	r2, [pc, #72]	; (8000d0c <MX_I2C1_Init+0x58>)
 8000cc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf0:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_I2C1_Init+0x50>)
 8000cf2:	f000 ffd7 	bl	8001ca4 <HAL_I2C_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cfc:	f000 f8ac 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000026c 	.word	0x2000026c
 8000d08:	40005400 	.word	0x40005400
 8000d0c:	000186a0 	.word	0x000186a0

08000d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART1_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART1_UART_Init+0x4c>)
 8000d48:	f002 fbf0 	bl	800352c <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f881 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200002c0 	.word	0x200002c0
 8000d60:	40013800 	.word	0x40013800

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6193      	str	r3, [r2, #24]
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b2b      	ldr	r3, [pc, #172]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a27      	ldr	r2, [pc, #156]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a21      	ldr	r2, [pc, #132]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <MX_GPIO_Init+0xe8>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	603b      	str	r3, [r7, #0]
 8000dd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dde:	481c      	ldr	r0, [pc, #112]	; (8000e50 <MX_GPIO_Init+0xec>)
 8000de0:	f000 ff48 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dea:	4819      	ldr	r0, [pc, #100]	; (8000e50 <MX_GPIO_Init+0xec>)
 8000dec:	f000 ff42 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df6:	4817      	ldr	r0, [pc, #92]	; (8000e54 <MX_GPIO_Init+0xf0>)
 8000df8:	f000 ff3c 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e02:	4814      	ldr	r0, [pc, #80]	; (8000e54 <MX_GPIO_Init+0xf0>)
 8000e04:	f000 ff36 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 XShut0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|XShut0_Pin;
 8000e08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480b      	ldr	r0, [pc, #44]	; (8000e50 <MX_GPIO_Init+0xec>)
 8000e22:	f000 fda3 	bl	800196c <HAL_GPIO_Init>

  /*Configure GPIO pins : XShut1_Pin PB9 */
  GPIO_InitStruct.Pin = XShut1_Pin|GPIO_PIN_9;
 8000e26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_GPIO_Init+0xf0>)
 8000e40:	f000 fd94 	bl	800196c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40011000 	.word	0x40011000
 8000e54:	40010c00 	.word	0x40010c00

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	61d3      	str	r3, [r2, #28]
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_MspInit+0x40>)
 8000e90:	69db      	ldr	r3, [r3, #28]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0310 	add.w	r3, r7, #16
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1c      	ldr	r2, [pc, #112]	; (8000f34 <HAL_CAN_MspInit+0x8c>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d131      	bne.n	8000f2c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000eca:	69db      	ldr	r3, [r3, #28]
 8000ecc:	4a1a      	ldr	r2, [pc, #104]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ed2:	61d3      	str	r3, [r2, #28]
 8000ed4:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6193      	str	r3, [r2, #24]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_CAN_MspInit+0x90>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ef8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000efc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480b      	ldr	r0, [pc, #44]	; (8000f3c <HAL_CAN_MspInit+0x94>)
 8000f0e:	f000 fd2d 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <HAL_CAN_MspInit+0x94>)
 8000f28:	f000 fd20 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40006400 	.word	0x40006400
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010800 	.word	0x40010800

08000f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <HAL_I2C_MspInit+0x70>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d123      	bne.n	8000fa8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a13      	ldr	r2, [pc, #76]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f66:	f043 0308 	orr.w	r3, r3, #8
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f78:	23c0      	movs	r3, #192	; 0xc0
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7c:	2312      	movs	r3, #18
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <HAL_I2C_MspInit+0x78>)
 8000f8c:	f000 fcee 	bl	800196c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f92:	69db      	ldr	r3, [r3, #28]
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9a:	61d3      	str	r3, [r2, #28]
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_I2C_MspInit+0x74>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010c00 	.word	0x40010c00

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a1c      	ldr	r2, [pc, #112]	; (8001048 <HAL_UART_MspInit+0x8c>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d131      	bne.n	8001040 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_UART_MspInit+0x90>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a1a      	ldr	r2, [pc, #104]	; (800104c <HAL_UART_MspInit+0x90>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <HAL_UART_MspInit+0x90>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_UART_MspInit+0x90>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_UART_MspInit+0x90>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_UART_MspInit+0x90>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800100c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001010:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001016:	2303      	movs	r3, #3
 8001018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4619      	mov	r1, r3
 8001020:	480b      	ldr	r0, [pc, #44]	; (8001050 <HAL_UART_MspInit+0x94>)
 8001022:	f000 fca3 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <HAL_UART_MspInit+0x94>)
 800103c:	f000 fc96 	bl	800196c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001058:	e7fe      	b.n	8001058 <NMI_Handler+0x4>

0800105a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105e:	e7fe      	b.n	800105e <HardFault_Handler+0x4>

08001060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <MemManage_Handler+0x4>

08001066 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <UsageFault_Handler+0x4>

08001072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f935 	bl	8001308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <_kill>:

int _kill(int pid, int sig)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010ba:	f008 fd0f 	bl	8009adc <__errno>
 80010be:	4603      	mov	r3, r0
 80010c0:	2216      	movs	r2, #22
 80010c2:	601a      	str	r2, [r3, #0]
  return -1;
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_exit>:

void _exit (int status)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ffe7 	bl	80010b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010e2:	e7fe      	b.n	80010e2 <_exit+0x12>

080010e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	e00a      	b.n	800110c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f6:	f3af 8000 	nop.w
 80010fa:	4601      	mov	r1, r0
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	60ba      	str	r2, [r7, #8]
 8001102:	b2ca      	uxtb	r2, r1
 8001104:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3301      	adds	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	429a      	cmp	r2, r3
 8001112:	dbf0      	blt.n	80010f6 <_read+0x12>
  }

  return len;
 8001114:	687b      	ldr	r3, [r7, #4]
}
 8001116:	4618      	mov	r0, r3
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	e009      	b.n	8001144 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1c5a      	adds	r2, r3, #1
 8001134:	60ba      	str	r2, [r7, #8]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697a      	ldr	r2, [r7, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	dbf1      	blt.n	8001130 <_write+0x12>
  }
  return len;
 800114c:	687b      	ldr	r3, [r7, #4]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <_close>:

int _close(int file)
{
 8001156:	b480      	push	{r7}
 8001158:	b083      	sub	sp, #12
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800117c:	605a      	str	r2, [r3, #4]
  return 0;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr

0800118a <_isatty>:

int _isatty(int file)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
	...

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	; (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	; (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f008 fc78 	bl	8009adc <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	; (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20005000 	.word	0x20005000
 8001218:	00000400 	.word	0x00000400
 800121c:	20000308 	.word	0x20000308
 8001220:	20000560 	.word	0x20000560

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001230:	f7ff fff8 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480b      	ldr	r0, [pc, #44]	; (8001264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001236:	490c      	ldr	r1, [pc, #48]	; (8001268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001238:	4a0c      	ldr	r2, [pc, #48]	; (800126c <LoopFillZerobss+0x16>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800124c:	4c09      	ldr	r4, [pc, #36]	; (8001274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800125a:	f008 fc45 	bl	8009ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fc13 	bl	8000a88 <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r0, =_sdata
 8001264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001268:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800126c:	0800c004 	.word	0x0800c004
  ldr r2, =_sbss
 8001270:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001274:	2000055c 	.word	0x2000055c

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_Init+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a07      	ldr	r2, [pc, #28]	; (80012a4 <HAL_Init+0x28>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128c:	2003      	movs	r0, #3
 800128e:	f000 fb39 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f808 	bl	80012a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001298:	f7ff fde4 	bl	8000e64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40022000 	.word	0x40022000

080012a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_InitTick+0x54>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x58>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fb43 	bl	8001952 <HAL_SYSTICK_Config>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e00e      	b.n	80012f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0f      	cmp	r3, #15
 80012da:	d80a      	bhi.n	80012f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012dc:	2200      	movs	r2, #0
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	f04f 30ff 	mov.w	r0, #4294967295
 80012e4:	f000 fb19 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_InitTick+0x5c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000008 	.word	0x20000008
 8001304:	20000004 	.word	0x20000004

08001308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	461a      	mov	r2, r3
 8001312:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x20>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4413      	add	r3, r2
 8001318:	4a03      	ldr	r2, [pc, #12]	; (8001328 <HAL_IncTick+0x20>)
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr
 8001324:	20000008 	.word	0x20000008
 8001328:	2000030c 	.word	0x2000030c

0800132c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b02      	ldr	r3, [pc, #8]	; (800133c <HAL_GetTick+0x10>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	2000030c 	.word	0x2000030c

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff fff0 	bl	800132c <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffe0 	bl	800132c <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0ed      	b.n	8001576 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd7e 	bl	8000ea8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013bc:	f7ff ffb6 	bl	800132c <HAL_GetTick>
 80013c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013c2:	e012      	b.n	80013ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013c4:	f7ff ffb2 	bl	800132c <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d90b      	bls.n	80013ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2205      	movs	r2, #5
 80013e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e0c5      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0e5      	beq.n	80013c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0202 	bic.w	r2, r2, #2
 8001406:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001408:	f7ff ff90 	bl	800132c <HAL_GetTick>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800140e:	e012      	b.n	8001436 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001410:	f7ff ff8c 	bl	800132c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d90b      	bls.n	8001436 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001422:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2205      	movs	r2, #5
 800142e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e09f      	b.n	8001576 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1e5      	bne.n	8001410 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7e1b      	ldrb	r3, [r3, #24]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	e007      	b.n	800146e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7e5b      	ldrb	r3, [r3, #25]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d108      	bne.n	8001488 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e007      	b.n	8001498 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001496:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d108      	bne.n	80014b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	e007      	b.n	80014c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0220 	bic.w	r2, r2, #32
 80014c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7edb      	ldrb	r3, [r3, #27]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d108      	bne.n	80014dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0210 	bic.w	r2, r2, #16
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e007      	b.n	80014ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0210 	orr.w	r2, r2, #16
 80014ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7f1b      	ldrb	r3, [r3, #28]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d108      	bne.n	8001506 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0208 	orr.w	r2, r2, #8
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	e007      	b.n	8001516 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0208 	bic.w	r2, r2, #8
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	7f5b      	ldrb	r3, [r3, #29]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d108      	bne.n	8001530 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0204 	orr.w	r2, r2, #4
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	e007      	b.n	8001540 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0204 	bic.w	r2, r2, #4
 800153e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691b      	ldr	r3, [r3, #16]
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	ea42 0103 	orr.w	r1, r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3020 	ldrb.w	r3, [r3, #32]
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b01      	cmp	r3, #1
 8001590:	d12e      	bne.n	80015f0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2202      	movs	r2, #2
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015aa:	f7ff febf 	bl	800132c <HAL_GetTick>
 80015ae:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015b0:	e012      	b.n	80015d8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b2:	f7ff febb 	bl	800132c <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d90b      	bls.n	80015d8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2205      	movs	r2, #5
 80015d0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e012      	b.n	80015fe <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e5      	bne.n	80015b2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e006      	b.n	80015fe <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001606:	b480      	push	{r7}
 8001608:	b089      	sub	sp, #36	; 0x24
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001624:	7ffb      	ldrb	r3, [r7, #31]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d003      	beq.n	8001632 <HAL_CAN_AddTxMessage+0x2c>
 800162a:	7ffb      	ldrb	r3, [r7, #31]
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 80ad 	bne.w	800178c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10a      	bne.n	8001652 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001642:	2b00      	cmp	r3, #0
 8001644:	d105      	bne.n	8001652 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8095 	beq.w	800177c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	0e1b      	lsrs	r3, r3, #24
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800165c:	2201      	movs	r2, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	409a      	lsls	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10d      	bne.n	800168a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	431a      	orrs	r2, r3
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3318      	adds	r3, #24
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	440b      	add	r3, r1
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e00f      	b.n	80016aa <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001694:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800169e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3318      	adds	r3, #24
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	440b      	add	r3, r1
 80016a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3318      	adds	r3, #24
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	7d1b      	ldrb	r3, [r3, #20]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d111      	bne.n	80016ea <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3318      	adds	r3, #24
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	4413      	add	r3, r2
 80016d2:	3304      	adds	r3, #4
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	6811      	ldr	r1, [r2, #0]
 80016da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3318      	adds	r3, #24
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3307      	adds	r3, #7
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	061a      	lsls	r2, r3, #24
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	3306      	adds	r3, #6
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	041b      	lsls	r3, r3, #16
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3305      	adds	r3, #5
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4313      	orrs	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	3204      	adds	r2, #4
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	4610      	mov	r0, r2
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	6811      	ldr	r1, [r2, #0]
 8001712:	ea43 0200 	orr.w	r2, r3, r0
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	440b      	add	r3, r1
 800171c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001720:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3303      	adds	r3, #3
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	061a      	lsls	r2, r3, #24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3302      	adds	r3, #2
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	041b      	lsls	r3, r3, #16
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3301      	adds	r3, #1
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	4313      	orrs	r3, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4610      	mov	r0, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	6811      	ldr	r1, [r2, #0]
 8001748:	ea43 0200 	orr.w	r2, r3, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001756:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	3318      	adds	r3, #24
 8001760:	011b      	lsls	r3, r3, #4
 8001762:	4413      	add	r3, r2
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	6811      	ldr	r1, [r2, #0]
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	3318      	adds	r3, #24
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	440b      	add	r3, r1
 8001776:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	e00e      	b.n	800179a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e006      	b.n	800179a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
  }
}
 800179a:	4618      	mov	r0, r3
 800179c:	3724      	adds	r7, #36	; 0x24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff49 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192c:	f7ff ff5e 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffb0 	bl	80018c0 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b08b      	sub	sp, #44	; 0x2c
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e169      	b.n	8001c54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001980:	2201      	movs	r2, #1
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	69fa      	ldr	r2, [r7, #28]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	429a      	cmp	r2, r3
 800199a:	f040 8158 	bne.w	8001c4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4a9a      	ldr	r2, [pc, #616]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d05e      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019a8:	4a98      	ldr	r2, [pc, #608]	; (8001c0c <HAL_GPIO_Init+0x2a0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d875      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019ae:	4a98      	ldr	r2, [pc, #608]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d058      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019b4:	4a96      	ldr	r2, [pc, #600]	; (8001c10 <HAL_GPIO_Init+0x2a4>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d86f      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019ba:	4a96      	ldr	r2, [pc, #600]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d052      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019c0:	4a94      	ldr	r2, [pc, #592]	; (8001c14 <HAL_GPIO_Init+0x2a8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d869      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019c6:	4a94      	ldr	r2, [pc, #592]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d04c      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019cc:	4a92      	ldr	r2, [pc, #584]	; (8001c18 <HAL_GPIO_Init+0x2ac>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d863      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019d2:	4a92      	ldr	r2, [pc, #584]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d046      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
 80019d8:	4a90      	ldr	r2, [pc, #576]	; (8001c1c <HAL_GPIO_Init+0x2b0>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d85d      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d82a      	bhi.n	8001a38 <HAL_GPIO_Init+0xcc>
 80019e2:	2b12      	cmp	r3, #18
 80019e4:	d859      	bhi.n	8001a9a <HAL_GPIO_Init+0x12e>
 80019e6:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <HAL_GPIO_Init+0x80>)
 80019e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ec:	08001a67 	.word	0x08001a67
 80019f0:	08001a41 	.word	0x08001a41
 80019f4:	08001a53 	.word	0x08001a53
 80019f8:	08001a95 	.word	0x08001a95
 80019fc:	08001a9b 	.word	0x08001a9b
 8001a00:	08001a9b 	.word	0x08001a9b
 8001a04:	08001a9b 	.word	0x08001a9b
 8001a08:	08001a9b 	.word	0x08001a9b
 8001a0c:	08001a9b 	.word	0x08001a9b
 8001a10:	08001a9b 	.word	0x08001a9b
 8001a14:	08001a9b 	.word	0x08001a9b
 8001a18:	08001a9b 	.word	0x08001a9b
 8001a1c:	08001a9b 	.word	0x08001a9b
 8001a20:	08001a9b 	.word	0x08001a9b
 8001a24:	08001a9b 	.word	0x08001a9b
 8001a28:	08001a9b 	.word	0x08001a9b
 8001a2c:	08001a9b 	.word	0x08001a9b
 8001a30:	08001a49 	.word	0x08001a49
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	4a79      	ldr	r2, [pc, #484]	; (8001c20 <HAL_GPIO_Init+0x2b4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a3e:	e02c      	b.n	8001a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	623b      	str	r3, [r7, #32]
          break;
 8001a46:	e029      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	623b      	str	r3, [r7, #32]
          break;
 8001a50:	e024      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	3308      	adds	r3, #8
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e01f      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	330c      	adds	r3, #12
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e01a      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e013      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d105      	bne.n	8001a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a7c:	2308      	movs	r3, #8
 8001a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	611a      	str	r2, [r3, #16]
          break;
 8001a86:	e009      	b.n	8001a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69fa      	ldr	r2, [r7, #28]
 8001a90:	615a      	str	r2, [r3, #20]
          break;
 8001a92:	e003      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
          break;
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x130>
          break;
 8001a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2bff      	cmp	r3, #255	; 0xff
 8001aa0:	d801      	bhi.n	8001aa6 <HAL_GPIO_Init+0x13a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	e001      	b.n	8001aaa <HAL_GPIO_Init+0x13e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2bff      	cmp	r3, #255	; 0xff
 8001ab0:	d802      	bhi.n	8001ab8 <HAL_GPIO_Init+0x14c>
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	e002      	b.n	8001abe <HAL_GPIO_Init+0x152>
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	3b08      	subs	r3, #8
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	401a      	ands	r2, r3
 8001ad0:	6a39      	ldr	r1, [r7, #32]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80b1 	beq.w	8001c4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <HAL_GPIO_Init+0x2b8>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b04:	4a48      	ldr	r2, [pc, #288]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a40      	ldr	r2, [pc, #256]	; (8001c2c <HAL_GPIO_Init+0x2c0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1ec>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_GPIO_Init+0x2c4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1e8>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a3e      	ldr	r2, [pc, #248]	; (8001c34 <HAL_GPIO_Init+0x2c8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1e4>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a3d      	ldr	r2, [pc, #244]	; (8001c38 <HAL_GPIO_Init+0x2cc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1e0>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1ee>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	68fa      	ldr	r2, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b6a:	492f      	ldr	r1, [pc, #188]	; (8001c28 <HAL_GPIO_Init+0x2bc>)
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d006      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b84:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	492c      	ldr	r1, [pc, #176]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]
 8001b90:	e006      	b.n	8001ba0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d006      	beq.n	8001bba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	4922      	ldr	r1, [pc, #136]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	491e      	ldr	r1, [pc, #120]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	4918      	ldr	r1, [pc, #96]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
 8001be0:	e006      	b.n	8001bf0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	4914      	ldr	r1, [pc, #80]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bec:	4013      	ands	r3, r2
 8001bee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d021      	beq.n	8001c40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_GPIO_Init+0x2d0>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	600b      	str	r3, [r1, #0]
 8001c08:	e021      	b.n	8001c4e <HAL_GPIO_Init+0x2e2>
 8001c0a:	bf00      	nop
 8001c0c:	10320000 	.word	0x10320000
 8001c10:	10310000 	.word	0x10310000
 8001c14:	10220000 	.word	0x10220000
 8001c18:	10210000 	.word	0x10210000
 8001c1c:	10120000 	.word	0x10120000
 8001c20:	10110000 	.word	0x10110000
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	40010800 	.word	0x40010800
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	40011000 	.word	0x40011000
 8001c38:	40011400 	.word	0x40011400
 8001c3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4909      	ldr	r1, [pc, #36]	; (8001c70 <HAL_GPIO_Init+0x304>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c50:	3301      	adds	r3, #1
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f47f ae8e 	bne.w	8001980 <HAL_GPIO_Init+0x14>
  }
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	372c      	adds	r7, #44	; 0x2c
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	611a      	str	r2, [r3, #16]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e12b      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff f938 	bl	8000f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2224      	movs	r2, #36	; 0x24
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0201 	bic.w	r2, r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d08:	f001 fbca 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8001d0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a81      	ldr	r2, [pc, #516]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d807      	bhi.n	8001d28 <HAL_I2C_Init+0x84>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4a80      	ldr	r2, [pc, #512]	; (8001f1c <HAL_I2C_Init+0x278>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	bf94      	ite	ls
 8001d20:	2301      	movls	r3, #1
 8001d22:	2300      	movhi	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e006      	b.n	8001d36 <HAL_I2C_Init+0x92>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4a7d      	ldr	r2, [pc, #500]	; (8001f20 <HAL_I2C_Init+0x27c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	bf94      	ite	ls
 8001d30:	2301      	movls	r3, #1
 8001d32:	2300      	movhi	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e0e7      	b.n	8001f0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4a78      	ldr	r2, [pc, #480]	; (8001f24 <HAL_I2C_Init+0x280>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	0c9b      	lsrs	r3, r3, #18
 8001d48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a6a      	ldr	r2, [pc, #424]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d802      	bhi.n	8001d78 <HAL_I2C_Init+0xd4>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	3301      	adds	r3, #1
 8001d76:	e009      	b.n	8001d8c <HAL_I2C_Init+0xe8>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a69      	ldr	r2, [pc, #420]	; (8001f28 <HAL_I2C_Init+0x284>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	430b      	orrs	r3, r1
 8001d92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	495c      	ldr	r1, [pc, #368]	; (8001f18 <HAL_I2C_Init+0x274>)
 8001da8:	428b      	cmp	r3, r1
 8001daa:	d819      	bhi.n	8001de0 <HAL_I2C_Init+0x13c>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e59      	subs	r1, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dba:	1c59      	adds	r1, r3, #1
 8001dbc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <HAL_I2C_Init+0x138>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e59      	subs	r1, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dda:	e051      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001ddc:	2304      	movs	r3, #4
 8001dde:	e04f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_I2C_Init+0x168>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1e58      	subs	r0, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	440b      	add	r3, r1
 8001df6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e012      	b.n	8001e32 <HAL_I2C_Init+0x18e>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e58      	subs	r0, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6859      	ldr	r1, [r3, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	0099      	lsls	r1, r3, #2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e22:	3301      	adds	r3, #1
 8001e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	bf0c      	ite	eq
 8001e2c:	2301      	moveq	r3, #1
 8001e2e:	2300      	movne	r3, #0
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_I2C_Init+0x196>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e022      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_I2C_Init+0x1bc>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e58      	subs	r0, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6859      	ldr	r1, [r3, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	440b      	add	r3, r1
 8001e50:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e5e:	e00f      	b.n	8001e80 <HAL_I2C_Init+0x1dc>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	1e58      	subs	r0, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	0099      	lsls	r1, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	6809      	ldr	r1, [r1, #0]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6911      	ldr	r1, [r2, #16]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	68d2      	ldr	r2, [r2, #12]
 8001eba:	4311      	orrs	r1, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	000186a0 	.word	0x000186a0
 8001f1c:	001e847f 	.word	0x001e847f
 8001f20:	003d08ff 	.word	0x003d08ff
 8001f24:	431bde83 	.word	0x431bde83
 8001f28:	10624dd3 	.word	0x10624dd3

08001f2c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af02      	add	r7, sp, #8
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	607a      	str	r2, [r7, #4]
 8001f36:	461a      	mov	r2, r3
 8001f38:	460b      	mov	r3, r1
 8001f3a:	817b      	strh	r3, [r7, #10]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff f9f4 	bl	800132c <HAL_GetTick>
 8001f44:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	f040 80e0 	bne.w	8002114 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2319      	movs	r3, #25
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4970      	ldr	r1, [pc, #448]	; (8002120 <HAL_I2C_Master_Transmit+0x1f4>)
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fc9e 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e0d3      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_I2C_Master_Transmit+0x50>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e0cc      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d007      	beq.n	8001fa2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2221      	movs	r2, #33	; 0x21
 8001fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_I2C_Master_Transmit+0x1f8>)
 8001fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6a3a      	ldr	r2, [r7, #32]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fb08 	bl	8002600 <I2C_MasterRequestWrite>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08d      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	613b      	str	r3, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002010:	e066      	b.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	6a39      	ldr	r1, [r7, #32]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fd5c 	bl	8002ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	2b04      	cmp	r3, #4
 8002028:	d107      	bne.n	800203a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002038:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06b      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b04      	cmp	r3, #4
 800207a:	d11b      	bne.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b00      	cmp	r3, #0
 8002082:	d017      	beq.n	80020b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	6a39      	ldr	r1, [r7, #32]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 fd53 	bl	8002b64 <I2C_WaitOnBTFFlagUntilTimeout>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d107      	bne.n	80020dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e01a      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d194      	bne.n	8002012 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3718      	adds	r7, #24
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	00100002 	.word	0x00100002
 8002124:	ffff0000 	.word	0xffff0000

08002128 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af02      	add	r7, sp, #8
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	461a      	mov	r2, r3
 8002134:	460b      	mov	r3, r1
 8002136:	817b      	strh	r3, [r7, #10]
 8002138:	4613      	mov	r3, r2
 800213a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002140:	f7ff f8f4 	bl	800132c <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	f040 824b 	bne.w	80025ea <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2319      	movs	r3, #25
 800215a:	2201      	movs	r2, #1
 800215c:	497f      	ldr	r1, [pc, #508]	; (800235c <HAL_I2C_Master_Receive+0x234>)
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fb9e 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800216a:	2302      	movs	r3, #2
 800216c:	e23e      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_I2C_Master_Receive+0x54>
 8002178:	2302      	movs	r3, #2
 800217a:	e237      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b01      	cmp	r3, #1
 8002190:	d007      	beq.n	80021a2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0201 	orr.w	r2, r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2222      	movs	r2, #34	; 0x22
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2210      	movs	r2, #16
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	893a      	ldrh	r2, [r7, #8]
 80021d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29a      	uxth	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4a5f      	ldr	r2, [pc, #380]	; (8002360 <HAL_I2C_Master_Receive+0x238>)
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021e4:	8979      	ldrh	r1, [r7, #10]
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa8a 	bl	8002704 <I2C_MasterRequestRead>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e1f8      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d113      	bne.n	800222a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	61fb      	str	r3, [r7, #28]
 8002216:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e1cc      	b.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	2b01      	cmp	r3, #1
 8002230:	d11e      	bne.n	8002270 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002240:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002242:	b672      	cpsid	i
}
 8002244:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002246:	2300      	movs	r3, #0
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800226a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800226c:	b662      	cpsie	i
}
 800226e:	e035      	b.n	80022dc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	2b02      	cmp	r3, #2
 8002276:	d11e      	bne.n	80022b6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002286:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022b2:	b662      	cpsie	i
}
 80022b4:	e012      	b.n	80022dc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80022dc:	e172      	b.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	f200 811f 	bhi.w	8002526 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d123      	bne.n	8002338 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fc7d 	bl	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e173      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002336:	e145      	b.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800233c:	2b02      	cmp	r3, #2
 800233e:	d152      	bne.n	80023e6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	2200      	movs	r2, #0
 8002348:	4906      	ldr	r1, [pc, #24]	; (8002364 <HAL_I2C_Master_Receive+0x23c>)
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 faa8 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e148      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
 800235a:	bf00      	nop
 800235c:	00100002 	.word	0x00100002
 8002360:	ffff0000 	.word	0xffff0000
 8002364:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800237a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ae:	b662      	cpsie	i
}
 80023b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e4:	e0ee      	b.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ec:	2200      	movs	r2, #0
 80023ee:	4981      	ldr	r1, [pc, #516]	; (80025f4 <HAL_I2C_Master_Receive+0x4cc>)
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fa55 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0f5      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800240e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
}
 8002412:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002446:	4b6c      	ldr	r3, [pc, #432]	; (80025f8 <HAL_I2C_Master_Receive+0x4d0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	08db      	lsrs	r3, r3, #3
 800244c:	4a6b      	ldr	r2, [pc, #428]	; (80025fc <HAL_I2C_Master_Receive+0x4d4>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	0a1a      	lsrs	r2, r3, #8
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	00da      	lsls	r2, r3, #3
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	3b01      	subs	r3, #1
 8002464:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d118      	bne.n	800249e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f043 0220 	orr.w	r2, r3, #32
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800248e:	b662      	cpsie	i
}
 8002490:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0a6      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	695b      	ldr	r3, [r3, #20]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	d1d9      	bne.n	8002460 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b01      	subs	r3, #1
 80024e8:	b29a      	uxth	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80024ee:	b662      	cpsie	i
}
 80024f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	691a      	ldr	r2, [r3, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002504:	1c5a      	adds	r2, r3, #1
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	3b01      	subs	r3, #1
 8002510:	b29a      	uxth	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	3b01      	subs	r3, #1
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002524:	e04e      	b.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fb62 	bl	8002bf4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e058      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b04      	cmp	r3, #4
 8002578:	d124      	bne.n	80025c4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257e:	2b03      	cmp	r3, #3
 8002580:	d107      	bne.n	8002592 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002590:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f ae88 	bne.w	80022de <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2220      	movs	r2, #32
 80025d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e000      	b.n	80025ec <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
  }
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	00010004 	.word	0x00010004
 80025f8:	20000000 	.word	0x20000000
 80025fc:	14f8b589 	.word	0x14f8b589

08002600 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	460b      	mov	r3, r1
 800260e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b08      	cmp	r3, #8
 800261a:	d006      	beq.n	800262a <I2C_MasterRequestWrite+0x2a>
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d003      	beq.n	800262a <I2C_MasterRequestWrite+0x2a>
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e00b      	b.n	8002654 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	2b12      	cmp	r3, #18
 8002642:	d107      	bne.n	8002654 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002652:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f91d 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800267a:	d103      	bne.n	8002684 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e035      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002690:	d108      	bne.n	80026a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002692:	897b      	ldrh	r3, [r7, #10]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	e01b      	b.n	80026dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026a4:	897b      	ldrh	r3, [r7, #10]
 80026a6:	11db      	asrs	r3, r3, #7
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	f063 030f 	orn	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	490e      	ldr	r1, [pc, #56]	; (80026fc <I2C_MasterRequestWrite+0xfc>)
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f966 	bl	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e010      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026d2:	897b      	ldrh	r3, [r7, #10]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <I2C_MasterRequestWrite+0x100>)
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 f956 	bl	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	00010008 	.word	0x00010008
 8002700:	00010002 	.word	0x00010002

08002704 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af02      	add	r7, sp, #8
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	460b      	mov	r3, r1
 8002712:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002728:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d006      	beq.n	800273e <I2C_MasterRequestRead+0x3a>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d003      	beq.n	800273e <I2C_MasterRequestRead+0x3a>
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800273c:	d108      	bne.n	8002750 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e00b      	b.n	8002768 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	2b11      	cmp	r3, #17
 8002756:	d107      	bne.n	8002768 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002766:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f893 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278e:	d103      	bne.n	8002798 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e079      	b.n	8002890 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a4:	d108      	bne.n	80027b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	611a      	str	r2, [r3, #16]
 80027b6:	e05f      	b.n	8002878 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027b8:	897b      	ldrh	r3, [r7, #10]
 80027ba:	11db      	asrs	r3, r3, #7
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f003 0306 	and.w	r3, r3, #6
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f063 030f 	orn	r3, r3, #15
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	4930      	ldr	r1, [pc, #192]	; (8002898 <I2C_MasterRequestRead+0x194>)
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8dc 	bl	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e054      	b.n	8002890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027e6:	897b      	ldrh	r3, [r7, #10]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4929      	ldr	r1, [pc, #164]	; (800289c <I2C_MasterRequestRead+0x198>)
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 f8cc 	bl	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e044      	b.n	8002890 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	613b      	str	r3, [r7, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800282a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f831 	bl	80028a0 <I2C_WaitOnFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00d      	beq.n	8002860 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002852:	d103      	bne.n	800285c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e017      	b.n	8002890 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002860:	897b      	ldrh	r3, [r7, #10]
 8002862:	11db      	asrs	r3, r3, #7
 8002864:	b2db      	uxtb	r3, r3
 8002866:	f003 0306 	and.w	r3, r3, #6
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f063 030e 	orn	r3, r3, #14
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <I2C_MasterRequestRead+0x198>)
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f888 	bl	8002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	00010008 	.word	0x00010008
 800289c:	00010002 	.word	0x00010002

080028a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b0:	e048      	b.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d044      	beq.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7fe fd37 	bl	800132c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d139      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	0c1b      	lsrs	r3, r3, #16
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10d      	bne.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	43da      	mvns	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	e00c      	b.n	8002910 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf0c      	ite	eq
 8002908:	2301      	moveq	r3, #1
 800290a:	2300      	movne	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	429a      	cmp	r2, r3
 8002914:	d116      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e023      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10d      	bne.n	800296a <I2C_WaitOnFlagUntilTimeout+0xca>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	e00c      	b.n	8002984 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	43da      	mvns	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	4013      	ands	r3, r2
 8002976:	b29b      	uxth	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	429a      	cmp	r2, r3
 8002988:	d093      	beq.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a2:	e071      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b2:	d123      	bne.n	80029fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f043 0204 	orr.w	r2, r3, #4
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e067      	b.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a02:	d041      	beq.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a04:	f7fe fc92 	bl	800132c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d302      	bcc.n	8002a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d136      	bne.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d10c      	bne.n	8002a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	bf14      	ite	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	2300      	moveq	r3, #0
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	e00b      	b.n	8002a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e021      	b.n	8002acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d10c      	bne.n	8002aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	43da      	mvns	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e00b      	b.n	8002ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f47f af6d 	bne.w	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae0:	e034      	b.n	8002b4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8e3 	bl	8002cae <I2C_IsAcknowledgeFailed>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e034      	b.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d028      	beq.n	8002b4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afa:	f7fe fc17 	bl	800132c <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d302      	bcc.n	8002b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d11d      	bne.n	8002b4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1a:	2b80      	cmp	r3, #128	; 0x80
 8002b1c:	d016      	beq.n	8002b4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d1c3      	bne.n	8002ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b70:	e034      	b.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 f89b 	bl	8002cae <I2C_IsAcknowledgeFailed>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e034      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b88:	d028      	beq.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7fe fbcf 	bl	800132c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d11d      	bne.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d016      	beq.n	8002bdc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e007      	b.n	8002bec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d1c3      	bne.n	8002b72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c00:	e049      	b.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d119      	bne.n	8002c44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0210 	mvn.w	r2, #16
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e030      	b.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c44:	f7fe fb72 	bl	800132c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d302      	bcc.n	8002c5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11d      	bne.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d016      	beq.n	8002c96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d1ae      	bne.n	8002c02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cc4:	d11b      	bne.n	8002cfe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 0204 	orr.w	r2, r3, #4
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e272      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8087 	beq.w	8002e3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d2c:	4b92      	ldr	r3, [pc, #584]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 030c 	and.w	r3, r3, #12
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d00c      	beq.n	8002d52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d38:	4b8f      	ldr	r3, [pc, #572]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d112      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
 8002d44:	4b8c      	ldr	r3, [pc, #560]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d50:	d10b      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d06c      	beq.n	8002e38 <HAL_RCC_OscConfig+0x12c>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d168      	bne.n	8002e38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e24c      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d106      	bne.n	8002d82 <HAL_RCC_OscConfig+0x76>
 8002d74:	4b80      	ldr	r3, [pc, #512]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a7f      	ldr	r2, [pc, #508]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7e:	6013      	str	r3, [r2, #0]
 8002d80:	e02e      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCC_OscConfig+0x98>
 8002d8a:	4b7b      	ldr	r3, [pc, #492]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7a      	ldr	r2, [pc, #488]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	4b78      	ldr	r3, [pc, #480]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a77      	ldr	r2, [pc, #476]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da0:	6013      	str	r3, [r2, #0]
 8002da2:	e01d      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xbc>
 8002dae:	4b72      	ldr	r3, [pc, #456]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a71      	ldr	r2, [pc, #452]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	4b6f      	ldr	r3, [pc, #444]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a6e      	ldr	r2, [pc, #440]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	e00b      	b.n	8002de0 <HAL_RCC_OscConfig+0xd4>
 8002dc8:	4b6b      	ldr	r3, [pc, #428]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a6a      	ldr	r2, [pc, #424]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	4b68      	ldr	r3, [pc, #416]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d013      	beq.n	8002e10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe faa0 	bl	800132c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df0:	f7fe fa9c 	bl	800132c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b64      	cmp	r3, #100	; 0x64
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e200      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0xe4>
 8002e0e:	e014      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e10:	f7fe fa8c 	bl	800132c <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e18:	f7fe fa88 	bl	800132c <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e1ec      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b53      	ldr	r3, [pc, #332]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x10c>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d063      	beq.n	8002f0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e46:	4b4c      	ldr	r3, [pc, #304]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 030c 	and.w	r3, r3, #12
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d11c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
 8002e5e:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d116      	bne.n	8002e98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	4b43      	ldr	r3, [pc, #268]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d001      	beq.n	8002e82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e1c0      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e82:	4b3d      	ldr	r3, [pc, #244]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4939      	ldr	r1, [pc, #228]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	e03a      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa41 	bl	800132c <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eae:	f7fe fa3d 	bl	800132c <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e1a1      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ecc:	4b2a      	ldr	r3, [pc, #168]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4927      	ldr	r1, [pc, #156]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]
 8002ee0:	e015      	b.n	8002f0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee2:	4b26      	ldr	r3, [pc, #152]	; (8002f7c <HAL_RCC_OscConfig+0x270>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa20 	bl	800132c <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fa1c 	bl	800132c <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e180      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03a      	beq.n	8002f90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d019      	beq.n	8002f56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f24:	2201      	movs	r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f28:	f7fe fa00 	bl	800132c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f30:	f7fe f9fc 	bl	800132c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e160      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 face 	bl	80034f0 <RCC_Delay>
 8002f54:	e01c      	b.n	8002f90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_RCC_OscConfig+0x274>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5c:	f7fe f9e6 	bl	800132c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f62:	e00f      	b.n	8002f84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f64:	f7fe f9e2 	bl	800132c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d908      	bls.n	8002f84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e146      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
 8002f76:	bf00      	nop
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	42420000 	.word	0x42420000
 8002f80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f84:	4b92      	ldr	r3, [pc, #584]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e9      	bne.n	8002f64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a6 	beq.w	80030ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa2:	4b8b      	ldr	r3, [pc, #556]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fae:	4b88      	ldr	r3, [pc, #544]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4a87      	ldr	r2, [pc, #540]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	61d3      	str	r3, [r2, #28]
 8002fba:	4b85      	ldr	r3, [pc, #532]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b82      	ldr	r3, [pc, #520]	; (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b7f      	ldr	r3, [pc, #508]	; (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a7e      	ldr	r2, [pc, #504]	; (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f9a3 	bl	800132c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe f99f 	bl	800132c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b64      	cmp	r3, #100	; 0x64
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e103      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b75      	ldr	r3, [pc, #468]	; (80031d4 <HAL_RCC_OscConfig+0x4c8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x312>
 8003010:	4b6f      	ldr	r3, [pc, #444]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	4a6e      	ldr	r2, [pc, #440]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6213      	str	r3, [r2, #32]
 800301c:	e02d      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x334>
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	4a69      	ldr	r2, [pc, #420]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6213      	str	r3, [r2, #32]
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a66      	ldr	r2, [pc, #408]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	6213      	str	r3, [r2, #32]
 800303e:	e01c      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x356>
 8003048:	4b61      	ldr	r3, [pc, #388]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a60      	ldr	r2, [pc, #384]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	4b5e      	ldr	r3, [pc, #376]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	f043 0301 	orr.w	r3, r3, #1
 800305e:	6213      	str	r3, [r2, #32]
 8003060:	e00b      	b.n	800307a <HAL_RCC_OscConfig+0x36e>
 8003062:	4b5b      	ldr	r3, [pc, #364]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a5a      	ldr	r2, [pc, #360]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003068:	f023 0301 	bic.w	r3, r3, #1
 800306c:	6213      	str	r3, [r2, #32]
 800306e:	4b58      	ldr	r3, [pc, #352]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	4a57      	ldr	r2, [pc, #348]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d015      	beq.n	80030ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe f953 	bl	800132c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fe f94f 	bl	800132c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0b1      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a0:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ee      	beq.n	800308a <HAL_RCC_OscConfig+0x37e>
 80030ac:	e014      	b.n	80030d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ae:	f7fe f93d 	bl	800132c <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fe f939 	bl	800132c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e09b      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030cc:	4b40      	ldr	r3, [pc, #256]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	6a1b      	ldr	r3, [r3, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ee      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d105      	bne.n	80030ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030de:	4b3c      	ldr	r3, [pc, #240]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	4a3b      	ldr	r2, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	f000 8087 	beq.w	8003202 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030f4:	4b36      	ldr	r3, [pc, #216]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 030c 	and.w	r3, r3, #12
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d061      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d146      	bne.n	8003196 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003108:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7fe f90d 	bl	800132c <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003116:	f7fe f909 	bl	800132c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e06d      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313c:	d108      	bne.n	8003150 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800313e:	4b24      	ldr	r3, [pc, #144]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	4921      	ldr	r1, [pc, #132]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	4313      	orrs	r3, r2
 800314e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a19      	ldr	r1, [r3, #32]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	430b      	orrs	r3, r1
 8003162:	491b      	ldr	r1, [pc, #108]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe f8dd 	bl	800132c <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003176:	f7fe f8d9 	bl	800132c <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e03d      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x46a>
 8003194:	e035      	b.n	8003202 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_RCC_OscConfig+0x4cc>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7fe f8c6 	bl	800132c <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe f8c2 	bl	800132c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e026      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x498>
 80031c2:	e01e      	b.n	8003202 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e019      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
 80031d0:	40021000 	.word	0x40021000
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCC_OscConfig+0x500>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3718      	adds	r7, #24
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000

08003210 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0d0      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b6a      	ldr	r3, [pc, #424]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d910      	bls.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b67      	ldr	r3, [pc, #412]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4965      	ldr	r1, [pc, #404]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e0b8      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d020      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0304 	and.w	r3, r3, #4
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	4a58      	ldr	r2, [pc, #352]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003272:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003276:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003284:	4b53      	ldr	r3, [pc, #332]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a52      	ldr	r2, [pc, #328]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800328a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800328e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003290:	4b50      	ldr	r3, [pc, #320]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	494d      	ldr	r1, [pc, #308]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d040      	beq.n	8003330 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b6:	4b47      	ldr	r3, [pc, #284]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d115      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e07f      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d107      	bne.n	80032de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ce:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e073      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032de:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e06b      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f023 0203 	bic.w	r2, r3, #3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4936      	ldr	r1, [pc, #216]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fe f814 	bl	800132c <HAL_GetTick>
 8003304:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003306:	e00a      	b.n	800331e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003308:	f7fe f810 	bl	800132c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e053      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 020c 	and.w	r2, r3, #12
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	429a      	cmp	r2, r3
 800332e:	d1eb      	bne.n	8003308 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d210      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800333e:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4922      	ldr	r1, [pc, #136]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0307 	and.w	r3, r3, #7
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d001      	beq.n	8003360 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e032      	b.n	80033c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4916      	ldr	r1, [pc, #88]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	490e      	ldr	r1, [pc, #56]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800339e:	f000 f821 	bl	80033e4 <HAL_RCC_GetSysClockFreq>
 80033a2:	4602      	mov	r2, r0
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	490a      	ldr	r1, [pc, #40]	; (80033d8 <HAL_RCC_ClockConfig+0x1c8>)
 80033b0:	5ccb      	ldrb	r3, [r1, r3]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a09      	ldr	r2, [pc, #36]	; (80033dc <HAL_RCC_ClockConfig+0x1cc>)
 80033b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_RCC_ClockConfig+0x1d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd ff72 	bl	80012a8 <HAL_InitTick>

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40022000 	.word	0x40022000
 80033d4:	40021000 	.word	0x40021000
 80033d8:	0800bc64 	.word	0x0800bc64
 80033dc:	20000000 	.word	0x20000000
 80033e0:	20000004 	.word	0x20000004

080033e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
 80033f6:	2300      	movs	r3, #0
 80033f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_RCC_GetSysClockFreq+0x94>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 030c 	and.w	r3, r3, #12
 800340a:	2b04      	cmp	r3, #4
 800340c:	d002      	beq.n	8003414 <HAL_RCC_GetSysClockFreq+0x30>
 800340e:	2b08      	cmp	r3, #8
 8003410:	d003      	beq.n	800341a <HAL_RCC_GetSysClockFreq+0x36>
 8003412:	e027      	b.n	8003464 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003414:	4b19      	ldr	r3, [pc, #100]	; (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003416:	613b      	str	r3, [r7, #16]
      break;
 8003418:	e027      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0c9b      	lsrs	r3, r3, #18
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	4a17      	ldr	r2, [pc, #92]	; (8003480 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003424:	5cd3      	ldrb	r3, [r2, r3]
 8003426:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d010      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <HAL_RCC_GetSysClockFreq+0x94>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	0c5b      	lsrs	r3, r3, #17
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	4a11      	ldr	r2, [pc, #68]	; (8003484 <HAL_RCC_GetSysClockFreq+0xa0>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003446:	fb03 f202 	mul.w	r2, r3, r2
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
 8003452:	e004      	b.n	800345e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a0c      	ldr	r2, [pc, #48]	; (8003488 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003458:	fb02 f303 	mul.w	r3, r2, r3
 800345c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	613b      	str	r3, [r7, #16]
      break;
 8003462:	e002      	b.n	800346a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetSysClockFreq+0x98>)
 8003466:	613b      	str	r3, [r7, #16]
      break;
 8003468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800346a:	693b      	ldr	r3, [r7, #16]
}
 800346c:	4618      	mov	r0, r3
 800346e:	371c      	adds	r7, #28
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	007a1200 	.word	0x007a1200
 8003480:	0800bc7c 	.word	0x0800bc7c
 8003484:	0800bc8c 	.word	0x0800bc8c
 8003488:	003d0900 	.word	0x003d0900

0800348c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003490:	4b02      	ldr	r3, [pc, #8]	; (800349c <HAL_RCC_GetHCLKFreq+0x10>)
 8003492:	681b      	ldr	r3, [r3, #0]
}
 8003494:	4618      	mov	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	20000000 	.word	0x20000000

080034a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034a4:	f7ff fff2 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	0a1b      	lsrs	r3, r3, #8
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4903      	ldr	r1, [pc, #12]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034bc:	4618      	mov	r0, r3
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40021000 	.word	0x40021000
 80034c4:	0800bc74 	.word	0x0800bc74

080034c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034cc:	f7ff ffde 	bl	800348c <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0adb      	lsrs	r3, r3, #11
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	; (80034ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	0800bc74 	.word	0x0800bc74

080034f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <RCC_Delay+0x34>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <RCC_Delay+0x38>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	0a5b      	lsrs	r3, r3, #9
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	fb02 f303 	mul.w	r3, r2, r3
 800350a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800350c:	bf00      	nop
  }
  while (Delay --);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e5a      	subs	r2, r3, #1
 8003512:	60fa      	str	r2, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1f9      	bne.n	800350c <RCC_Delay+0x1c>
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	bc80      	pop	{r7}
 8003522:	4770      	bx	lr
 8003524:	20000000 	.word	0x20000000
 8003528:	10624dd3 	.word	0x10624dd3

0800352c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e042      	b.n	80035c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d106      	bne.n	8003558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f7fd fd32 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2224      	movs	r2, #36	; 0x24
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f91d 	bl	80037b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	691a      	ldr	r2, [r3, #16]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	d16d      	bne.n	80036c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_UART_Transmit+0x2c>
 80035f2:	88fb      	ldrh	r3, [r7, #6]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e066      	b.n	80036ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2221      	movs	r2, #33	; 0x21
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800360a:	f7fd fe8f 	bl	800132c <HAL_GetTick>
 800360e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	88fa      	ldrh	r2, [r7, #6]
 8003614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	88fa      	ldrh	r2, [r7, #6]
 800361a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003624:	d108      	bne.n	8003638 <HAL_UART_Transmit+0x6c>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d104      	bne.n	8003638 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	e003      	b.n	8003640 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003640:	e02a      	b.n	8003698 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2180      	movs	r1, #128	; 0x80
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 f840 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e036      	b.n	80036ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003670:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	3302      	adds	r3, #2
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	e007      	b.n	800368a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	781a      	ldrb	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	3301      	adds	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1cf      	bne.n	8003642 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 f810 	bl	80036d2 <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e006      	b.n	80036ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e000      	b.n	80036ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b090      	sub	sp, #64	; 0x40
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	e050      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d04c      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f2:	f7fd fe1b 	bl	800132c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fe:	429a      	cmp	r2, r3
 8003700:	d241      	bcs.n	8003786 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	330c      	adds	r3, #12
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	330c      	adds	r3, #12
 8003720:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003722:	637a      	str	r2, [r7, #52]	; 0x34
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	e841 2300 	strex	r3, r2, [r1]
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e5      	bne.n	8003702 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3314      	adds	r3, #20
 800373c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	613b      	str	r3, [r7, #16]
   return(result);
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	3314      	adds	r3, #20
 8003754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003756:	623a      	str	r2, [r7, #32]
 8003758:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	69f9      	ldr	r1, [r7, #28]
 800375c:	6a3a      	ldr	r2, [r7, #32]
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	61bb      	str	r3, [r7, #24]
   return(result);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e5      	bne.n	8003736 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e00f      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d09f      	beq.n	80036e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3740      	adds	r7, #64	; 0x40
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	4313      	orrs	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037ea:	f023 030c 	bic.w	r3, r3, #12
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <UART_SetConfig+0x114>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d103      	bne.n	8003820 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7ff fe56 	bl	80034c8 <HAL_RCC_GetPCLK2Freq>
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	e002      	b.n	8003826 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7ff fe3e 	bl	80034a0 <HAL_RCC_GetPCLK1Freq>
 8003824:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	4a22      	ldr	r2, [pc, #136]	; (80038c8 <UART_SetConfig+0x118>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	0119      	lsls	r1, r3, #4
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f2f3 	udiv	r2, r2, r3
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <UART_SetConfig+0x118>)
 800385e:	fba3 0302 	umull	r0, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	2064      	movs	r0, #100	; 0x64
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	3332      	adds	r3, #50	; 0x32
 8003870:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <UART_SetConfig+0x118>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800387c:	4419      	add	r1, r3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4613      	mov	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	009a      	lsls	r2, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	fbb2 f2f3 	udiv	r2, r2, r3
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <UART_SetConfig+0x118>)
 8003896:	fba3 0302 	umull	r0, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2064      	movs	r0, #100	; 0x64
 800389e:	fb00 f303 	mul.w	r3, r0, r3
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	3332      	adds	r3, #50	; 0x32
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <UART_SetConfig+0x118>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	f003 020f 	and.w	r2, r3, #15
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	440a      	add	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40013800 	.word	0x40013800
 80038c8:	51eb851f 	.word	0x51eb851f

080038cc <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80038d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80038e0:	2101      	movs	r1, #1
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f001 f856 	bl	8004994 <VL53L1_data_init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80038ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038fc:	2300      	movs	r3, #0
 80038fe:	73bb      	strb	r3, [r7, #14]
 8003900:	e012      	b.n	8003928 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8003902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d112      	bne.n	8003930 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	b29b      	uxth	r3, r3
 800390e:	2201      	movs	r2, #1
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 fbcd 	bl	80040b2 <VL53L1_SetLimitCheckEnable>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	4313      	orrs	r3, r2
 8003920:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003922:	7bbb      	ldrb	r3, [r7, #14]
 8003924:	3301      	adds	r3, #1
 8003926:	73bb      	strb	r3, [r7, #14]
 8003928:	7bbb      	ldrb	r3, [r7, #14]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d9e9      	bls.n	8003902 <VL53L1_DataInit+0x36>
 800392e:	e000      	b.n	8003932 <VL53L1_DataInit+0x66>
		else
			break;
 8003930:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003952:	2320      	movs	r3, #32
 8003954:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7bba      	ldrb	r2, [r7, #14]
 800395a:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800395c:	2108      	movs	r1, #8
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f8f5 	bl	8003b4e <VL53L1_SetPresetMode>
 8003964:	4603      	mov	r3, r0
 8003966:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2208      	movs	r2, #8
 800396c:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8003970:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003984:	2300      	movs	r3, #0
 8003986:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8003988:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 f83b 	bl	8008a08 <VL53L1_poll_for_boot_completion>
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	603a      	str	r2, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
 80039b0:	460b      	mov	r3, r1
 80039b2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80039b8:	4a2a      	ldr	r2, [pc, #168]	; (8003a64 <ComputeDevicePresetMode+0xc0>)
 80039ba:	f107 0310 	add.w	r3, r7, #16
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4611      	mov	r1, r2
 80039c2:	8019      	strh	r1, [r3, #0]
 80039c4:	3302      	adds	r3, #2
 80039c6:	0c12      	lsrs	r2, r2, #16
 80039c8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80039ca:	4a27      	ldr	r2, [pc, #156]	; (8003a68 <ComputeDevicePresetMode+0xc4>)
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4611      	mov	r1, r2
 80039d4:	8019      	strh	r1, [r3, #0]
 80039d6:	3302      	adds	r3, #2
 80039d8:	0c12      	lsrs	r2, r2, #16
 80039da:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <ComputeDevicePresetMode+0xc8>)
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4611      	mov	r1, r2
 80039e6:	8019      	strh	r1, [r3, #0]
 80039e8:	3302      	adds	r3, #2
 80039ea:	0c12      	lsrs	r2, r2, #16
 80039ec:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2201      	movs	r2, #1
 80039f2:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80039f4:	79bb      	ldrb	r3, [r7, #6]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d002      	beq.n	8003a00 <ComputeDevicePresetMode+0x5c>
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d003      	beq.n	8003a06 <ComputeDevicePresetMode+0x62>
 80039fe:	e005      	b.n	8003a0c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75bb      	strb	r3, [r7, #22]
		break;
 8003a04:	e004      	b.n	8003a10 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8003a06:	2301      	movs	r3, #1
 8003a08:	75bb      	strb	r3, [r7, #22]
		break;
 8003a0a:	e001      	b.n	8003a10 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d015      	beq.n	8003a42 <ComputeDevicePresetMode+0x9e>
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	dc1b      	bgt.n	8003a52 <ComputeDevicePresetMode+0xae>
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d009      	beq.n	8003a32 <ComputeDevicePresetMode+0x8e>
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d117      	bne.n	8003a52 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8003a22:	7dbb      	ldrb	r3, [r7, #22]
 8003a24:	3318      	adds	r3, #24
 8003a26:	443b      	add	r3, r7
 8003a28:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
		break;
 8003a30:	e011      	b.n	8003a56 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	3318      	adds	r3, #24
 8003a36:	443b      	add	r3, r7
 8003a38:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	701a      	strb	r2, [r3, #0]
		break;
 8003a40:	e009      	b.n	8003a56 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003a42:	7dbb      	ldrb	r3, [r7, #22]
 8003a44:	3318      	adds	r3, #24
 8003a46:	443b      	add	r3, r7
 8003a48:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	701a      	strb	r2, [r3, #0]
		break;
 8003a50:	e001      	b.n	8003a56 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003a52:	23f8      	movs	r3, #248	; 0xf8
 8003a54:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8003a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	371c      	adds	r7, #28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	0800bc54 	.word	0x0800bc54
 8003a68:	0800bc58 	.word	0x0800bc58
 8003a6c:	0800bc5c 	.word	0x0800bc5c

08003a70 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003a70:	b5b0      	push	{r4, r5, r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af04      	add	r7, sp, #16
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	72fb      	strb	r3, [r7, #11]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003a94:	2300      	movs	r3, #0
 8003a96:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d002      	beq.n	8003aa4 <SetPresetMode+0x34>
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d103      	bne.n	8003aac <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003aa4:	2340      	movs	r3, #64	; 0x40
 8003aa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003aaa:	e002      	b.n	8003ab2 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003aac:	2320      	movs	r3, #32
 8003aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003ab2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8003ab6:	7ab9      	ldrb	r1, [r7, #10]
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff72 	bl	80039a4 <ComputeDevicePresetMode>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003ac6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d112      	bne.n	8003af4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8003ace:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ad2:	f107 001c 	add.w	r0, r7, #28
 8003ad6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	9301      	str	r3, [sp, #4]
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f001 fa0f 	bl	8004f0c <VL53L1_get_preset_mode_timing_cfg>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d112      	bne.n	8003b22 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8003afc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003b00:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003b02:	69fd      	ldr	r5, [r7, #28]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	9102      	str	r1, [sp, #8]
 8003b0c:	9201      	str	r2, [sp, #4]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	462b      	mov	r3, r5
 8003b12:	4622      	mov	r2, r4
 8003b14:	4601      	mov	r1, r0
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f001 faa2 	bl	8005060 <VL53L1_set_preset_mode>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b30:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003b32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	7afa      	ldrb	r2, [r7, #11]
 8003b3e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8003b42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3728      	adds	r7, #40	; 0x28
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bdb0      	pop	{r4, r5, r7, pc}

08003b4e <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f003 fd92 	bl	800768c <VL53L1_low_power_auto_data_init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8003b6c:	7bba      	ldrb	r2, [r7, #14]
 8003b6e:	78f9      	ldrb	r1, [r7, #3]
 8003b70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff7b 	bl	8003a70 <SetPresetMode>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8003b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d117      	bne.n	8003bb6 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d005      	beq.n	8003b98 <VL53L1_SetPresetMode+0x4a>
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d002      	beq.n	8003b98 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b92:	78fb      	ldrb	r3, [r7, #3]
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	d107      	bne.n	8003ba8 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b98:	f24a 0128 	movw	r1, #41000	; 0xa028
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f891 	bl	8003cc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e006      	b.n	8003bb6 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003ba8:	f248 2135 	movw	r1, #33333	; 0x8235
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f889 	bl	8003cc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d106      	bne.n	8003bcc <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8003bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa08 	bl	8003fd8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003be4:	2300      	movs	r3, #0
 8003be6:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003bfa:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d008      	beq.n	8003c14 <VL53L1_SetDistanceMode+0x3c>
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d005      	beq.n	8003c14 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d002      	beq.n	8003c14 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003c0e:	f06f 0303 	mvn.w	r3, #3
 8003c12:	e052      	b.n	8003cba <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8003c14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d107      	bne.n	8003c2c <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8003c1c:	f107 0308 	add.w	r3, r7, #8
 8003c20:	4619      	mov	r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 f91c 	bl	8004e60 <VL53L1_get_user_zone>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	f107 0210 	add.w	r2, r7, #16
 8003c42:	f107 010c 	add.w	r1, r7, #12
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f001 f846 	bl	8004cd8 <VL53L1_get_timeouts_us>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8003c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d107      	bne.n	8003c68 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	7fb9      	ldrb	r1, [r7, #30]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7ff ff06 	bl	8003a70 <SetPresetMode>
 8003c64:	4603      	mov	r3, r0
 8003c66:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8003c68:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d103      	bne.n	8003c78 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10e      	bne.n	8003c9e <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 ffee 	bl	8004c68 <VL53L1_set_timeouts_us>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8003c90:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	4619      	mov	r1, r3
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f001 f8b4 	bl	8004e1a <VL53L1_set_user_zone>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8003cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3720      	adds	r7, #32
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08c      	sub	sp, #48	; 0x30
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003ce8:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8003cea:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	4a64      	ldr	r2, [pc, #400]	; (8003e80 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d902      	bls.n	8003cfa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cf4:	23fc      	movs	r3, #252	; 0xfc
 8003cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003cfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003d02:	f107 031a 	add.w	r3, r7, #26
 8003d06:	461a      	mov	r2, r3
 8003d08:	2105      	movs	r1, #5
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fa8a 	bl	8004224 <VL53L1_GetSequenceStepEnable>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003d16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003d1e:	f107 0319 	add.w	r3, r7, #25
 8003d22:	461a      	mov	r2, r3
 8003d24:	2106      	movs	r1, #6
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa7c 	bl	8004224 <VL53L1_GetSequenceStepEnable>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8003d3a:	f107 0314 	add.w	r3, r7, #20
 8003d3e:	f107 0210 	add.w	r2, r7, #16
 8003d42:	f107 010c 	add.w	r1, r7, #12
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 ffc6 	bl	8004cd8 <VL53L1_get_timeouts_us>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003d52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f040 8081 	bne.w	8003e5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003d62:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8003d6c:	7efb      	ldrb	r3, [r7, #27]
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d026      	beq.n	8003dc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	dc43      	bgt.n	8003dfe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d00f      	beq.n	8003d9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d13f      	bne.n	8003dfe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d7e:	7ebb      	ldrb	r3, [r7, #26]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d002      	beq.n	8003d8a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8003d84:	7e7b      	ldrb	r3, [r7, #25]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d103      	bne.n	8003d92 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8003d8a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8003d90:	e038      	b.n	8003e04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8003d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003d98:	e034      	b.n	8003e04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003da0:	7ebb      	ldrb	r3, [r7, #26]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d002      	beq.n	8003dac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003da6:	7e7b      	ldrb	r3, [r7, #25]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d103      	bne.n	8003db4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8003dac:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db2:	e002      	b.n	8003dba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8003db4:	f245 4360 	movw	r3, #21600	; 0x5460
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003dbe:	e021      	b.n	8003e04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003dc6:	23f5      	movs	r3, #245	; 0xf5
 8003dc8:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f248 0136 	movw	r1, #32822	; 0x8036
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f001 ffef 	bl	8005db8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	dd07      	ble.n	8003df0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	22f5      	movs	r2, #245	; 0xf5
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	4413      	add	r3, r2
 8003dee:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8003df8:	2302      	movs	r3, #2
 8003dfa:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003dfc:	e002      	b.n	8003e04 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003dfe:	23f8      	movs	r3, #248	; 0xf8
 8003e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003e04:	683a      	ldr	r2, [r7, #0]
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d803      	bhi.n	8003e14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003e0c:	23fc      	movs	r3, #252	; 0xfc
 8003e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e12:	e003      	b.n	8003e1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003e1a:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003e1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d11c      	bne.n	8003e5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d203      	bcs.n	8003e34 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003e2c:	23fc      	movs	r3, #252	; 0xfc
 8003e2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e32:	e00d      	b.n	8003e50 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3c:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003e3e:	68f9      	ldr	r1, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 ff0f 	bl	8004c68 <VL53L1_set_timeouts_us>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8003e50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d102      	bne.n	8003e5e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003e5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3730      	adds	r7, #48	; 0x30
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	00086470 	.word	0x00086470
 8003e80:	00989680 	.word	0x00989680

08003e84 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	; 0x30
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003eb2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003eba:	f107 031b 	add.w	r3, r7, #27
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2105      	movs	r1, #5
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f9ae 	bl	8004224 <VL53L1_GetSequenceStepEnable>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003ece:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d109      	bne.n	8003eea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003ed6:	f107 031a 	add.w	r3, r7, #26
 8003eda:	461a      	mov	r2, r3
 8003edc:	2106      	movs	r1, #6
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f9a0 	bl	8004224 <VL53L1_GetSequenceStepEnable>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003eea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10b      	bne.n	8003f0a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	f107 0214 	add.w	r2, r7, #20
 8003efa:	f107 010c 	add.w	r1, r7, #12
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 feea 	bl	8004cd8 <VL53L1_get_timeouts_us>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8003f0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d155      	bne.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d02a      	beq.n	8003f7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	dc47      	bgt.n	8003fb8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d012      	beq.n	8003f52 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d143      	bne.n	8003fb8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003f30:	7efb      	ldrb	r3, [r7, #27]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d002      	beq.n	8003f3c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8003f36:	7ebb      	ldrb	r3, [r7, #26]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d105      	bne.n	8003f48 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f42:	3308      	adds	r3, #8
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8003f46:	e03a      	b.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f50:	e035      	b.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003f52:	7efb      	ldrb	r3, [r7, #27]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d002      	beq.n	8003f5e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8003f58:	7ebb      	ldrb	r3, [r7, #26]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d106      	bne.n	8003f6c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8003f64:	3334      	adds	r3, #52	; 0x34
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8003f6a:	e028      	b.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8003f72:	3330      	adds	r3, #48	; 0x30
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f78:	e021      	b.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003f7a:	23f5      	movs	r3, #245	; 0xf5
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8003f7e:	f107 0308 	add.w	r3, r7, #8
 8003f82:	461a      	mov	r2, r3
 8003f84:	f248 0136 	movw	r1, #32822	; 0x8036
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f001 ff15 	bl	8005db8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dd07      	ble.n	8003fa4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	22f5      	movs	r2, #245	; 0xf5
 8003f98:	fb02 f303 	mul.w	r3, r2, r3
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	4413      	add	r3, r2
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003faa:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003fb6:	e002      	b.n	8003fbe <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003fb8:	23f8      	movs	r3, #248	; 0xf8
 8003fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8003fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fca:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003fcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3730      	adds	r7, #48	; 0x30
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	019b      	lsls	r3, r3, #6
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	099b      	lsrs	r3, r3, #6
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fde5 	bl	8004bce <VL53L1_set_inter_measurement_period_ms>
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	10624dd3 	.word	0x10624dd3

08004018 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004022:	2300      	movs	r3, #0
 8004024:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004026:	f107 0308 	add.w	r3, r7, #8
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fdf6 	bl	8004c1e <VL53L1_get_inter_measurement_period_ms>
 8004032:	4603      	mov	r3, r0
 8004034:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	019b      	lsls	r3, r3, #6
 800403c:	4907      	ldr	r1, [pc, #28]	; (800405c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800403e:	fba1 1303 	umull	r1, r3, r1, r3
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800404e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	10624dd3 	.word	0x10624dd3

08004060 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	460b      	mov	r3, r1
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004072:	897b      	ldrh	r3, [r7, #10]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <SetLimitValue+0x1e>
 8004078:	2b01      	cmp	r3, #1
 800407a:	d009      	beq.n	8004090 <SetLimitValue+0x30>
 800407c:	e011      	b.n	80040a2 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0b9b      	lsrs	r3, r3, #14
 8004082:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004084:	8abb      	ldrh	r3, [r7, #20]
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f001 f974 	bl	8005376 <VL53L1_set_lite_sigma_threshold>
		break;
 800408e:	e00a      	b.n	80040a6 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0a5b      	lsrs	r3, r3, #9
 8004094:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004096:	8abb      	ldrh	r3, [r7, #20]
 8004098:	4619      	mov	r1, r3
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f001 f995 	bl	80053ca <VL53L1_set_lite_min_count_rate>
		break;
 80040a0:	e001      	b.n	80040a6 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80040a2:	23fc      	movs	r3, #252	; 0xfc
 80040a4:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
 80040be:	4613      	mov	r3, r2
 80040c0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d902      	bls.n	80040d6 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80040d0:	23fc      	movs	r3, #252	; 0xfc
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e014      	b.n	8004100 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80040d6:	787b      	ldrb	r3, [r7, #1]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	e006      	b.n	80040f0 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040e2:	887b      	ldrh	r3, [r7, #2]
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	33e0      	adds	r3, #224	; 0xe0
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7ff ffb2 	bl	8004060 <SetLimitValue>
 80040fc:	4603      	mov	r3, r0
 80040fe:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8004100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10c      	bne.n	8004122 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8004108:	787b      	ldrb	r3, [r7, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2da      	uxtb	r2, r3
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	4611      	mov	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	460a      	mov	r2, r1
 800411e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800412e:	b480      	push	{r7}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	460b      	mov	r3, r1
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004140:	897b      	ldrh	r3, [r7, #10]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d905      	bls.n	8004152 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004146:	23fc      	movs	r3, #252	; 0xfc
 8004148:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e008      	b.n	8004164 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800415c:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7dba      	ldrb	r2, [r7, #22]
 8004162:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004164:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr

08004172 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	460b      	mov	r3, r1
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004188:	897b      	ldrh	r3, [r7, #10]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <VL53L1_GetLimitCheckValue+0x22>
 800418e:	2b01      	cmp	r3, #1
 8004190:	d00c      	beq.n	80041ac <VL53L1_GetLimitCheckValue+0x3a>
 8004192:	e017      	b.n	80041c4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004194:	f107 0314 	add.w	r3, r7, #20
 8004198:	4619      	mov	r1, r3
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f001 f8d6 	bl	800534c <VL53L1_get_lite_sigma_threshold>
 80041a0:	4603      	mov	r3, r0
 80041a2:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80041a4:	8abb      	ldrh	r3, [r7, #20]
 80041a6:	039b      	lsls	r3, r3, #14
 80041a8:	61bb      	str	r3, [r7, #24]
		break;
 80041aa:	e00d      	b.n	80041c8 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80041ac:	f107 0316 	add.w	r3, r7, #22
 80041b0:	4619      	mov	r1, r3
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f001 f8f4 	bl	80053a0 <VL53L1_get_lite_min_count_rate>
 80041b8:	4603      	mov	r3, r0
 80041ba:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80041bc:	8afb      	ldrh	r3, [r7, #22]
 80041be:	025b      	lsls	r3, r3, #9
 80041c0:	61bb      	str	r3, [r7, #24]
		break;
 80041c2:	e001      	b.n	80041c8 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80041c4:	23fc      	movs	r3, #252	; 0xfc
 80041c6:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80041c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d123      	bne.n	8004218 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d110      	bne.n	80041f8 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	33e0      	adds	r3, #224	; 0xe0
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041ea:	897b      	ldrh	r3, [r7, #10]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80041f6:	e00f      	b.n	8004218 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041fe:	897b      	ldrh	r3, [r7, #10]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	33e0      	adds	r3, #224	; 0xe0
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	4413      	add	r3, r2
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800420c:	897b      	ldrh	r3, [r7, #10]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8004218:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b086      	sub	sp, #24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	460b      	mov	r3, r1
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004232:	2300      	movs	r3, #0
 8004234:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4619      	mov	r1, r3
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fdb6 	bl	8004dae <VL53L1_get_sequence_config_bit>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800425c:	2300      	movs	r3, #0
 800425e:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	789b      	ldrb	r3, [r3, #2]
 8004264:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004266:	7dbb      	ldrb	r3, [r7, #22]
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d002      	beq.n	8004272 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fa69 	bl	8004744 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8004278:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800427a:	7d7b      	ldrb	r3, [r7, #21]
 800427c:	2b63      	cmp	r3, #99	; 0x63
 800427e:	dc12      	bgt.n	80042a6 <VL53L1_StartMeasurement+0x52>
 8004280:	2b62      	cmp	r3, #98	; 0x62
 8004282:	da0d      	bge.n	80042a0 <VL53L1_StartMeasurement+0x4c>
 8004284:	2b05      	cmp	r3, #5
 8004286:	dc0e      	bgt.n	80042a6 <VL53L1_StartMeasurement+0x52>
 8004288:	2b04      	cmp	r3, #4
 800428a:	da09      	bge.n	80042a0 <VL53L1_StartMeasurement+0x4c>
 800428c:	2b02      	cmp	r3, #2
 800428e:	dc02      	bgt.n	8004296 <VL53L1_StartMeasurement+0x42>
 8004290:	2b00      	cmp	r3, #0
 8004292:	da05      	bge.n	80042a0 <VL53L1_StartMeasurement+0x4c>
 8004294:	e007      	b.n	80042a6 <VL53L1_StartMeasurement+0x52>
 8004296:	2b03      	cmp	r3, #3
 8004298:	d105      	bne.n	80042a6 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
		break;
 800429e:	e004      	b.n	80042aa <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80042a0:	23f2      	movs	r3, #242	; 0xf2
 80042a2:	75fb      	strb	r3, [r7, #23]
		break;
 80042a4:	e001      	b.n	80042aa <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80042a6:	23fd      	movs	r3, #253	; 0xfd
 80042a8:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80042aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11f      	bne.n	80042f2 <VL53L1_StartMeasurement+0x9e>
 80042b2:	7dbb      	ldrb	r3, [r7, #22]
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d11c      	bne.n	80042f2 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80042b8:	f107 0310 	add.w	r3, r7, #16
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fde0 	bl	8003e84 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80042c4:	4603      	mov	r3, r0
 80042c6:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	4a17      	ldr	r2, [pc, #92]	; (8004328 <VL53L1_StartMeasurement+0xd4>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80042d4:	f107 030c 	add.w	r3, r7, #12
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7ff fe9c 	bl	8004018 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80042e0:	4603      	mov	r3, r0
 80042e2:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d901      	bls.n	80042f2 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80042ee:	23fc      	movs	r3, #252	; 0xfc
 80042f0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80042f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d107      	bne.n	800430a <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80042fa:	7dbb      	ldrb	r3, [r7, #22]
 80042fc:	2206      	movs	r2, #6
 80042fe:	4619      	mov	r1, r3
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 f897 	bl	8005434 <VL53L1_init_and_start_range>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800430a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2204      	movs	r2, #4
 8004316:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800431a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	10624dd3 	.word	0x10624dd3

0800432c <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	789b      	ldrb	r3, [r3, #2]
 800433c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800433e:	7bbb      	ldrb	r3, [r7, #14]
 8004340:	4619      	mov	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f001 fc04 	bl	8005b50 <VL53L1_clear_interrupt_and_enable_next_range>
 8004348:	4603      	mov	r3, r0
 800434a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800434c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8004364:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f004 fb79 	bl	8008a60 <VL53L1_poll_for_range_completion>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004372:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8004380:	b480      	push	{r7}
 8004382:	b08d      	sub	sp, #52	; 0x34
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	603a      	str	r2, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
 800438c:	460b      	mov	r3, r1
 800438e:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8004390:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004394:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8004396:	231e      	movs	r3, #30
 8004398:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800439a:	4b32      	ldr	r3, [pc, #200]	; (8004464 <ComputeRQL+0xe4>)
 800439c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800439e:	4b32      	ldr	r3, [pc, #200]	; (8004468 <ComputeRQL+0xe8>)
 80043a0:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80043a2:	f641 139a 	movw	r3, #6554	; 0x199a
 80043a6:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <ComputeRQL+0x36>
		returnvalue = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043b4:	e04f      	b.n	8004456 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80043b6:	79bb      	ldrb	r3, [r7, #6]
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d103      	bne.n	80043c4 <ComputeRQL+0x44>
		returnvalue = 50;
 80043bc:	2332      	movs	r3, #50	; 0x32
 80043be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043c2:	e048      	b.n	8004456 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80043ca:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80043ce:	429a      	cmp	r2, r3
 80043d0:	dd03      	ble.n	80043da <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80043d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d8:	e007      	b.n	80043ea <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80043e0:	461a      	mov	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fb02 f303 	mul.w	r3, r2, r3
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d020      	beq.n	8004432 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043f4:	461a      	mov	r2, r3
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	fb02 f303 	mul.w	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	085b      	lsrs	r3, r3, #1
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4413      	add	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	429a      	cmp	r2, r3
 800441e:	d804      	bhi.n	800442a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
 8004428:	e006      	b.n	8004438 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800442a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004430:	e002      	b.n	8004438 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8004432:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8004436:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b32      	cmp	r3, #50	; 0x32
 8004442:	d905      	bls.n	8004450 <ComputeRQL+0xd0>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b64      	cmp	r3, #100	; 0x64
 8004448:	bf28      	it	cs
 800444a:	2364      	movcs	r3, #100	; 0x64
 800444c:	b2db      	uxtb	r3, r3
 800444e:	e000      	b.n	8004452 <ComputeRQL+0xd2>
 8004450:	2332      	movs	r3, #50	; 0x32
 8004452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8004456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800445a:	4618      	mov	r0, r3
 800445c:	3734      	adds	r7, #52	; 0x34
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr
 8004464:	0075b333 	.word	0x0075b333
 8004468:	0030cccd 	.word	0x0030cccd

0800446c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	4603      	mov	r3, r0
 8004474:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	3b04      	subs	r3, #4
 800447a:	2b0f      	cmp	r3, #15
 800447c:	d83d      	bhi.n	80044fa <ConvertStatusLite+0x8e>
 800447e:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <ConvertStatusLite+0x18>)
 8004480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004484:	080044d7 	.word	0x080044d7
 8004488:	080044d1 	.word	0x080044d1
 800448c:	080044dd 	.word	0x080044dd
 8004490:	080044e3 	.word	0x080044e3
 8004494:	080044ef 	.word	0x080044ef
 8004498:	080044f5 	.word	0x080044f5
 800449c:	080044fb 	.word	0x080044fb
 80044a0:	080044fb 	.word	0x080044fb
 80044a4:	080044e9 	.word	0x080044e9
 80044a8:	080044fb 	.word	0x080044fb
 80044ac:	080044fb 	.word	0x080044fb
 80044b0:	080044fb 	.word	0x080044fb
 80044b4:	080044fb 	.word	0x080044fb
 80044b8:	080044fb 	.word	0x080044fb
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	080044cb 	.word	0x080044cb
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80044c4:	230a      	movs	r3, #10
 80044c6:	73fb      	strb	r3, [r7, #15]
		break;
 80044c8:	e019      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80044ca:	2306      	movs	r3, #6
 80044cc:	73fb      	strb	r3, [r7, #15]
		break;
 80044ce:	e016      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80044d0:	2304      	movs	r3, #4
 80044d2:	73fb      	strb	r3, [r7, #15]
		break;
 80044d4:	e013      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80044d6:	2302      	movs	r3, #2
 80044d8:	73fb      	strb	r3, [r7, #15]
		break;
 80044da:	e010      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80044dc:	2301      	movs	r3, #1
 80044de:	73fb      	strb	r3, [r7, #15]
		break;
 80044e0:	e00d      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80044e2:	2307      	movs	r3, #7
 80044e4:	73fb      	strb	r3, [r7, #15]
		break;
 80044e6:	e00a      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80044e8:	2309      	movs	r3, #9
 80044ea:	73fb      	strb	r3, [r7, #15]
		break;
 80044ec:	e007      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80044ee:	2303      	movs	r3, #3
 80044f0:	73fb      	strb	r3, [r7, #15]
		break;
 80044f2:	e004      	b.n	80044fe <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
		break;
 80044f8:	e001      	b.n	80044fe <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80044fa:	23ff      	movs	r3, #255	; 0xff
 80044fc:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08c      	sub	sp, #48	; 0x30
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	460b      	mov	r3, r1
 8004518:	72fb      	strb	r3, [r7, #11]
 800451a:	4613      	mov	r3, r2
 800451c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800451e:	2300      	movs	r3, #0
 8004520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004532:	f003 031f 	and.w	r3, r3, #31
 8004536:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800453a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800453e:	7afb      	ldrb	r3, [r7, #11]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff ff1c 	bl	8004380 <ComputeRQL>
 8004548:	4603      	mov	r3, r0
 800454a:	461a      	mov	r2, r3
 800454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004554:	025b      	lsls	r3, r3, #9
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004562:	025b      	lsls	r3, r3, #9
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	6a3a      	ldr	r2, [r7, #32]
 8004580:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8004588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2200      	movs	r2, #0
 8004590:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8004592:	7abb      	ldrb	r3, [r7, #10]
 8004594:	2b11      	cmp	r3, #17
 8004596:	d009      	beq.n	80045ac <SetSimpleData+0xa0>
 8004598:	2b11      	cmp	r3, #17
 800459a:	dc0f      	bgt.n	80045bc <SetSimpleData+0xb0>
 800459c:	2b03      	cmp	r3, #3
 800459e:	dc02      	bgt.n	80045a6 <SetSimpleData+0x9a>
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	dc03      	bgt.n	80045ac <SetSimpleData+0xa0>
 80045a4:	e00a      	b.n	80045bc <SetSimpleData+0xb0>
 80045a6:	2b0d      	cmp	r3, #13
 80045a8:	d004      	beq.n	80045b4 <SetSimpleData+0xa8>
 80045aa:	e007      	b.n	80045bc <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80045ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ae:	2205      	movs	r2, #5
 80045b0:	76da      	strb	r2, [r3, #27]
		break;
 80045b2:	e006      	b.n	80045c2 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80045b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b6:	220d      	movs	r2, #13
 80045b8:	76da      	strb	r2, [r3, #27]
		break;
 80045ba:	e002      	b.n	80045c2 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	2200      	movs	r2, #0
 80045c0:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	7edb      	ldrb	r3, [r3, #27]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80045ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff4c 	bl	800446c <ConvertStatusLite>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80045d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045da:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045e0:	025b      	lsls	r3, r3, #9
 80045e2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a3a      	ldr	r2, [r7, #32]
 80045e8:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045f0:	025b      	lsls	r3, r3, #9
 80045f2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a3a      	ldr	r2, [r7, #32]
 80045f8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	461a      	mov	r2, r3
 8004602:	2100      	movs	r1, #0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fdb4 	bl	8004172 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800460a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800460e:	2b06      	cmp	r3, #6
 8004610:	bf0c      	ite	eq
 8004612:	2301      	moveq	r3, #1
 8004614:	2300      	movne	r3, #0
 8004616:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8004618:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800461a:	f107 0319 	add.w	r3, r7, #25
 800461e:	461a      	mov	r2, r3
 8004620:	2100      	movs	r1, #0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff fd83 	bl	800412e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004628:	7e7b      	ldrb	r3, [r7, #25]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d104      	bne.n	8004638 <SetSimpleData+0x12c>
 800462e:	7ffb      	ldrb	r3, [r7, #31]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <SetSimpleData+0x12c>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <SetSimpleData+0x12e>
 8004638:	2300      	movs	r3, #0
 800463a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	7fba      	ldrb	r2, [r7, #30]
 8004640:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8004644:	f107 0314 	add.w	r3, r7, #20
 8004648:	461a      	mov	r2, r3
 800464a:	2101      	movs	r1, #1
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff fd90 	bl	8004172 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8004652:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004656:	2b04      	cmp	r3, #4
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004660:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8004662:	f107 0319 	add.w	r3, r7, #25
 8004666:	461a      	mov	r2, r3
 8004668:	2101      	movs	r1, #1
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fd5f 	bl	800412e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004670:	7e7b      	ldrb	r3, [r7, #25]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d104      	bne.n	8004680 <SetSimpleData+0x174>
 8004676:	7f7b      	ldrb	r3, [r7, #29]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <SetSimpleData+0x174>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <SetSimpleData+0x176>
 8004680:	2300      	movs	r3, #0
 8004682:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	7fba      	ldrb	r2, [r7, #30]
 8004688:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800468c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468e:	8b1b      	ldrh	r3, [r3, #24]
 8004690:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	7edb      	ldrb	r3, [r3, #27]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d110      	bne.n	80046bc <SetSimpleData+0x1b0>
 800469a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	da0c      	bge.n	80046bc <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80046a2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80046a6:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <SetSimpleData+0x1bc>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	da03      	bge.n	80046b6 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	220e      	movs	r2, #14
 80046b2:	76da      	strb	r2, [r3, #27]
 80046b4:	e002      	b.n	80046bc <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80046b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b8:	2200      	movs	r2, #0
 80046ba:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80046bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3730      	adds	r7, #48	; 0x30
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	2000000c 	.word	0x2000000c

080046cc <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b0a8      	sub	sp, #160	; 0xa0
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80046dc:	f107 0308 	add.w	r3, r7, #8
 80046e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80046e4:	221c      	movs	r2, #28
 80046e6:	21ff      	movs	r1, #255	; 0xff
 80046e8:	6838      	ldr	r0, [r7, #0]
 80046ea:	f005 f992 	bl	8009a12 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80046ee:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046f2:	2102      	movs	r1, #2
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f001 f9bb 	bl	8005a70 <VL53L1_get_device_results>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8004700:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8004704:	2b00      	cmp	r3, #0
 8004706:	d117      	bne.n	8004738 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8004708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800470c:	789a      	ldrb	r2, [r3, #2]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8004712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004716:	3304      	adds	r3, #4
 8004718:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800471c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004720:	78da      	ldrb	r2, [r3, #3]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800472a:	2101      	movs	r1, #1
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff feed 	bl	800450c <SetSimpleData>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004738:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800473c:	4618      	mov	r0, r3
 800473e:	3798      	adds	r7, #152	; 0x98
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0c6      	sub	sp, #280	; 0x118
 8004748:	af00      	add	r7, sp, #0
 800474a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800474e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004752:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004754:	2300      	movs	r3, #0
 8004756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004760:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8004768:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800476c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004770:	2200      	movs	r2, #0
 8004772:	2185      	movs	r1, #133	; 0x85
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	f004 fa4d 	bl	8008c14 <VL53L1_WrByte>
 800477a:	4603      	mov	r3, r0
 800477c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8004780:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8004788:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800478c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004790:	6818      	ldr	r0, [r3, #0]
 8004792:	f002 fd46 	bl	8007222 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8004796:	4b7e      	ldr	r3, [pc, #504]	; (8004990 <VL53L1_LoadPatch+0x24c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 800479e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d81a      	bhi.n	80047dc <VL53L1_LoadPatch+0x98>
 80047a6:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <VL53L1_LoadPatch+0x68>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c5 	.word	0x080047c5
 80047b4:	080047cd 	.word	0x080047cd
 80047b8:	080047d5 	.word	0x080047d5
	case 0:
		patch_power = 0x00;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047c2:	e00e      	b.n	80047e2 <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80047c4:	2310      	movs	r3, #16
 80047c6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047ca:	e00a      	b.n	80047e2 <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80047cc:	2320      	movs	r3, #32
 80047ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047d2:	e006      	b.n	80047e2 <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80047d4:	2340      	movs	r3, #64	; 0x40
 80047d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047da:	e002      	b.n	80047e2 <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80047e2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d134      	bne.n	8004854 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80047ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047f2:	2229      	movs	r2, #41	; 0x29
 80047f4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80047f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047fa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047fe:	22c9      	movs	r2, #201	; 0xc9
 8004800:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8004802:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004806:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800480a:	220e      	movs	r2, #14
 800480c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800480e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004812:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800481a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800481e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004822:	2228      	movs	r2, #40	; 0x28
 8004824:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800482a:	b2da      	uxtb	r2, r3
 800482c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004830:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004834:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8004836:	f107 020c 	add.w	r2, r7, #12
 800483a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800483e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004842:	2306      	movs	r3, #6
 8004844:	f240 4176 	movw	r1, #1142	; 0x476
 8004848:	6800      	ldr	r0, [r0, #0]
 800484a:	f004 f977 	bl	8008b3c <VL53L1_WriteMulti>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8004854:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004858:	2b00      	cmp	r3, #0
 800485a:	d132      	bne.n	80048c2 <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 800485c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004860:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004864:	2203      	movs	r2, #3
 8004866:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004868:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800486c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004870:	226d      	movs	r2, #109	; 0x6d
 8004872:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004874:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004878:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800487c:	2203      	movs	r2, #3
 800487e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004880:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004884:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004888:	226f      	movs	r2, #111	; 0x6f
 800488a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800488c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004890:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004894:	2207      	movs	r2, #7
 8004896:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004898:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800489c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048a0:	2229      	movs	r2, #41	; 0x29
 80048a2:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80048a4:	f107 020c 	add.w	r2, r7, #12
 80048a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ac:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80048b0:	2306      	movs	r3, #6
 80048b2:	f240 4196 	movw	r1, #1174	; 0x496
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	f004 f940 	bl	8008b3c <VL53L1_WriteMulti>
 80048bc:	4603      	mov	r3, r0
 80048be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80048c2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11a      	bne.n	8004900 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80048ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80048d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048de:	2207      	movs	r2, #7
 80048e0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80048e2:	f107 020c 	add.w	r2, r7, #12
 80048e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ea:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80048ee:	2302      	movs	r3, #2
 80048f0:	f240 4172 	movw	r1, #1138	; 0x472
 80048f4:	6800      	ldr	r0, [r0, #0]
 80048f6:	f004 f921 	bl	8008b3c <VL53L1_WriteMulti>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8004900:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004904:	2b00      	cmp	r3, #0
 8004906:	d11a      	bne.n	800493e <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8004908:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800490c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8004914:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004918:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800491c:	2207      	movs	r2, #7
 800491e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8004920:	f107 020c 	add.w	r2, r7, #12
 8004924:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004928:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800492c:	2302      	movs	r3, #2
 800492e:	f240 4174 	movw	r1, #1140	; 0x474
 8004932:	6800      	ldr	r0, [r0, #0]
 8004934:	f004 f902 	bl	8008b3c <VL53L1_WriteMulti>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800493e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10c      	bne.n	8004960 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8004946:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800494a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800494e:	2201      	movs	r2, #1
 8004950:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f004 f95d 	bl	8008c14 <VL53L1_WrByte>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8004960:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10b      	bne.n	8004980 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8004968:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800496c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004970:	2201      	movs	r2, #1
 8004972:	2185      	movs	r1, #133	; 0x85
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f004 f94d 	bl	8008c14 <VL53L1_WrByte>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004980:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004984:	4618      	mov	r0, r3
 8004986:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	2000000c 	.word	0x2000000c

08004994 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af04      	add	r7, sp, #16
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80049a8:	2162      	movs	r1, #98	; 0x62
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f002 f8fd 	bl	8006baa <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2201      	movs	r2, #1
 80049ba:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2200      	movs	r2, #0
 80049c0:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	2201      	movs	r2, #1
 80049c6:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2201      	movs	r2, #1
 80049cc:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049d4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049dc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80049e4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2264      	movs	r2, #100	; 0x64
 80049ea:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80049f2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f240 72db 	movw	r2, #2011	; 0x7db
 8004a02:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f002 f8b4 	bl	8006b74 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004a0c:	78fb      	ldrb	r3, [r7, #3]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <VL53L1_data_init+0x90>
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f857 	bl	8004ace <VL53L1_read_p2p_data>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fbe8 	bl	8006200 <VL53L1_init_refspadchar_config_struct>
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fc03 	bl	8006246 <VL53L1_init_ssc_config_struct>
 8004a40:	4603      	mov	r3, r0
 8004a42:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f001 fc17 	bl	8006286 <VL53L1_init_xtalk_config_struct>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a62:	4618      	mov	r0, r3
 8004a64:	f001 fc71 	bl	800634a <VL53L1_init_offset_cal_config_struct>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	33a4      	adds	r3, #164	; 0xa4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f001 fc90 	bl	8006396 <VL53L1_init_tuning_parm_storage_struct>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8004a7a:	2120      	movs	r1, #32
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 fcb9 	bl	80053f4 <VL53L1_set_vhv_loopbound>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8004a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d116      	bne.n	8004abc <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	7858      	ldrb	r0, [r3, #1]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	8b1c      	ldrh	r4, [r3, #24]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689d      	ldr	r5, [r3, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	6912      	ldr	r2, [r2, #16]
 8004aa2:	68b9      	ldr	r1, [r7, #8]
 8004aa4:	6949      	ldr	r1, [r1, #20]
 8004aa6:	9102      	str	r1, [sp, #8]
 8004aa8:	9201      	str	r2, [sp, #4]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	462b      	mov	r3, r5
 8004aae:	4622      	mov	r2, r4
 8004ab0:	4601      	mov	r1, r0
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fad4 	bl	8005060 <VL53L1_set_preset_mode>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f002 fde5 	bl	800768c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bdb0      	pop	{r4, r5, r7, pc}

08004ace <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d108      	bne.n	8004af8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004aec:	4619      	mov	r1, r3
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f002 ff63 	bl	80079ba <VL53L1_get_static_nvm_managed>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d107      	bne.n	8004b10 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	3342      	adds	r3, #66	; 0x42
 8004b04:	4619      	mov	r1, r3
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f003 f895 	bl	8007c36 <VL53L1_get_customer_nvm_managed>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f003 ff46 	bl	80089b2 <VL53L1_get_nvm_copy_data>
 8004b26:	4603      	mov	r3, r0
 8004b28:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8004b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d108      	bne.n	8004b44 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	33f0      	adds	r3, #240	; 0xf0
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f002 f993 	bl	8006e6a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8004b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004b52:	461a      	mov	r2, r3
 8004b54:	21de      	movs	r1, #222	; 0xde
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f004 f8ba 	bl	8008cd0 <VL53L1_RdWord>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b6a:	d204      	bcs.n	8004b76 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004b72:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8004b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	339e      	adds	r3, #158	; 0x9e
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f98d 	bl	8004ea4 <VL53L1_get_mode_mitigation_roi>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d114      	bne.n	8004bc2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8004bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004bea:	23f1      	movs	r3, #241	; 0xf1
 8004bec:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10c      	bne.n	8004c10 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004c02:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8004c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bc80      	pop	{r7}
 8004c1c:	4770      	bx	lr

08004c1e <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c3a:	23f1      	movs	r3, #241	; 0xf1
 8004c3c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8004c52:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bc80      	pop	{r7}
 8004c66:	4770      	bx	lr

08004c68 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b088      	sub	sp, #32
 8004c6c:	af02      	add	r7, sp, #8
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c88:	23f1      	movs	r3, #241	; 0xf1
 8004c8a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11b      	bne.n	8004ccc <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8004cb8:	9201      	str	r2, [sp, #4]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f002 fc17 	bl	80074f6 <VL53L1_calc_timeout_register_values>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004d00:	23f1      	movs	r3, #241	; 0xf1
 8004d02:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004d04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d14a      	bne.n	8004da2 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f002 fa93 	bl	8007246 <VL53L1_calc_macro_period_us>
 8004d20:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8004d28:	6979      	ldr	r1, [r7, #20]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f002 fb4a 	bl	80073c4 <VL53L1_calc_timeout_us>
 8004d30:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8004d3c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004d3e:	8a7b      	ldrh	r3, [r7, #18]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8004d4a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004d4c:	4413      	add	r3, r2
 8004d4e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d50:	8a7b      	ldrh	r3, [r7, #18]
 8004d52:	6979      	ldr	r1, [r7, #20]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f002 fb75 	bl	8007444 <VL53L1_calc_decoded_timeout_us>
 8004d5a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8004d66:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004d68:	8a7b      	ldrh	r3, [r7, #18]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8004d74:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004d76:	4413      	add	r3, r2
 8004d78:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d7a:	8a7b      	ldrh	r3, [r7, #18]
 8004d7c:	6979      	ldr	r1, [r7, #20]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f002 fb60 	bl	8007444 <VL53L1_calc_decoded_timeout_us>
 8004d84:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004da2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b087      	sub	sp, #28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	460b      	mov	r3, r1
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004dc8:	7afb      	ldrb	r3, [r7, #11]
 8004dca:	2b07      	cmp	r3, #7
 8004dcc:	d81c      	bhi.n	8004e08 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8004dd4:	7afb      	ldrb	r3, [r7, #11]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8004de4:	7dbb      	ldrb	r3, [r7, #22]
 8004de6:	4013      	ands	r3, r2
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8004dee:	7afb      	ldrb	r3, [r7, #11]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00b      	beq.n	8004e0c <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	7afb      	ldrb	r3, [r7, #11]
 8004dfc:	fa42 f303 	asr.w	r3, r2, r3
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e001      	b.n	8004e0c <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004e08:	23fc      	movs	r3, #252	; 0xfc
 8004e0a:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	7858      	ldrb	r0, [r3, #1]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	7819      	ldrb	r1, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f002 fbd4 	bl	80075e8 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	7898      	ldrb	r0, [r3, #2]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	78d9      	ldrb	r1, [r3, #3]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f002 fc07 	bl	8007662 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8004e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f002 fcb8 	bl	80077f4 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	1c99      	adds	r1, r3, #2
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	3303      	adds	r3, #3
 8004e92:	461a      	mov	r2, r3
 8004e94:	f002 fbce 	bl	8007634 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8004e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8004ec8:	f107 020e 	add.w	r2, r7, #14
 8004ecc:	f107 010d 	add.w	r1, r7, #13
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f002 fc8f 	bl	80077f4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004ed6:	7bba      	ldrb	r2, [r7, #14]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004edc:	7b7a      	ldrb	r2, [r7, #13]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8004ee8:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	091b      	lsrs	r3, r3, #4
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3718      	adds	r7, #24
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b087      	sub	sp, #28
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004f24:	7afb      	ldrb	r3, [r7, #11]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	2b25      	cmp	r3, #37	; 0x25
 8004f2a:	f200 808e 	bhi.w	800504a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004fcd 	.word	0x08004fcd
 8004f38:	08004fcd 	.word	0x08004fcd
 8004f3c:	08004fcd 	.word	0x08004fcd
 8004f40:	08004fcd 	.word	0x08004fcd
 8004f44:	08004fcd 	.word	0x08004fcd
 8004f48:	08004ff7 	.word	0x08004ff7
 8004f4c:	08004ff7 	.word	0x08004ff7
 8004f50:	08004ff7 	.word	0x08004ff7
 8004f54:	0800504b 	.word	0x0800504b
 8004f58:	0800504b 	.word	0x0800504b
 8004f5c:	0800504b 	.word	0x0800504b
 8004f60:	0800504b 	.word	0x0800504b
 8004f64:	0800504b 	.word	0x0800504b
 8004f68:	0800504b 	.word	0x0800504b
 8004f6c:	0800504b 	.word	0x0800504b
 8004f70:	0800504b 	.word	0x0800504b
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08004ff7 	.word	0x08004ff7
 8004f7c:	0800504b 	.word	0x0800504b
 8004f80:	0800504b 	.word	0x0800504b
 8004f84:	0800504b 	.word	0x0800504b
 8004f88:	0800504b 	.word	0x0800504b
 8004f8c:	0800504b 	.word	0x0800504b
 8004f90:	0800504b 	.word	0x0800504b
 8004f94:	0800504b 	.word	0x0800504b
 8004f98:	0800504b 	.word	0x0800504b
 8004f9c:	0800504b 	.word	0x0800504b
 8004fa0:	0800504b 	.word	0x0800504b
 8004fa4:	0800504b 	.word	0x0800504b
 8004fa8:	0800504b 	.word	0x0800504b
 8004fac:	0800504b 	.word	0x0800504b
 8004fb0:	0800504b 	.word	0x0800504b
 8004fb4:	0800504b 	.word	0x0800504b
 8004fb8:	0800504b 	.word	0x0800504b
 8004fbc:	0800504b 	.word	0x0800504b
 8004fc0:	08005021 	.word	0x08005021
 8004fc4:	08005021 	.word	0x08005021
 8004fc8:	08005021 	.word	0x08005021
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	601a      	str	r2, [r3, #0]
	break;
 8004ff4:	e02c      	b.n	8005050 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	601a      	str	r2, [r3, #0]
	break;
 800501e:	e017      	b.n	8005050 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	601a      	str	r2, [r3, #0]
	break;
 8005048:	e002      	b.n	8005050 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800504a:	23fc      	movs	r3, #252	; 0xfc
 800504c:	75fb      	strb	r3, [r7, #23]
		break;
 800504e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b092      	sub	sp, #72	; 0x48
 8005064:	af04      	add	r7, sp, #16
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607b      	str	r3, [r7, #4]
 800506a:	460b      	mov	r3, r1
 800506c:	72fb      	strb	r3, [r7, #11]
 800506e:	4613      	mov	r3, r2
 8005070:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005072:	2300      	movs	r3, #0
 8005074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005082:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800508a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800509a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80050a2:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	33a4      	adds	r3, #164	; 0xa4
 80050a8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80050aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ac:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 80050b0:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	7afa      	ldrb	r2, [r7, #11]
 80050b6:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80050b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050bc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050c2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80050c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c8:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 80050ca:	2103      	movs	r1, #3
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f001 fd6c 	bl	8006baa <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 80050d2:	7afb      	ldrb	r3, [r7, #11]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	2b25      	cmp	r3, #37	; 0x25
 80050d8:	f200 810c 	bhi.w	80052f4 <VL53L1_set_preset_mode+0x294>
 80050dc:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <VL53L1_set_preset_mode+0x84>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	0800517d 	.word	0x0800517d
 80050e8:	08005199 	.word	0x08005199
 80050ec:	080051b5 	.word	0x080051b5
 80050f0:	080051d1 	.word	0x080051d1
 80050f4:	080051ed 	.word	0x080051ed
 80050f8:	08005209 	.word	0x08005209
 80050fc:	08005225 	.word	0x08005225
 8005100:	08005241 	.word	0x08005241
 8005104:	080052f5 	.word	0x080052f5
 8005108:	080052f5 	.word	0x080052f5
 800510c:	080052f5 	.word	0x080052f5
 8005110:	080052f5 	.word	0x080052f5
 8005114:	080052f5 	.word	0x080052f5
 8005118:	080052f5 	.word	0x080052f5
 800511c:	080052f5 	.word	0x080052f5
 8005120:	080052f5 	.word	0x080052f5
 8005124:	0800525d 	.word	0x0800525d
 8005128:	08005279 	.word	0x08005279
 800512c:	080052f5 	.word	0x080052f5
 8005130:	080052f5 	.word	0x080052f5
 8005134:	080052f5 	.word	0x080052f5
 8005138:	080052f5 	.word	0x080052f5
 800513c:	080052f5 	.word	0x080052f5
 8005140:	080052f5 	.word	0x080052f5
 8005144:	080052f5 	.word	0x080052f5
 8005148:	080052f5 	.word	0x080052f5
 800514c:	080052f5 	.word	0x080052f5
 8005150:	080052f5 	.word	0x080052f5
 8005154:	080052f5 	.word	0x080052f5
 8005158:	080052f5 	.word	0x080052f5
 800515c:	080052f5 	.word	0x080052f5
 8005160:	080052f5 	.word	0x080052f5
 8005164:	080052f5 	.word	0x080052f5
 8005168:	080052f5 	.word	0x080052f5
 800516c:	080052f5 	.word	0x080052f5
 8005170:	08005295 	.word	0x08005295
 8005174:	080052b5 	.word	0x080052b5
 8005178:	080052d5 	.word	0x080052d5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800518a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800518c:	f001 f991 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8005190:	4603      	mov	r3, r0
 8005192:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005196:	e0b1      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051a8:	f001 faa0 	bl	80066ec <VL53L1_preset_mode_standard_ranging_short_range>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051b2:	e0a3      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	9301      	str	r3, [sp, #4]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c4:	f001 fad3 	bl	800676e <VL53L1_preset_mode_standard_ranging_long_range>
 80051c8:	4603      	mov	r3, r0
 80051ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ce:	e095      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	9301      	str	r3, [sp, #4]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	6a3b      	ldr	r3, [r7, #32]
 80051da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051e0:	f001 fb06 	bl	80067f0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ea:	e087      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	9300      	str	r3, [sp, #0]
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051fc:	f001 fb1d 	bl	800683a <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8005200:	4603      	mov	r3, r0
 8005202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005206:	e079      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	9301      	str	r3, [sp, #4]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	9300      	str	r3, [sp, #0]
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005216:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005218:	f001 fb34 	bl	8006884 <VL53L1_preset_mode_timed_ranging>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005222:	e06b      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005230:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005234:	f001 fb60 	bl	80068f8 <VL53L1_preset_mode_timed_ranging_short_range>
 8005238:	4603      	mov	r3, r0
 800523a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800523e:	e05d      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005250:	f001 fb8c 	bl	800696c <VL53L1_preset_mode_timed_ranging_long_range>
 8005254:	4603      	mov	r3, r0
 8005256:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800525a:	e04f      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800526a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800526c:	f001 fc60 	bl	8006b30 <VL53L1_preset_mode_olt>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005276:	e041      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005288:	f001 fc1c 	bl	8006ac4 <VL53L1_preset_mode_singleshot_ranging>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005292:	e033      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052a8:	f001 fbc0 	bl	8006a2c <VL53L1_preset_mode_low_power_auto_short_ranging>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80052b2:	e023      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052c8:	f001 fb8a 	bl	80069e0 <VL53L1_preset_mode_low_power_auto_ranging>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80052d2:	e013      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052e8:	f001 fbc6 	bl	8006a78 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80052f2:	e003      	b.n	80052fc <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80052f4:	23fc      	movs	r3, #252	; 0xfc
 80052f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80052fa:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80052fc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	893a      	ldrh	r2, [r7, #8]
 8005308:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800530a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8005310:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8005314:	2b00      	cmp	r3, #0
 8005316:	d108      	bne.n	800532a <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fca2 	bl	8004c68 <VL53L1_set_timeouts_us>
 8005324:	4603      	mov	r3, r0
 8005326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800532a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005332:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff fc4a 	bl	8004bce <VL53L1_set_inter_measurement_period_ms>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8005340:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005344:	4618      	mov	r0, r3
 8005346:	3738      	adds	r7, #56	; 0x38
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800534c:	b480      	push	{r7}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005368:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005382:	2300      	movs	r3, #0
 8005384:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	887a      	ldrh	r2, [r7, #2]
 800538e:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8005392:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005396:	4618      	mov	r0, r3
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80053bc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	460b      	mov	r3, r1
 80053d4:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053d6:	2300      	movs	r3, #0
 80053d8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	887a      	ldrh	r2, [r7, #2]
 80053e2:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80053e6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bc80      	pop	{r7}
 80053f2:	4770      	bx	lr

080053f4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005400:	2300      	movs	r3, #0
 8005402:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	b2da      	uxtb	r2, r3
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	b2db      	uxtb	r3, r3
 800541a:	4413      	add	r3, r2
 800541c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8005424:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr
	...

08005434 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b0d0      	sub	sp, #320	; 0x140
 8005438:	af00      	add	r7, sp, #0
 800543a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800543e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005442:	6018      	str	r0, [r3, #0]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800544c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8005450:	4602      	mov	r2, r0
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005458:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800545c:	460a      	mov	r2, r1
 800545e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005460:	2300      	movs	r3, #0
 8005462:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005466:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800546a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005478:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800547c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005484:	3342      	adds	r3, #66	; 0x42
 8005486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800548a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800548e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800549a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800549e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80054a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054a6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 80054aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80054ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054b2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80054b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80054ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80054c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80054c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054ca:	332c      	adds	r3, #44	; 0x2c
 80054cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80054d0:	f107 030c 	add.w	r3, r7, #12
 80054d4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 80054de:	2300      	movs	r3, #0
 80054e0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 80054f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054f4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80054f8:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 80054fc:	7812      	ldrb	r2, [r2, #0]
 80054fe:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	b25b      	sxtb	r3, r3
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800550e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005512:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8005516:	f993 3000 	ldrsb.w	r3, [r3]
 800551a:	4313      	orrs	r3, r2
 800551c:	b25b      	sxtb	r3, r3
 800551e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005524:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005526:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800552a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800552e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005532:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005536:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800553a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800553e:	2bff      	cmp	r3, #255	; 0xff
 8005540:	d104      	bne.n	800554c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005542:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005546:	2200      	movs	r2, #0
 8005548:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800554c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005550:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005554:	2b01      	cmp	r3, #1
 8005556:	d139      	bne.n	80055cc <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005558:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800555c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005560:	2b00      	cmp	r3, #0
 8005562:	d133      	bne.n	80055cc <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005564:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005568:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800556c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005570:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005574:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005578:	2220      	movs	r2, #32
 800557a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800557e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005582:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8005586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10c      	bne.n	80055a8 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800558e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005592:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005596:	b29b      	uxth	r3, r3
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	b29b      	uxth	r3, r3
 800559c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800559e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055a2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80055a6:	e004      	b.n	80055b2 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80055a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055ac:	2200      	movs	r2, #0
 80055ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 80055b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055b6:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d805      	bhi.n	80055cc <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80055c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055c4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055c8:	2205      	movs	r2, #5
 80055ca:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80055cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055d0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d113      	bne.n	8005600 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80055d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055dc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10d      	bne.n	8005600 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80055e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055e8:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 80055ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055f0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80055f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055f8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055fc:	2206      	movs	r2, #6
 80055fe:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8005600:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005604:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	3b01      	subs	r3, #1
 800560c:	2b05      	cmp	r3, #5
 800560e:	d827      	bhi.n	8005660 <VL53L1_init_and_start_range+0x22c>
 8005610:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <VL53L1_init_and_start_range+0x1e4>)
 8005612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005659 	.word	0x08005659
 800561c:	08005651 	.word	0x08005651
 8005620:	08005649 	.word	0x08005649
 8005624:	08005641 	.word	0x08005641
 8005628:	08005639 	.word	0x08005639
 800562c:	08005631 	.word	0x08005631
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005630:	2301      	movs	r3, #1
 8005632:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005636:	e017      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005638:	230d      	movs	r3, #13
 800563a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800563e:	e013      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005640:	2324      	movs	r3, #36	; 0x24
 8005642:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005646:	e00f      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005648:	2344      	movs	r3, #68	; 0x44
 800564a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800564e:	e00b      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005650:	235a      	movs	r3, #90	; 0x5a
 8005652:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005656:	e007      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005658:	2371      	movs	r3, #113	; 0x71
 800565a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800565e:	e003      	b.n	8005668 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005660:	2383      	movs	r3, #131	; 0x83
 8005662:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005666:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8005668:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800566c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005670:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8005674:	f107 030c 	add.w	r3, r7, #12
 8005678:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800567c:	2300      	movs	r3, #0
 800567e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8005682:	e00b      	b.n	800569c <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8005684:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8005692:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8005696:	3301      	adds	r3, #1
 8005698:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800569c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80056a0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d3ed      	bcc.n	8005684 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80056a8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056ac:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b05      	cmp	r3, #5
 80056b4:	d917      	bls.n	80056e6 <VL53L1_init_and_start_range+0x2b2>
 80056b6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d113      	bne.n	80056e6 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80056be:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056c2:	f1c3 0301 	rsb	r3, r3, #1
 80056c6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80056ca:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80056ce:	f107 020c 	add.w	r2, r7, #12
 80056d2:	4413      	add	r3, r2
 80056d4:	461a      	mov	r2, r3
 80056d6:	210b      	movs	r1, #11
 80056d8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80056dc:	f002 f8b8 	bl	8007850 <VL53L1_i2c_encode_static_nvm_managed>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80056e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056ea:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b04      	cmp	r3, #4
 80056f2:	d917      	bls.n	8005724 <VL53L1_init_and_start_range+0x2f0>
 80056f4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d113      	bne.n	8005724 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80056fc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005700:	f1c3 030d 	rsb	r3, r3, #13
 8005704:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005708:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800570c:	f107 020c 	add.w	r2, r7, #12
 8005710:	4413      	add	r3, r2
 8005712:	461a      	mov	r2, r3
 8005714:	2117      	movs	r1, #23
 8005716:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800571a:	f002 f975 	bl	8007a08 <VL53L1_i2c_encode_customer_nvm_managed>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005724:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005728:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d917      	bls.n	8005762 <VL53L1_init_and_start_range+0x32e>
 8005732:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005736:	2b00      	cmp	r3, #0
 8005738:	d113      	bne.n	8005762 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800573a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800573e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005742:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005746:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800574a:	f107 020c 	add.w	r2, r7, #12
 800574e:	4413      	add	r3, r2
 8005750:	461a      	mov	r2, r3
 8005752:	2120      	movs	r1, #32
 8005754:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005758:	f002 fa94 	bl	8007c84 <VL53L1_i2c_encode_static_config>
 800575c:	4603      	mov	r3, r0
 800575e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005762:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005766:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d917      	bls.n	80057a0 <VL53L1_init_and_start_range+0x36c>
 8005770:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005774:	2b00      	cmp	r3, #0
 8005776:	d113      	bne.n	80057a0 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005778:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800577c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005780:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005784:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005788:	f107 020c 	add.w	r2, r7, #12
 800578c:	4413      	add	r3, r2
 800578e:	461a      	mov	r2, r3
 8005790:	2116      	movs	r1, #22
 8005792:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005796:	f002 fb58 	bl	8007e4a <VL53L1_i2c_encode_general_config>
 800579a:	4603      	mov	r3, r0
 800579c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80057a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80057a4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d917      	bls.n	80057de <VL53L1_init_and_start_range+0x3aa>
 80057ae:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d113      	bne.n	80057de <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80057b6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80057ba:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80057be:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80057c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80057c6:	f107 020c 	add.w	r2, r7, #12
 80057ca:	4413      	add	r3, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	2117      	movs	r1, #23
 80057d0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80057d4:	f002 fbbd 	bl	8007f52 <VL53L1_i2c_encode_timing_config>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80057de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80057e2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d036      	beq.n	800585a <VL53L1_init_and_start_range+0x426>
 80057ec:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d132      	bne.n	800585a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80057f4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80057f8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80057fc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d017      	beq.n	800583e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800580e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005812:	789b      	ldrb	r3, [r3, #2]
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	b2da      	uxtb	r2, r3
 800581a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8005820:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005824:	789b      	ldrb	r3, [r3, #2]
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	b2da      	uxtb	r2, r3
 800582c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005830:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8005832:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005836:	789a      	ldrb	r2, [r3, #2]
 8005838:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800583c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800583e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005842:	f107 020c 	add.w	r2, r7, #12
 8005846:	4413      	add	r3, r2
 8005848:	461a      	mov	r2, r3
 800584a:	2112      	movs	r1, #18
 800584c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005850:	f002 fc01 	bl	8008056 <VL53L1_i2c_encode_dynamic_config>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800585a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800585e:	2b00      	cmp	r3, #0
 8005860:	d113      	bne.n	800588a <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8005862:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005866:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800586a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800586e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005872:	f107 020c 	add.w	r2, r7, #12
 8005876:	4413      	add	r3, r2
 8005878:	461a      	mov	r2, r3
 800587a:	2105      	movs	r1, #5
 800587c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005880:	f002 fc6e 	bl	8008160 <VL53L1_i2c_encode_system_control>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800588a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10f      	bne.n	80058b2 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8005892:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005896:	f107 020c 	add.w	r2, r7, #12
 800589a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800589e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80058a2:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 80058a6:	6800      	ldr	r0, [r0, #0]
 80058a8:	f003 f948 	bl	8008b3c <VL53L1_WriteMulti>
 80058ac:	4603      	mov	r3, r0
 80058ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80058b2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80058ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	f001 f99a 	bl	8006bfc <VL53L1_update_ll_driver_rd_state>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 80058ce:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80058d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058da:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	f001 fa5e 	bl	8006da0 <VL53L1_update_ll_driver_cfg_state>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80058ea:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b0c8      	sub	sp, #288	; 0x120
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005902:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005906:	6018      	str	r0, [r3, #0]
 8005908:	460a      	mov	r2, r1
 800590a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800590e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005912:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005914:	2300      	movs	r3, #0
 8005916:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800591a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800591e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005928:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800592c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8005930:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005934:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005938:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800593c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005940:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005944:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8005948:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800594c:	2388      	movs	r3, #136	; 0x88
 800594e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005952:	2300      	movs	r3, #0
 8005954:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800595e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005962:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d008      	beq.n	800597e <VL53L1_get_measurement_results+0x86>
 800596c:	2b02      	cmp	r3, #2
 800596e:	d10d      	bne.n	800598c <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005970:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005974:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005978:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800597c:	e00a      	b.n	8005994 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800597e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005982:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005986:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800598a:	e003      	b.n	8005994 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800598c:	232c      	movs	r3, #44	; 0x2c
 800598e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005992:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005994:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10f      	bne.n	80059bc <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800599c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 80059a0:	f107 0208 	add.w	r2, r7, #8
 80059a4:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 80059a8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80059ac:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 80059b0:	6800      	ldr	r0, [r0, #0]
 80059b2:	f003 f8f9 	bl	8008ba8 <VL53L1_ReadMulti>
 80059b6:	4603      	mov	r3, r0
 80059b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 80059bc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059c0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d917      	bls.n	80059fa <VL53L1_get_measurement_results+0x102>
 80059ca:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d113      	bne.n	80059fa <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80059d2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80059d6:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80059da:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80059de:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80059e2:	f107 0208 	add.w	r2, r7, #8
 80059e6:	4413      	add	r3, r2
 80059e8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80059ec:	4619      	mov	r1, r3
 80059ee:	2038      	movs	r0, #56	; 0x38
 80059f0:	f002 fd47 	bl	8008482 <VL53L1_i2c_decode_debug_results>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80059fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059fe:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d017      	beq.n	8005a38 <VL53L1_get_measurement_results+0x140>
 8005a08:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d113      	bne.n	8005a38 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005a10:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005a14:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8005a18:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005a1c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005a20:	f107 0208 	add.w	r2, r7, #8
 8005a24:	4413      	add	r3, r2
 8005a26:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	2021      	movs	r0, #33	; 0x21
 8005a2e:	f002 fcc7 	bl	80083c0 <VL53L1_i2c_decode_core_results>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005a38:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d110      	bne.n	8005a62 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005a46:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005a4a:	f107 0208 	add.w	r2, r7, #8
 8005a4e:	4413      	add	r3, r2
 8005a50:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005a54:	4619      	mov	r1, r3
 8005a56:	202c      	movs	r0, #44	; 0x2c
 8005a58:	f002 fbbc 	bl	80081d4 <VL53L1_i2c_decode_system_results>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005a62:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8005a8c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005a92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8005a9a:	7afb      	ldrb	r3, [r7, #11]
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff ff2a 	bl	80058f8 <VL53L1_get_measurement_results>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8005aa8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d10c      	bne.n	8005aca <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f000 f85d 	bl	8005b84 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d11f      	bne.n	8005b14 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8005ad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10e      	bne.n	8005afa <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d109      	bne.n	8005afa <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 fe1b 	bl	8007722 <VL53L1_low_power_auto_setup_manual_calibration>
 8005aec:	4603      	mov	r3, r0
 8005aee:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8005af8:	e00c      	b.n	8005b14 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005afa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d108      	bne.n	8005b14 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d103      	bne.n	8005b14 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8005b28:	2284      	movs	r2, #132	; 0x84
 8005b2a:	6939      	ldr	r1, [r7, #16]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f004 f810 	bl	8009b52 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8005b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f001 f8e6 	bl	8006d0c <VL53L1_check_ll_driver_rd_state>
 8005b40:	4603      	mov	r3, r0
 8005b42:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005b44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d107      	bne.n	8005b78 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fc60 	bl	8005434 <VL53L1_init_and_start_range>
 8005b74:	4603      	mov	r3, r0
 8005b76:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b089      	sub	sp, #36	; 0x24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	78da      	ldrb	r2, [r3, #3]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8005bac:	2300      	movs	r3, #0
 8005bae:	77fb      	strb	r3, [r7, #31]
 8005bb0:	e0d0      	b.n	8005d54 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	7ffa      	ldrb	r2, [r7, #31]
 8005bb6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	78db      	ldrb	r3, [r3, #3]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10a      	bne.n	8005bdc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d104      	bne.n	8005bdc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	2213      	movs	r2, #19
 8005bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bda:	e007      	b.n	8005bec <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8005bec:	7ffb      	ldrb	r3, [r7, #31]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d05d      	beq.n	8005cb2 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8005bf6:	e0a7      	b.n	8005d48 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	789b      	ldrb	r3, [r3, #2]
 8005bfc:	2b07      	cmp	r3, #7
 8005bfe:	d104      	bne.n	8005c0a <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	821a      	strh	r2, [r3, #16]
 8005c08:	e00c      	b.n	8005c24 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d104      	bne.n	8005c1c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	821a      	strh	r2, [r3, #16]
 8005c1a:	e003      	b.n	8005c24 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	895b      	ldrh	r3, [r3, #10]
 8005c40:	015b      	lsls	r3, r3, #5
 8005c42:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4a:	d302      	bcc.n	8005c52 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8005c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c50:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8005c66:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c78:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	da01      	bge.n	8005c84 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8005c80:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005c84:	12db      	asrs	r3, r3, #11
 8005c86:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	b21a      	sxth	r2, r3
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	621a      	str	r2, [r3, #32]

			break;
 8005cb0:	e04a      	b.n	8005d48 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cc8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	8bdb      	ldrh	r3, [r3, #30]
 8005cd6:	015b      	lsls	r3, r3, #5
 8005cd8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce0:	d302      	bcc.n	8005ce8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8005ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ce6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8005cfc:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d0e:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	da01      	bge.n	8005d1a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8005d16:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005d1a:	12db      	asrs	r3, r3, #11
 8005d1c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	b21a      	sxth	r2, r3
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	621a      	str	r2, [r3, #32]

			break;
 8005d46:	bf00      	nop
		}

		pdata++;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	3340      	adds	r3, #64	; 0x40
 8005d4c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	3301      	adds	r3, #1
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	7ffb      	ldrb	r3, [r7, #31]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	f67f af2b 	bls.w	8005bb2 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2b11      	cmp	r3, #17
 8005d6c:	bf8c      	ite	hi
 8005d6e:	2201      	movhi	r2, #1
 8005d70:	2200      	movls	r2, #0
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	2a00      	cmp	r2, #0
 8005d76:	d117      	bne.n	8005da8 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8005d78:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8005d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	bf14      	ite	ne
 8005d86:	2301      	movne	r3, #1
 8005d88:	2300      	moveq	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	b2da      	uxtb	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8005da6:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005da8:	bf00      	nop
 8005daa:	3724      	adds	r7, #36	; 0x24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	0002200e 	.word	0x0002200e

08005db8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005dce:	897b      	ldrh	r3, [r7, #10]
 8005dd0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005dd4:	2b38      	cmp	r3, #56	; 0x38
 8005dd6:	f200 8204 	bhi.w	80061e2 <VL53L1_get_tuning_parm+0x42a>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <VL53L1_get_tuning_parm+0x28>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005ec5 	.word	0x08005ec5
 8005de4:	08005ed3 	.word	0x08005ed3
 8005de8:	08005ee1 	.word	0x08005ee1
 8005dec:	08005eef 	.word	0x08005eef
 8005df0:	08005efd 	.word	0x08005efd
 8005df4:	08005f0b 	.word	0x08005f0b
 8005df8:	08005f19 	.word	0x08005f19
 8005dfc:	08005f27 	.word	0x08005f27
 8005e00:	08005f35 	.word	0x08005f35
 8005e04:	08005f43 	.word	0x08005f43
 8005e08:	08005f51 	.word	0x08005f51
 8005e0c:	08005f5f 	.word	0x08005f5f
 8005e10:	08005f6d 	.word	0x08005f6d
 8005e14:	08005f7b 	.word	0x08005f7b
 8005e18:	08005f89 	.word	0x08005f89
 8005e1c:	08005f97 	.word	0x08005f97
 8005e20:	08005fa5 	.word	0x08005fa5
 8005e24:	08005fb3 	.word	0x08005fb3
 8005e28:	08005fc1 	.word	0x08005fc1
 8005e2c:	08005fcf 	.word	0x08005fcf
 8005e30:	08005fdd 	.word	0x08005fdd
 8005e34:	08005feb 	.word	0x08005feb
 8005e38:	08005ff9 	.word	0x08005ff9
 8005e3c:	08006007 	.word	0x08006007
 8005e40:	08006015 	.word	0x08006015
 8005e44:	08006023 	.word	0x08006023
 8005e48:	08006031 	.word	0x08006031
 8005e4c:	0800603f 	.word	0x0800603f
 8005e50:	0800604d 	.word	0x0800604d
 8005e54:	0800605b 	.word	0x0800605b
 8005e58:	08006069 	.word	0x08006069
 8005e5c:	08006077 	.word	0x08006077
 8005e60:	08006085 	.word	0x08006085
 8005e64:	08006093 	.word	0x08006093
 8005e68:	080060a1 	.word	0x080060a1
 8005e6c:	080060af 	.word	0x080060af
 8005e70:	080060bd 	.word	0x080060bd
 8005e74:	080060cb 	.word	0x080060cb
 8005e78:	080060d9 	.word	0x080060d9
 8005e7c:	080060e7 	.word	0x080060e7
 8005e80:	080060f5 	.word	0x080060f5
 8005e84:	08006103 	.word	0x08006103
 8005e88:	08006111 	.word	0x08006111
 8005e8c:	0800611f 	.word	0x0800611f
 8005e90:	0800612d 	.word	0x0800612d
 8005e94:	0800613b 	.word	0x0800613b
 8005e98:	08006149 	.word	0x08006149
 8005e9c:	08006157 	.word	0x08006157
 8005ea0:	08006165 	.word	0x08006165
 8005ea4:	08006173 	.word	0x08006173
 8005ea8:	08006181 	.word	0x08006181
 8005eac:	0800618f 	.word	0x0800618f
 8005eb0:	0800619d 	.word	0x0800619d
 8005eb4:	080061ab 	.word	0x080061ab
 8005eb8:	080061b9 	.word	0x080061b9
 8005ebc:	080061c7 	.word	0x080061c7
 8005ec0:	080061d5 	.word	0x080061d5

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005eca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
	break;
 8005ed0:	e18e      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005ed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	601a      	str	r2, [r3, #0]
	break;
 8005ede:	e187      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8005ee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	601a      	str	r2, [r3, #0]
	break;
 8005eec:	e180      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005ef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	601a      	str	r2, [r3, #0]
	break;
 8005efa:	e179      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005f02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	601a      	str	r2, [r3, #0]
	break;
 8005f08:	e172      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005f10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
	break;
 8005f16:	e16b      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005f1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	break;
 8005f24:	e164      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8005f2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	601a      	str	r2, [r3, #0]
	break;
 8005f32:	e15d      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005f3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	601a      	str	r2, [r3, #0]
	break;
 8005f40:	e156      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005f48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	601a      	str	r2, [r3, #0]
	break;
 8005f4e:	e14f      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005f56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
	break;
 8005f5c:	e148      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8005f64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
	break;
 8005f6a:	e141      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005f72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	601a      	str	r2, [r3, #0]
	break;
 8005f78:	e13a      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8005f80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	601a      	str	r2, [r3, #0]
	break;
 8005f86:	e133      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005f8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
	break;
 8005f94:	e12c      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005f9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
	break;
 8005fa2:	e125      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8005faa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
	break;
 8005fb0:	e11e      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005fb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	601a      	str	r2, [r3, #0]
	break;
 8005fbe:	e117      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8005fc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	601a      	str	r2, [r3, #0]
	break;
 8005fcc:	e110      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8005fd4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
	break;
 8005fda:	e109      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8005fe2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	601a      	str	r2, [r3, #0]
	break;
 8005fe8:	e102      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 8005ff0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	601a      	str	r2, [r3, #0]
	break;
 8005ff6:	e0fb      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005ffe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
	break;
 8006004:	e0f4      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800600c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
	break;
 8006012:	e0ed      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800601a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	601a      	str	r2, [r3, #0]
	break;
 8006020:	e0e6      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006028:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
	break;
 800602e:	e0df      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8006036:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
	break;
 800603c:	e0d8      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006044:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
	break;
 800604a:	e0d1      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006052:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]
	break;
 8006058:	e0ca      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006060:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
	break;
 8006066:	e0c3      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800606e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
	break;
 8006074:	e0bc      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800607c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	601a      	str	r2, [r3, #0]
	break;
 8006082:	e0b5      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800608a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	601a      	str	r2, [r3, #0]
	break;
 8006090:	e0ae      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006098:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	601a      	str	r2, [r3, #0]
	break;
 800609e:	e0a7      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 80060a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	601a      	str	r2, [r3, #0]
	break;
 80060ac:	e0a0      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 80060b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
	break;
 80060ba:	e099      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80060c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	601a      	str	r2, [r3, #0]
	break;
 80060c8:	e092      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80060d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
	break;
 80060d6:	e08b      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80060de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]
	break;
 80060e4:	e084      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80060ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
	break;
 80060f2:	e07d      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80060fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	601a      	str	r2, [r3, #0]
	break;
 8006100:	e076      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 8006108:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	601a      	str	r2, [r3, #0]
	break;
 800610e:	e06f      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 8006116:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	601a      	str	r2, [r3, #0]
	break;
 800611c:	e068      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8006124:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	601a      	str	r2, [r3, #0]
	break;
 800612a:	e061      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8006132:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	601a      	str	r2, [r3, #0]
	break;
 8006138:	e05a      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8006140:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	601a      	str	r2, [r3, #0]
	break;
 8006146:	e053      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800614e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]
	break;
 8006154:	e04c      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800615c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
	break;
 8006162:	e045      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800616a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
	break;
 8006170:	e03e      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006178:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	601a      	str	r2, [r3, #0]
	break;
 800617e:	e037      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006186:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	601a      	str	r2, [r3, #0]
	break;
 800618c:	e030      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006194:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	601a      	str	r2, [r3, #0]
	break;
 800619a:	e029      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]
	break;
 80061a8:	e022      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	601a      	str	r2, [r3, #0]
	break;
 80061b6:	e01b      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 80061be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
	break;
 80061c4:	e014      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
	break;
 80061d2:	e00d      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80061da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	601a      	str	r2, [r3, #0]
	break;
 80061e0:	e006      	b.n	80061f0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80061e8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80061ea:	23fc      	movs	r3, #252	; 0xfc
 80061ec:	75fb      	strb	r3, [r7, #23]
	break;
 80061ee:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80061f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop

08006200 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006208:	2300      	movs	r3, #0
 800620a:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2208      	movs	r2, #8
 8006210:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	220b      	movs	r2, #11
 8006216:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800621e:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006226:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800622e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006236:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006238:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800624e:	2300      	movs	r3, #0
 8006250:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2212      	movs	r2, #18
 800625c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	220f      	movs	r2, #15
 8006262:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8006270:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	220c      	movs	r2, #12
 8006276:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	895b      	ldrh	r3, [r3, #10]
 8006298:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	895b      	ldrh	r3, [r3, #10]
 80062b6:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2200      	movs	r2, #0
 80062d4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10d      	bne.n	8006300 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d108      	bne.n	8006300 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d103      	bne.n	8006300 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2200      	movs	r2, #0
 80062fc:	741a      	strb	r2, [r3, #16]
 80062fe:	e002      	b.n	8006306 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2201      	movs	r2, #1
 8006304:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8006306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d114      	bne.n	8006338 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8006312:	2b01      	cmp	r3, #1
 8006314:	d110      	bne.n	8006338 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	7d1b      	ldrb	r3, [r3, #20]
 800632a:	f000 ffbb 	bl	80072a4 <VL53L1_calc_range_ignore_threshold>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	82da      	strh	r2, [r3, #22]
 8006336:	e002      	b.n	800633e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	2200      	movs	r2, #0
 800633c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800633e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800635c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006364:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800636c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006374:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2208      	movs	r2, #8
 800637a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2228      	movs	r2, #40	; 0x28
 8006380:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2209      	movs	r2, #9
 8006386:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006388:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006396:	b480      	push	{r7}
 8006398:	b085      	sub	sp, #20
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f248 0203 	movw	r2, #32771	; 0x8003
 80063a8:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f248 0201 	movw	r2, #32769	; 0x8001
 80063b0:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f248 0241 	movw	r2, #32833	; 0x8041
 80063b8:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	220e      	movs	r2, #14
 80063be:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	220a      	movs	r2, #10
 80063c4:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2206      	movs	r2, #6
 80063ca:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	220e      	movs	r2, #14
 80063d0:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	220a      	movs	r2, #10
 80063d6:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2206      	movs	r2, #6
 80063dc:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2221      	movs	r2, #33	; 0x21
 80063e8:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80063fc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006404:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800640c:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	22c0      	movs	r2, #192	; 0xc0
 8006412:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	22c0      	movs	r2, #192	; 0xc0
 8006418:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	22c0      	movs	r2, #192	; 0xc0
 800641e:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2208      	movs	r2, #8
 8006424:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2210      	movs	r2, #16
 800642a:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800645a:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006462:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f248 0230 	movw	r2, #32816	; 0x8030
 800646a:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800647a:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f24f 6218 	movw	r2, #63000	; 0xf618
 800648a:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006492:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800649a:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80064a2:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80064a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr

080064b2 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b087      	sub	sp, #28
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	60f8      	str	r0, [r7, #12]
 80064ba:	60b9      	str	r1, [r7, #8]
 80064bc:	607a      	str	r2, [r7, #4]
 80064be:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80064c0:	2300      	movs	r3, #0
 80064c2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80064ca:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2211      	movs	r2, #17
 800650c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2202      	movs	r2, #2
 8006512:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2202      	movs	r2, #2
 800651e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2208      	movs	r2, #8
 8006524:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2201      	movs	r2, #1
 800654a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	; 0xff
 8006562:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2200      	movs	r2, #0
 800658a:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2200      	movs	r2, #0
 8006590:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	2220      	movs	r2, #32
 8006596:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	220b      	movs	r2, #11
 800659c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2202      	movs	r2, #2
 80065aa:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	220d      	movs	r2, #13
 80065b0:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2201      	movs	r2, #1
 80065c4:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2200      	movs	r2, #0
 80065ca:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 80065d8:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	2200      	movs	r2, #0
 80065de:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2238      	movs	r2, #56	; 0x38
 80065e4:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2201      	movs	r2, #1
 80065f0:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2200      	movs	r2, #0
 80065f6:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	221a      	movs	r2, #26
 80065fc:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	22cc      	movs	r2, #204	; 0xcc
 8006614:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	220b      	movs	r2, #11
 800661a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	22f5      	movs	r2, #245	; 0xf5
 8006626:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2209      	movs	r2, #9
 800662c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2208      	movs	r2, #8
 8006642:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2278      	movs	r2, #120	; 0x78
 8006648:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	2201      	movs	r2, #1
 800665a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	2200      	movs	r2, #0
 8006660:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	220b      	movs	r2, #11
 800667c:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	2209      	movs	r2, #9
 8006682:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2201      	movs	r2, #1
 8006698:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80066a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	22c7      	movs	r2, #199	; 0xc7
 80066b2:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	22ff      	movs	r2, #255	; 0xff
 80066b8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	22db      	movs	r2, #219	; 0xdb
 80066be:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2202      	movs	r2, #2
 80066c4:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	2200      	movs	r2, #0
 80066ca:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2201      	movs	r2, #1
 80066d0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	2201      	movs	r2, #1
 80066d6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	2221      	movs	r2, #33	; 0x21
 80066dc:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80066de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	371c      	adds	r7, #28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	9301      	str	r3, [sp, #4]
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fed0 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006712:	4603      	mov	r3, r0
 8006714:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006716:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d121      	bne.n	8006762 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2207      	movs	r2, #7
 8006722:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2205      	movs	r2, #5
 8006728:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800672a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672c:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2208      	movs	r2, #8
 800673e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2238      	movs	r2, #56	; 0x38
 8006744:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2207      	movs	r2, #7
 800674a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2205      	movs	r2, #5
 8006750:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}

0800676e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800676e:	b580      	push	{r7, lr}
 8006770:	b088      	sub	sp, #32
 8006772:	af02      	add	r7, sp, #8
 8006774:	60f8      	str	r0, [r7, #12]
 8006776:	60b9      	str	r1, [r7, #8]
 8006778:	607a      	str	r2, [r7, #4]
 800677a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800677c:	2300      	movs	r3, #0
 800677e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	68b9      	ldr	r1, [r7, #8]
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fe8f 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006798:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d121      	bne.n	80067e4 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	220f      	movs	r2, #15
 80067a4:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	220d      	movs	r2, #13
 80067aa:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2208      	movs	r2, #8
 80067c0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	22b8      	movs	r2, #184	; 0xb8
 80067c6:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	220f      	movs	r2, #15
 80067cc:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	220d      	movs	r2, #13
 80067d2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80067e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b088      	sub	sp, #32
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067fe:	2300      	movs	r3, #0
 8006800:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f7ff fe4e 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006816:	4603      	mov	r3, r0
 8006818:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800681a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	2202      	movs	r2, #2
 8006826:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	223b      	movs	r2, #59	; 0x3b
 800682c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800682e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3718      	adds	r7, #24
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b088      	sub	sp, #32
 800683e:	af02      	add	r7, sp, #8
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
 8006846:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006848:	2300      	movs	r3, #0
 800684a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fe29 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006860:	4603      	mov	r3, r0
 8006862:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d105      	bne.n	8006878 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2202      	movs	r2, #2
 8006870:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	225b      	movs	r2, #91	; 0x5b
 8006876:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af02      	add	r7, sp, #8
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006892:	2300      	movs	r3, #0
 8006894:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7ff fe04 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80068ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d11a      	bne.n	80068ec <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2200      	movs	r2, #0
 80068ba:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	22b1      	movs	r2, #177	; 0xb1
 80068c6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	22d4      	movs	r2, #212	; 0xd4
 80068d2:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80068da:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	2240      	movs	r2, #64	; 0x40
 80068ea:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80068ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3718      	adds	r7, #24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006906:	2300      	movs	r3, #0
 8006908:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	68b9      	ldr	r1, [r7, #8]
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fee7 	bl	80066ec <VL53L1_preset_mode_standard_ranging_short_range>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11a      	bne.n	8006960 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2200      	movs	r2, #0
 800692e:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2201      	movs	r2, #1
 8006934:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2284      	movs	r2, #132	; 0x84
 800693a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	22b1      	movs	r2, #177	; 0xb1
 8006946:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800694e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006952:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	2240      	movs	r2, #64	; 0x40
 800695e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006960:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3718      	adds	r7, #24
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af02      	add	r7, sp, #8
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
 8006978:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800697a:	2300      	movs	r3, #0
 800697c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800697e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006980:	9301      	str	r3, [sp, #4]
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f7ff feee 	bl	800676e <VL53L1_preset_mode_standard_ranging_long_range>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d11a      	bne.n	80069d4 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2200      	movs	r2, #0
 80069a2:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2297      	movs	r2, #151	; 0x97
 80069ae:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	22b1      	movs	r2, #177	; 0xb1
 80069ba:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80069c2:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	2240      	movs	r2, #64	; 0x40
 80069d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80069d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b088      	sub	sp, #32
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	68b9      	ldr	r1, [r7, #8]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f7ff ff3f 	bl	8006884 <VL53L1_preset_mode_timed_ranging>
 8006a06:	4603      	mov	r3, r0
 8006a08:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	68b8      	ldr	r0, [r7, #8]
 8006a18:	f000 fe6b 	bl	80076f2 <VL53L1_config_low_power_auto_mode>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af02      	add	r7, sp, #8
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7ff ff53 	bl	80068f8 <VL53L1_preset_mode_timed_ranging_short_range>
 8006a52:	4603      	mov	r3, r0
 8006a54:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a60:	6839      	ldr	r1, [r7, #0]
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f000 fe45 	bl	80076f2 <VL53L1_config_low_power_auto_mode>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	9301      	str	r3, [sp, #4]
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff ff67 	bl	800696c <VL53L1_preset_mode_timed_ranging_long_range>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	68b8      	ldr	r0, [r7, #8]
 8006ab0:	f000 fe1f 	bl	80076f2 <VL53L1_config_low_power_auto_mode>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b088      	sub	sp, #32
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	68b9      	ldr	r1, [r7, #8]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fce4 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006aea:	4603      	mov	r3, r0
 8006aec:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006aee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d116      	bne.n	8006b24 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	2200      	movs	r2, #0
 8006afa:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	22b1      	movs	r2, #177	; 0xb1
 8006b06:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	22d4      	movs	r2, #212	; 0xd4
 8006b12:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
 8006b20:	2210      	movs	r2, #16
 8006b22:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3718      	adds	r7, #24
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68b9      	ldr	r1, [r7, #8]
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fcae 	bl	80064b2 <VL53L1_preset_mode_standard_ranging>
 8006b56:	4603      	mov	r3, r0
 8006b58:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d102      	bne.n	8006b68 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	2201      	movs	r2, #1
 8006b66:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	220d      	movs	r2, #13
 8006b94:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f640 028e 	movw	r2, #2190	; 0x88e
 8006b9e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006ba0:	bf00      	nop
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b085      	sub	sp, #20
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	332c      	adds	r3, #44	; 0x2c
 8006bbe:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2200      	movs	r2, #0
 8006be2:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2202      	movs	r2, #2
 8006be8:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2200      	movs	r2, #0
 8006bee:	71da      	strb	r2, [r3, #7]

}
 8006bf0:	bf00      	nop
 8006bf2:	3714      	adds	r7, #20
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bc80      	pop	{r7}
 8006bf8:	4770      	bx	lr
	...

08006bfc <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	332c      	adds	r3, #44	; 0x2c
 8006c10:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10c      	bne.n	8006c3a <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2203      	movs	r2, #3
 8006c24:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	71da      	strb	r2, [r3, #7]
 8006c38:	e060      	b.n	8006cfc <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	795b      	ldrb	r3, [r3, #5]
 8006c3e:	2bff      	cmp	r3, #255	; 0xff
 8006c40:	d103      	bne.n	8006c4a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2280      	movs	r2, #128	; 0x80
 8006c46:	715a      	strb	r2, [r3, #5]
 8006c48:	e005      	b.n	8006c56 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	795b      	ldrb	r3, [r3, #5]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	799b      	ldrb	r3, [r3, #6]
 8006c5a:	f083 0302 	eor.w	r3, r3, #2
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	791b      	ldrb	r3, [r3, #4]
 8006c68:	3b03      	subs	r3, #3
 8006c6a:	2b05      	cmp	r3, #5
 8006c6c:	d839      	bhi.n	8006ce2 <VL53L1_update_ll_driver_rd_state+0xe6>
 8006c6e:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <VL53L1_update_ll_driver_rd_state+0x78>)
 8006c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c74:	08006c8d 	.word	0x08006c8d
 8006c78:	08006ce3 	.word	0x08006ce3
 8006c7c:	08006ce3 	.word	0x08006ce3
 8006c80:	08006cb7 	.word	0x08006cb7
 8006c84:	08006cc5 	.word	0x08006cc5
 8006c88:	08006ccd 	.word	0x08006ccd

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd03      	ble.n	8006ca2 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2206      	movs	r2, #6
 8006c9e:	711a      	strb	r2, [r3, #4]
 8006ca0:	e002      	b.n	8006ca8 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2208      	movs	r2, #8
 8006ca6:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	71da      	strb	r2, [r3, #7]

		break;
 8006cb4:	e022      	b.n	8006cfc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2208      	movs	r2, #8
 8006cc0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006cc2:	e01b      	b.n	8006cfc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2208      	movs	r2, #8
 8006cc8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006cca:	e017      	b.n	8006cfc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	79db      	ldrb	r3, [r3, #7]
 8006cd0:	f083 0301 	eor.w	r3, r3, #1
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2208      	movs	r2, #8
 8006cde:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006ce0:	e00c      	b.n	8006cfc <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	71da      	strb	r2, [r3, #7]

		break;
 8006cfa:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006cfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop

08006d0c <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b089      	sub	sp, #36	; 0x24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	332c      	adds	r3, #44	; 0x2c
 8006d20:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8006d28:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	78db      	ldrb	r3, [r3, #3]
 8006d44:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006d4a:	111b      	asrs	r3, r3, #4
 8006d4c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d017      	beq.n	8006d92 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	791b      	ldrb	r3, [r3, #4]
 8006d66:	2b06      	cmp	r3, #6
 8006d68:	d105      	bne.n	8006d76 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b12      	cmp	r3, #18
 8006d6e:	d010      	beq.n	8006d92 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8006d70:	23ef      	movs	r3, #239	; 0xef
 8006d72:	77fb      	strb	r3, [r7, #31]
 8006d74:	e00d      	b.n	8006d92 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	795b      	ldrb	r3, [r3, #5]
 8006d7a:	7bba      	ldrb	r2, [r7, #14]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d001      	beq.n	8006d84 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006d80:	23ee      	movs	r3, #238	; 0xee
 8006d82:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	799b      	ldrb	r3, [r3, #6]
 8006d88:	7b7a      	ldrb	r2, [r7, #13]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d001      	beq.n	8006d92 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8006d8e:	23ed      	movs	r3, #237	; 0xed
 8006d90:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8006d92:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3724      	adds	r7, #36	; 0x24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bc80      	pop	{r7}
 8006d9e:	4770      	bx	lr

08006da0 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006da8:	2300      	movs	r3, #0
 8006daa:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	332c      	adds	r3, #44	; 0x2c
 8006db4:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2203      	movs	r2, #3
 8006dc8:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	70da      	strb	r2, [r3, #3]
 8006ddc:	e03e      	b.n	8006e5c <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	785b      	ldrb	r3, [r3, #1]
 8006de2:	2bff      	cmp	r3, #255	; 0xff
 8006de4:	d103      	bne.n	8006dee <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2280      	movs	r2, #128	; 0x80
 8006dea:	705a      	strb	r2, [r3, #1]
 8006dec:	e005      	b.n	8006dfa <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	3301      	adds	r3, #1
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	789b      	ldrb	r3, [r3, #2]
 8006dfe:	f083 0302 	eor.w	r3, r3, #2
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b03      	cmp	r3, #3
 8006e0e:	d002      	beq.n	8006e16 <VL53L1_update_ll_driver_cfg_state+0x76>
 8006e10:	2b04      	cmp	r3, #4
 8006e12:	d00e      	beq.n	8006e32 <VL53L1_update_ll_driver_cfg_state+0x92>
 8006e14:	e015      	b.n	8006e42 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	78db      	ldrb	r3, [r3, #3]
 8006e1a:	f083 0301 	eor.w	r3, r3, #1
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2204      	movs	r2, #4
 8006e2e:	701a      	strb	r2, [r3, #0]
		break;
 8006e30:	e014      	b.n	8006e5c <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	f083 0301 	eor.w	r3, r3, #1
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	70da      	strb	r2, [r3, #3]

		break;
 8006e40:	e00c      	b.n	8006e5c <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2203      	movs	r2, #3
 8006e46:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2202      	movs	r2, #2
 8006e52:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	70da      	strb	r2, [r3, #3]

		break;
 8006e5a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bc80      	pop	{r7}
 8006e68:	4770      	bx	lr

08006e6a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	7c1a      	ldrb	r2, [r3, #16]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	7c52      	ldrb	r2, [r2, #17]
 8006e84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	3302      	adds	r3, #2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	7c92      	ldrb	r2, [r2, #18]
 8006e8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	3303      	adds	r3, #3
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7cd2      	ldrb	r2, [r2, #19]
 8006e98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	7d12      	ldrb	r2, [r2, #20]
 8006ea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	3305      	adds	r3, #5
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7d52      	ldrb	r2, [r2, #21]
 8006eac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	3306      	adds	r3, #6
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	7d92      	ldrb	r2, [r2, #22]
 8006eb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	3307      	adds	r3, #7
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7dd2      	ldrb	r2, [r2, #23]
 8006ec0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	7e12      	ldrb	r2, [r2, #24]
 8006eca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	3309      	adds	r3, #9
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7e52      	ldrb	r2, [r2, #25]
 8006ed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	330a      	adds	r3, #10
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	7e92      	ldrb	r2, [r2, #26]
 8006ede:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	330b      	adds	r3, #11
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	7ed2      	ldrb	r2, [r2, #27]
 8006ee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7f12      	ldrb	r2, [r2, #28]
 8006ef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	330d      	adds	r3, #13
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7f52      	ldrb	r2, [r2, #29]
 8006efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	330e      	adds	r3, #14
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	7f92      	ldrb	r2, [r2, #30]
 8006f06:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	330f      	adds	r3, #15
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	7fd2      	ldrb	r2, [r2, #31]
 8006f10:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	3310      	adds	r3, #16
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	3311      	adds	r3, #17
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006f28:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	3312      	adds	r3, #18
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8006f34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	3313      	adds	r3, #19
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8006f40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	3314      	adds	r3, #20
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006f4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	3315      	adds	r3, #21
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006f58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	3316      	adds	r3, #22
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006f64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	3317      	adds	r3, #23
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006f70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	3318      	adds	r3, #24
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8006f7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	3319      	adds	r3, #25
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8006f88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	331a      	adds	r3, #26
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8006f94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	331b      	adds	r3, #27
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8006fa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	331c      	adds	r3, #28
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006fac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	331d      	adds	r3, #29
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006fb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	331e      	adds	r3, #30
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006fc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	331f      	adds	r3, #31
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8006fd0:	701a      	strb	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr

08006fdc <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	603a      	str	r2, [r7, #0]
 8006fe6:	80fb      	strh	r3, [r7, #6]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006fec:	2300      	movs	r3, #0
 8006fee:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	81fb      	strh	r3, [r7, #14]
 8006ffc:	e00e      	b.n	800701c <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006ffe:	88ba      	ldrh	r2, [r7, #4]
 8007000:	89fb      	ldrh	r3, [r7, #14]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	4413      	add	r3, r2
 800700a:	89ba      	ldrh	r2, [r7, #12]
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007010:	89bb      	ldrh	r3, [r7, #12]
 8007012:	0a1b      	lsrs	r3, r3, #8
 8007014:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8007016:	89fb      	ldrh	r3, [r7, #14]
 8007018:	3301      	adds	r3, #1
 800701a:	81fb      	strh	r3, [r7, #14]
 800701c:	89fa      	ldrh	r2, [r7, #14]
 800701e:	88bb      	ldrh	r3, [r7, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d3ec      	bcc.n	8006ffe <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800703c:	2300      	movs	r3, #0
 800703e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007040:	e00a      	b.n	8007058 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007042:	89fb      	ldrh	r3, [r7, #14]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	b21a      	sxth	r2, r3
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	1c59      	adds	r1, r3, #1
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	b21b      	sxth	r3, r3
 8007052:	4313      	orrs	r3, r2
 8007054:	b21b      	sxth	r3, r3
 8007056:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007058:	88fb      	ldrh	r3, [r7, #6]
 800705a:	1e5a      	subs	r2, r3, #1
 800705c:	80fa      	strh	r2, [r7, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ef      	bne.n	8007042 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007062:	89fb      	ldrh	r3, [r7, #14]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	4603      	mov	r3, r0
 8007076:	603a      	str	r2, [r7, #0]
 8007078:	80fb      	strh	r3, [r7, #6]
 800707a:	460b      	mov	r3, r1
 800707c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800707e:	2300      	movs	r3, #0
 8007080:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007086:	88fb      	ldrh	r3, [r7, #6]
 8007088:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800708a:	2300      	movs	r3, #0
 800708c:	81fb      	strh	r3, [r7, #14]
 800708e:	e00f      	b.n	80070b0 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007090:	88ba      	ldrh	r2, [r7, #4]
 8007092:	89fb      	ldrh	r3, [r7, #14]
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	3b01      	subs	r3, #1
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	4413      	add	r3, r2
 800709c:	89ba      	ldrh	r2, [r7, #12]
 800709e:	b2d2      	uxtb	r2, r2
 80070a0:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80070a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070a6:	121b      	asrs	r3, r3, #8
 80070a8:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	3301      	adds	r3, #1
 80070ae:	81fb      	strh	r3, [r7, #14]
 80070b0:	89fa      	ldrh	r2, [r7, #14]
 80070b2:	88bb      	ldrh	r3, [r7, #4]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d3eb      	bcc.n	8007090 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	bc80      	pop	{r7}
 80070c2:	4770      	bx	lr

080070c4 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80070d0:	2300      	movs	r3, #0
 80070d2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	b25b      	sxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	da0e      	bge.n	80070fc <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80070de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070e2:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80070e4:	e00a      	b.n	80070fc <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80070e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070ea:	021b      	lsls	r3, r3, #8
 80070ec:	b21a      	sxth	r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	1c59      	adds	r1, r3, #1
 80070f2:	6039      	str	r1, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	b21b      	sxth	r3, r3
 80070f8:	4313      	orrs	r3, r2
 80070fa:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80070fc:	88fb      	ldrh	r3, [r7, #6]
 80070fe:	1e5a      	subs	r2, r3, #1
 8007100:	80fa      	strh	r2, [r7, #6]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1ef      	bne.n	80070e6 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8007106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	bc80      	pop	{r7}
 8007112:	4770      	bx	lr

08007114 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	460b      	mov	r3, r1
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800712e:	2300      	movs	r3, #0
 8007130:	82fb      	strh	r3, [r7, #22]
 8007132:	e00e      	b.n	8007152 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007134:	897a      	ldrh	r2, [r7, #10]
 8007136:	8afb      	ldrh	r3, [r7, #22]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	3b01      	subs	r3, #1
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	4413      	add	r3, r2
 8007140:	693a      	ldr	r2, [r7, #16]
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	0a1b      	lsrs	r3, r3, #8
 800714a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	3301      	adds	r3, #1
 8007150:	82fb      	strh	r3, [r7, #22]
 8007152:	8afa      	ldrh	r2, [r7, #22]
 8007154:	897b      	ldrh	r3, [r7, #10]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3ec      	bcc.n	8007134 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	bc80      	pop	{r7}
 8007164:	4770      	bx	lr

08007166 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	4603      	mov	r3, r0
 800716e:	6039      	str	r1, [r7, #0]
 8007170:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8007176:	e007      	b.n	8007188 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	6039      	str	r1, [r7, #0]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	80fa      	strh	r2, [r7, #6]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f2      	bne.n	8007178 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8007192:	68fb      	ldr	r3, [r7, #12]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr

0800719e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800719e:	b480      	push	{r7}
 80071a0:	b085      	sub	sp, #20
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	4603      	mov	r3, r0
 80071a6:	6039      	str	r1, [r7, #0]
 80071a8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da0b      	bge.n	80071d0 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80071b8:	f04f 33ff 	mov.w	r3, #4294967295
 80071bc:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80071be:	e007      	b.n	80071d0 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	021a      	lsls	r2, r3, #8
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	1c59      	adds	r1, r3, #1
 80071c8:	6039      	str	r1, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	1e5a      	subs	r2, r3, #1
 80071d4:	80fa      	strh	r2, [r7, #6]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f2      	bne.n	80071c0 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr

080071e6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b084      	sub	sp, #16
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 8007208:	461a      	mov	r2, r3
 800720a:	2183      	movs	r1, #131	; 0x83
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 fd01 	bl	8008c14 <VL53L1_WrByte>
 8007212:	4603      	mov	r3, r0
 8007214:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 8007216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800722a:	2300      	movs	r3, #0
 800722c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800722e:	2101      	movs	r1, #1
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ffd8 	bl	80071e6 <VL53L1_set_powerforce_register>
 8007236:	4603      	mov	r3, r0
 8007238:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800723a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b086      	sub	sp, #24
 800724a:	af00      	add	r7, sp, #0
 800724c:	4603      	mov	r3, r0
 800724e:	460a      	mov	r2, r1
 8007250:	80fb      	strh	r3, [r7, #6]
 8007252:	4613      	mov	r3, r2
 8007254:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8007256:	2300      	movs	r3, #0
 8007258:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 faa0 	bl	80077aa <VL53L1_calc_pll_period_us>
 800726a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800726c:	797b      	ldrb	r3, [r7, #5]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 faae 	bl	80077d0 <VL53L1_decode_vcsel_period>
 8007274:	4603      	mov	r3, r0
 8007276:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800728a:	7cfa      	ldrb	r2, [r7, #19]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800729a:	68fb      	ldr	r3, [r7, #12]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b089      	sub	sp, #36	; 0x24
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	4608      	mov	r0, r1
 80072ae:	4611      	mov	r1, r2
 80072b0:	461a      	mov	r2, r3
 80072b2:	4603      	mov	r3, r0
 80072b4:	817b      	strh	r3, [r7, #10]
 80072b6:	460b      	mov	r3, r1
 80072b8:	813b      	strh	r3, [r7, #8]
 80072ba:	4613      	mov	r3, r2
 80072bc:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80072c6:	2300      	movs	r3, #0
 80072c8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80072ce:	2300      	movs	r3, #0
 80072d0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	011b      	lsls	r3, r3, #4
 80072d6:	4a23      	ldr	r2, [pc, #140]	; (8007364 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80072d8:	fb82 1203 	smull	r1, r2, r2, r3
 80072dc:	1192      	asrs	r2, r2, #6
 80072de:	17db      	asrs	r3, r3, #31
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 80072e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da03      	bge.n	80072f4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80072ec:	897b      	ldrh	r3, [r7, #10]
 80072ee:	425b      	negs	r3, r3
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 80072f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	da03      	bge.n	8007304 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80072fc:	893b      	ldrh	r3, [r7, #8]
 80072fe:	425b      	negs	r3, r3
 8007300:	b29b      	uxth	r3, r3
 8007302:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8007304:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007308:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800730c:	4413      	add	r3, r2
 800730e:	015b      	lsls	r3, r3, #5
 8007310:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	4a13      	ldr	r2, [pc, #76]	; (8007364 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8007316:	fb82 1203 	smull	r1, r2, r2, r3
 800731a:	1192      	asrs	r2, r2, #6
 800731c:	17db      	asrs	r3, r3, #31
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	4413      	add	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800732a:	79fa      	ldrb	r2, [r7, #7]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	3310      	adds	r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	da00      	bge.n	800733e <VL53L1_calc_range_ignore_threshold+0x9a>
 800733c:	331f      	adds	r3, #31
 800733e:	115b      	asrs	r3, r3, #5
 8007340:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007348:	db03      	blt.n	8007352 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800734a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800734e:	83fb      	strh	r3, [r7, #30]
 8007350:	e001      	b.n	8007356 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007356:	8bfb      	ldrh	r3, [r7, #30]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3724      	adds	r7, #36	; 0x24
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	10624dd3 	.word	0x10624dd3

08007368 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	031a      	lsls	r2, r3, #12
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	085b      	lsrs	r3, r3, #1
 800737e:	441a      	add	r2, r3
	timeout_mclks   =
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	fbb2 f3f3 	udiv	r3, r2, r3
 8007386:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr

08007394 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800739e:	2300      	movs	r3, #0
 80073a0:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80073a2:	2300      	movs	r3, #0
 80073a4:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 80073a6:	6839      	ldr	r1, [r7, #0]
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ffdd 	bl	8007368 <VL53L1_calc_timeout_mclks>
 80073ae:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f860 	bl	8007476 <VL53L1_encode_timeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80073ba:	897b      	ldrh	r3, [r7, #10]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80073c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80073c8:	b087      	sub	sp, #28
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80073d0:	2100      	movs	r1, #0
 80073d2:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80073d4:	f04f 0000 	mov.w	r0, #0
 80073d8:	f04f 0100 	mov.w	r1, #0
 80073dc:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	2000      	movs	r0, #0
 80073e4:	4688      	mov	r8, r1
 80073e6:	4681      	mov	r9, r0
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	2000      	movs	r0, #0
 80073ec:	460c      	mov	r4, r1
 80073ee:	4605      	mov	r5, r0
 80073f0:	fb04 f009 	mul.w	r0, r4, r9
 80073f4:	fb08 f105 	mul.w	r1, r8, r5
 80073f8:	4401      	add	r1, r0
 80073fa:	fba8 2304 	umull	r2, r3, r8, r4
 80073fe:	4419      	add	r1, r3
 8007400:	460b      	mov	r3, r1
 8007402:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8007406:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800740a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800740e:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 8007412:	f143 0b00 	adc.w	fp, r3, #0
 8007416:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800741a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	0b02      	lsrs	r2, r0, #12
 8007428:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800742c:	0b0b      	lsrs	r3, r1, #12
 800742e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007436:	697b      	ldr	r3, [r7, #20]
}
 8007438:	4618      	mov	r0, r3
 800743a:	371c      	adds	r7, #28
 800743c:	46bd      	mov	sp, r7
 800743e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007442:	4770      	bx	lr

08007444 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8007454:	2300      	movs	r3, #0
 8007456:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f836 	bl	80074cc <VL53L1_decode_timeout>
 8007460:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7ff ffad 	bl	80073c4 <VL53L1_calc_timeout_us>
 800746a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800746c:	68bb      	ldr	r3, [r7, #8]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8007476:	b480      	push	{r7}
 8007478:	b087      	sub	sp, #28
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d017      	beq.n	80074c0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3b01      	subs	r3, #1
 8007494:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007496:	e005      	b.n	80074a4 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800749e:	89fb      	ldrh	r3, [r7, #14]
 80074a0:	3301      	adds	r3, #1
 80074a2:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f4      	bne.n	8007498 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80074ae:	89fb      	ldrh	r3, [r7, #14]
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80074bc:	4413      	add	r3, r2
 80074be:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80074c0:	8afb      	ldrh	r3, [r7, #22]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	371c      	adds	r7, #28
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bc80      	pop	{r7}
 80074ca:	4770      	bx	lr

080074cc <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	0a12      	lsrs	r2, r2, #8
 80074e2:	b292      	uxth	r2, r2
 80074e4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80074ea:	68fb      	ldr	r3, [r7, #12]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b088      	sub	sp, #32
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007504:	2300      	movs	r3, #0
 8007506:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800750c:	2300      	movs	r3, #0
 800750e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8007510:	2300      	movs	r3, #0
 8007512:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8007514:	887b      	ldrh	r3, [r7, #2]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d102      	bne.n	8007520 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800751a:	23f1      	movs	r3, #241	; 0xf1
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e05d      	b.n	80075dc <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8007520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007522:	799a      	ldrb	r2, [r3, #6]
 8007524:	887b      	ldrh	r3, [r7, #2]
 8007526:	4611      	mov	r1, r2
 8007528:	4618      	mov	r0, r3
 800752a:	f7ff fe8c 	bl	8007246 <VL53L1_calc_macro_period_us>
 800752e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8007530:	6979      	ldr	r1, [r7, #20]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f7ff ff18 	bl	8007368 <VL53L1_calc_timeout_mclks>
 8007538:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2bff      	cmp	r3, #255	; 0xff
 800753e:	d901      	bls.n	8007544 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8007540:	23ff      	movs	r3, #255	; 0xff
 8007542:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8007548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754a:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800754c:	6979      	ldr	r1, [r7, #20]
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f7ff ff20 	bl	8007394 <VL53L1_calc_encoded_timeout>
 8007554:	4603      	mov	r3, r0
 8007556:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007558:	8a7b      	ldrh	r3, [r7, #18]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007564:	8a7b      	ldrh	r3, [r7, #18]
 8007566:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800756c:	6979      	ldr	r1, [r7, #20]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7ff ff10 	bl	8007394 <VL53L1_calc_encoded_timeout>
 8007574:	4603      	mov	r3, r0
 8007576:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007578:	8a7b      	ldrh	r3, [r7, #18]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8007580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007582:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007584:	8a7b      	ldrh	r3, [r7, #18]
 8007586:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8007588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758a:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800758c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758e:	7a5a      	ldrb	r2, [r3, #9]
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	4611      	mov	r1, r2
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fe56 	bl	8007246 <VL53L1_calc_macro_period_us>
 800759a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800759c:	6979      	ldr	r1, [r7, #20]
 800759e:	68b8      	ldr	r0, [r7, #8]
 80075a0:	f7ff fef8 	bl	8007394 <VL53L1_calc_encoded_timeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80075a8:	8a7b      	ldrh	r3, [r7, #18]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80075b4:	8a7b      	ldrh	r3, [r7, #18]
 80075b6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80075bc:	6979      	ldr	r1, [r7, #20]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fee8 	bl	8007394 <VL53L1_calc_encoded_timeout>
 80075c4:	4603      	mov	r3, r0
 80075c6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80075c8:	8a7b      	ldrh	r3, [r7, #18]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80075d4:	8a7b      	ldrh	r3, [r7, #18]
 80075d6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80075dc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3720      	adds	r7, #32
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	603a      	str	r2, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
 80075f4:	460b      	mov	r3, r1
 80075f6:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d90a      	bls.n	8007614 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80075fe:	79bb      	ldrb	r3, [r7, #6]
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	b2da      	uxtb	r2, r3
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	b2db      	uxtb	r3, r3
 800760a:	3b71      	subs	r3, #113	; 0x71
 800760c:	b2da      	uxtb	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8007612:	e00a      	b.n	800762a <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8007614:	79bb      	ldrb	r3, [r7, #6]
 8007616:	f1c3 030f 	rsb	r3, r3, #15
 800761a:	b2db      	uxtb	r3, r3
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	b2da      	uxtb	r2, r3
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	4413      	add	r3, r2
 8007624:	b2da      	uxtb	r2, r3
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	701a      	strb	r2, [r3, #0]
}
 800762a:	bf00      	nop
 800762c:	370c      	adds	r7, #12
 800762e:	46bd      	mov	sp, r7
 8007630:	bc80      	pop	{r7}
 8007632:	4770      	bx	lr

08007634 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
 8007640:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	b2da      	uxtb	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	f003 030f 	and.w	r3, r3, #15
 8007652:	b2da      	uxtb	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	701a      	strb	r2, [r3, #0]

}
 8007658:	bf00      	nop
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr

08007662 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8007662:	b480      	push	{r7}
 8007664:	b083      	sub	sp, #12
 8007666:	af00      	add	r7, sp, #0
 8007668:	4603      	mov	r3, r0
 800766a:	603a      	str	r2, [r7, #0]
 800766c:	71fb      	strb	r3, [r7, #7]
 800766e:	460b      	mov	r3, r1
 8007670:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8007672:	79bb      	ldrb	r3, [r7, #6]
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	b2da      	uxtb	r2, r3
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	4413      	add	r3, r2
 800767c:	b2da      	uxtb	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	701a      	strb	r2, [r3, #0]

}
 8007682:	bf00      	nop
 8007684:	370c      	adds	r7, #12
 8007686:	46bd      	mov	sp, r7
 8007688:	bc80      	pop	{r7}
 800768a:	4770      	bx	lr

0800768c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2203      	movs	r2, #3
 80076a0:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80076e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr

080076f2 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b087      	sub	sp, #28
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	229b      	movs	r2, #155	; 0x9b
 8007712:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 8007714:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007718:	4618      	mov	r0, r3
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	bc80      	pop	{r7}
 8007720:	4770      	bx	lr

08007722 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800772e:	2300      	movs	r3, #0
 8007730:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8007750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007762:	f003 0303 	and.w	r3, r3, #3
 8007766:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8007772:	4413      	add	r3, r2
 8007774:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800779c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	4603      	mov	r3, r0
 80077b2:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077be:	fb92 f3f3 	sdiv	r3, r2, r3
 80077c2:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc80      	pop	{r7}
 80077ce:	4770      	bx	lr

080077d0 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	4603      	mov	r3, r0
 80077d8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	3301      	adds	r3, #1
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8007802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	da10      	bge.n	800782c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	43db      	mvns	r3, r3
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	b2db      	uxtb	r3, r3
 8007816:	3308      	adds	r3, #8
 8007818:	b2da      	uxtb	r2, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	3b80      	subs	r3, #128	; 0x80
 8007822:	10db      	asrs	r3, r3, #3
 8007824:	b2da      	uxtb	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800782a:	e00c      	b.n	8007846 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	b2da      	uxtb	r2, r3
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
 800783a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800783e:	10db      	asrs	r3, r3, #3
 8007840:	b2da      	uxtb	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	701a      	strb	r2, [r3, #0]
}
 8007846:	bf00      	nop
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	bc80      	pop	{r7}
 800784e:	4770      	bx	lr

08007850 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	460b      	mov	r3, r1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007862:	897b      	ldrh	r3, [r7, #10]
 8007864:	2b0a      	cmp	r3, #10
 8007866:	d802      	bhi.n	800786e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007868:	f06f 0309 	mvn.w	r3, #9
 800786c:	e047      	b.n	80078fe <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007876:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8007884:	f002 020f 	and.w	r2, r2, #15
 8007888:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800788a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8007894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007898:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800789a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 80078a4:	f002 0203 	and.w	r2, r2, #3
 80078a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80078aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 80078b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80078ba:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	88d8      	ldrh	r0, [r3, #6]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3305      	adds	r3, #5
 80078c4:	461a      	mov	r2, r3
 80078c6:	2102      	movs	r1, #2
 80078c8:	f7ff fb88 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80078d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80078de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80078e8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80078ee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80078f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80078fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b086      	sub	sp, #24
 800790a:	af00      	add	r7, sp, #0
 800790c:	4603      	mov	r3, r0
 800790e:	60b9      	str	r1, [r7, #8]
 8007910:	607a      	str	r2, [r7, #4]
 8007912:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007914:	2300      	movs	r3, #0
 8007916:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007918:	89fb      	ldrh	r3, [r7, #14]
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d802      	bhi.n	8007924 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800791e:	f06f 0309 	mvn.w	r3, #9
 8007922:	e046      	b.n	80079b2 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	3301      	adds	r3, #1
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	3302      	adds	r3, #2
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3303      	adds	r3, #3
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3304      	adds	r3, #4
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800796c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	3305      	adds	r3, #5
 8007976:	4619      	mov	r1, r3
 8007978:	2002      	movs	r0, #2
 800797a:	f7ff fb59 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800797e:	4603      	mov	r3, r0
 8007980:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	79da      	ldrb	r2, [r3, #7]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	7a1a      	ldrb	r2, [r3, #8]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	3309      	adds	r3, #9
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079a0:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	7a9a      	ldrb	r2, [r3, #10]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 80079ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b086      	sub	sp, #24
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80079c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80079d0:	f107 020c 	add.w	r2, r7, #12
 80079d4:	230b      	movs	r3, #11
 80079d6:	2101      	movs	r1, #1
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f8e5 	bl	8008ba8 <VL53L1_ReadMulti>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80079e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d108      	bne.n	80079fc <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4619      	mov	r1, r3
 80079f2:	200b      	movs	r0, #11
 80079f4:	f7ff ff87 	bl	8007906 <VL53L1_i2c_decode_static_nvm_managed>
 80079f8:	4603      	mov	r3, r0
 80079fa:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80079fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	460b      	mov	r3, r1
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007a1a:	897b      	ldrh	r3, [r7, #10]
 8007a1c:	2b16      	cmp	r3, #22
 8007a1e:	d802      	bhi.n	8007a26 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a20:	f06f 0309 	mvn.w	r3, #9
 8007a24:	e076      	b.n	8007b14 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007a36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007a40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007a4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8007a54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007a5e:	f002 020f 	and.w	r2, r2, #15
 8007a62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007a64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8007a6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007a78:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007a7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007a7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8007a88:	f002 0203 	and.w	r2, r2, #3
 8007a8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007a8e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8958      	ldrh	r0, [r3, #10]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3309      	adds	r3, #9
 8007a98:	461a      	mov	r2, r3
 8007a9a:	2102      	movs	r1, #2
 8007a9c:	f7ff fa9e 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	330b      	adds	r3, #11
 8007aaa:	461a      	mov	r2, r3
 8007aac:	2102      	movs	r1, #2
 8007aae:	f7ff fade 	bl	800706e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	330d      	adds	r3, #13
 8007abc:	461a      	mov	r2, r3
 8007abe:	2102      	movs	r1, #2
 8007ac0:	f7ff fad5 	bl	800706e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8a18      	ldrh	r0, [r3, #16]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	330f      	adds	r3, #15
 8007acc:	461a      	mov	r2, r3
 8007ace:	2102      	movs	r1, #2
 8007ad0:	f7ff fa84 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8007ada:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ade:	b218      	sxth	r0, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3311      	adds	r3, #17
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	2102      	movs	r1, #2
 8007ae8:	f7ff fac1 	bl	800706e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	3313      	adds	r3, #19
 8007af6:	461a      	mov	r2, r3
 8007af8:	2102      	movs	r1, #2
 8007afa:	f7ff fab8 	bl	800706e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	3315      	adds	r3, #21
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2102      	movs	r1, #2
 8007b0c:	f7ff faaf 	bl	800706e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8007b10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
 8007b30:	2b16      	cmp	r3, #22
 8007b32:	d802      	bhi.n	8007b3a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b34:	f06f 0309 	mvn.w	r3, #9
 8007b38:	e079      	b.n	8007c2e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	785a      	ldrb	r2, [r3, #1]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	789a      	ldrb	r2, [r3, #2]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	78da      	ldrb	r2, [r3, #3]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	791a      	ldrb	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3305      	adds	r3, #5
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	f003 030f 	and.w	r3, r3, #15
 8007b6c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	799a      	ldrb	r2, [r3, #6]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3307      	adds	r3, #7
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b84:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	3308      	adds	r3, #8
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f003 0303 	and.w	r3, r3, #3
 8007b94:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	3309      	adds	r3, #9
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	2002      	movs	r0, #2
 8007ba2:	f7ff fa45 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	330b      	adds	r3, #11
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	2002      	movs	r0, #2
 8007bb6:	f7ff fa85 	bl	80070c4 <VL53L1_i2c_decode_int16_t>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	330d      	adds	r3, #13
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	2002      	movs	r0, #2
 8007bca:	f7ff fa7b 	bl	80070c4 <VL53L1_i2c_decode_int16_t>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	330f      	adds	r3, #15
 8007bda:	4619      	mov	r1, r3
 8007bdc:	2002      	movs	r0, #2
 8007bde:	f7ff fa27 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8007be2:	4603      	mov	r3, r0
 8007be4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	3311      	adds	r3, #17
 8007bee:	4619      	mov	r1, r3
 8007bf0:	2002      	movs	r0, #2
 8007bf2:	f7ff fa67 	bl	80070c4 <VL53L1_i2c_decode_int16_t>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bfc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	3313      	adds	r3, #19
 8007c06:	4619      	mov	r1, r3
 8007c08:	2002      	movs	r0, #2
 8007c0a:	f7ff fa5b 	bl	80070c4 <VL53L1_i2c_decode_int16_t>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	3315      	adds	r3, #21
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	2002      	movs	r0, #2
 8007c1e:	f7ff fa51 	bl	80070c4 <VL53L1_i2c_decode_int16_t>
 8007c22:	4603      	mov	r3, r0
 8007c24:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8007c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007c40:	2300      	movs	r3, #0
 8007c42:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007c44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d108      	bne.n	8007c5e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8007c4c:	f107 0208 	add.w	r2, r7, #8
 8007c50:	2317      	movs	r3, #23
 8007c52:	210d      	movs	r1, #13
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 ffa7 	bl	8008ba8 <VL53L1_ReadMulti>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007c5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d108      	bne.n	8007c78 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8007c66:	f107 0308 	add.w	r3, r7, #8
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2017      	movs	r0, #23
 8007c70:	f7ff ff54 	bl	8007b1c <VL53L1_i2c_decode_customer_nvm_managed>
 8007c74:	4603      	mov	r3, r0
 8007c76:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007c78:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	60f8      	str	r0, [r7, #12]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	607a      	str	r2, [r7, #4]
 8007c90:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007c96:	897b      	ldrh	r3, [r7, #10]
 8007c98:	2b1f      	cmp	r3, #31
 8007c9a:	d802      	bhi.n	8007ca2 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c9c:	f06f 0309 	mvn.w	r3, #9
 8007ca0:	e0cf      	b.n	8007e42 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff f996 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8007cb8:	f002 0201 	and.w	r2, r2, #1
 8007cbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007cbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8007cc8:	f002 020f 	and.w	r2, r2, #15
 8007ccc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007cce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8007cd8:	f002 020f 	and.w	r2, r2, #15
 8007cdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8007ce8:	f002 021f 	and.w	r2, r2, #31
 8007cec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007cee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007cf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cfc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007cfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8007d08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d0c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8007d18:	f002 0201 	and.w	r2, r2, #1
 8007d1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007d1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8007d28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007d32:	f002 0201 	and.w	r2, r2, #1
 8007d36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8007d38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007d42:	f002 0203 	and.w	r2, r2, #3
 8007d46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007d48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007d52:	f002 021f 	and.w	r2, r2, #31
 8007d56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8007d58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8007d62:	f002 0203 	and.w	r2, r2, #3
 8007d66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8007d68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8007d72:	f002 0203 	and.w	r2, r2, #3
 8007d76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8007d78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007d82:	f002 0207 	and.w	r2, r2, #7
 8007d86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8007d88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007d92:	f002 021f 	and.w	r2, r2, #31
 8007d96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8007d98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007da2:	f002 0201 	and.w	r2, r2, #1
 8007da6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8007da8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007db2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007dbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007dc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007dd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8007dda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8007de4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8b18      	ldrh	r0, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3318      	adds	r3, #24
 8007dee:	461a      	mov	r2, r3
 8007df0:	2102      	movs	r1, #2
 8007df2:	f7ff f8f3 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8007dfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8007e08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8007e12:	f002 020f 	and.w	r2, r2, #15
 8007e16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8007e18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8007e22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8007e2c:	f002 020f 	and.w	r2, r2, #15
 8007e30:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8007e32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8007e3c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007e3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	60f8      	str	r0, [r7, #12]
 8007e52:	460b      	mov	r3, r1
 8007e54:	607a      	str	r2, [r7, #4]
 8007e56:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	2b15      	cmp	r3, #21
 8007e60:	d802      	bhi.n	8007e68 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007e62:	f06f 0309 	mvn.w	r3, #9
 8007e66:	e070      	b.n	8007f4a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007e78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007e82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8007e8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007e92:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8007e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e9c:	b298      	uxth	r0, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	f7ff f899 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8007eb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007eb6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007eb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8007ec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007ecc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8007ed6:	f002 0201 	and.w	r2, r2, #1
 8007eda:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007edc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8007ee6:	f002 0207 	and.w	r2, r2, #7
 8007eea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007eec:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8998      	ldrh	r0, [r3, #12]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	330c      	adds	r3, #12
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2102      	movs	r1, #2
 8007efa:	f7ff f86f 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	89d8      	ldrh	r0, [r3, #14]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	330e      	adds	r3, #14
 8007f06:	461a      	mov	r2, r3
 8007f08:	2102      	movs	r1, #2
 8007f0a:	f7ff f867 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	8a18      	ldrh	r0, [r3, #16]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3310      	adds	r3, #16
 8007f16:	461a      	mov	r2, r3
 8007f18:	2102      	movs	r1, #2
 8007f1a:	f7ff f85f 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007f26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007f30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007f3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007f44:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b086      	sub	sp, #24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007f60:	2300      	movs	r3, #0
 8007f62:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007f64:	897b      	ldrh	r3, [r7, #10]
 8007f66:	2b16      	cmp	r3, #22
 8007f68:	d802      	bhi.n	8007f70 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007f6a:	f06f 0309 	mvn.w	r3, #9
 8007f6e:	e06e      	b.n	800804e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007f86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007f90:	f002 020f 	and.w	r2, r2, #15
 8007f94:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007f96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007fa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007faa:	f002 020f 	and.w	r2, r2, #15
 8007fae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8007fba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8007fc4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007fc8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007fd4:	f002 020f 	and.w	r2, r2, #15
 8007fd8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007fda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007fe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8007fee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007ff2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007ff4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8958      	ldrh	r0, [r3, #10]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	330a      	adds	r3, #10
 8007ffe:	461a      	mov	r2, r3
 8008000:	2102      	movs	r1, #2
 8008002:	f7fe ffeb 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8998      	ldrh	r0, [r3, #12]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	330c      	adds	r3, #12
 800800e:	461a      	mov	r2, r3
 8008010:	2102      	movs	r1, #2
 8008012:	f7fe ffe3 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800801e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008028:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6918      	ldr	r0, [r3, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3312      	adds	r3, #18
 8008032:	461a      	mov	r2, r3
 8008034:	2104      	movs	r1, #4
 8008036:	f7ff f86d 	bl	8007114 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008042:	f002 0201 	and.w	r2, r2, #1
 8008046:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008048:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800804a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	60f8      	str	r0, [r7, #12]
 800805e:	460b      	mov	r3, r1
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008064:	2300      	movs	r3, #0
 8008066:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008068:	897b      	ldrh	r3, [r7, #10]
 800806a:	2b11      	cmp	r3, #17
 800806c:	d802      	bhi.n	8008074 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800806e:	f06f 0309 	mvn.w	r3, #9
 8008072:	e071      	b.n	8008158 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	f003 0303 	and.w	r3, r3, #3
 800807c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8858      	ldrh	r0, [r3, #2]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3301      	adds	r3, #1
 800808a:	461a      	mov	r2, r3
 800808c:	2102      	movs	r1, #2
 800808e:	f7fe ffa5 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8898      	ldrh	r0, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3303      	adds	r3, #3
 800809a:	461a      	mov	r2, r3
 800809c:	2102      	movs	r1, #2
 800809e:	f7fe ff9d 	bl	8006fdc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80080aa:	f002 0201 	and.w	r2, r2, #1
 80080ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80080b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80080ba:	f002 0207 	and.w	r2, r2, #7
 80080be:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80080c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80080ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80080d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80080de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80080e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80080ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80080f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80080fe:	f002 0203 	and.w	r2, r2, #3
 8008102:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8008104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800810e:	f002 0203 	and.w	r2, r2, #3
 8008112:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8008114:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800811e:	f002 020f 	and.w	r2, r2, #15
 8008122:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008124:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800812e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008138:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008142:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800814c:	f002 0203 	and.w	r2, r2, #3
 8008150:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008152:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008154:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3718      	adds	r7, #24
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	460b      	mov	r3, r1
 800816a:	607a      	str	r2, [r7, #4]
 800816c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008172:	897b      	ldrh	r3, [r7, #10]
 8008174:	2b04      	cmp	r3, #4
 8008176:	d802      	bhi.n	800817e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008178:	f06f 0309 	mvn.w	r3, #9
 800817c:	e025      	b.n	80081ca <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8008194:	f002 0201 	and.w	r2, r2, #1
 8008198:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800819a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 80081a4:	f002 0201 	and.w	r2, r2, #1
 80081a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80081aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80081b4:	f002 0203 	and.w	r2, r2, #3
 80081b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80081ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80081c4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80081c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	371c      	adds	r7, #28
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bc80      	pop	{r7}
 80081d2:	4770      	bx	lr

080081d4 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80081e6:	89fb      	ldrh	r3, [r7, #14]
 80081e8:	2b2b      	cmp	r3, #43	; 0x2b
 80081ea:	d802      	bhi.n	80081f2 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80081ec:	f06f 0309 	mvn.w	r3, #9
 80081f0:	e0e2      	b.n	80083b8 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fa:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	785a      	ldrb	r2, [r3, #1]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	3302      	adds	r3, #2
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	78da      	ldrb	r2, [r3, #3]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	3304      	adds	r3, #4
 8008224:	4619      	mov	r1, r3
 8008226:	2002      	movs	r0, #2
 8008228:	f7fe ff02 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800822c:	4603      	mov	r3, r0
 800822e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	3306      	adds	r3, #6
 8008238:	4619      	mov	r1, r3
 800823a:	2002      	movs	r0, #2
 800823c:	f7fe fef8 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008240:	4603      	mov	r3, r0
 8008242:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	3308      	adds	r3, #8
 800824c:	4619      	mov	r1, r3
 800824e:	2002      	movs	r0, #2
 8008250:	f7fe feee 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008254:	4603      	mov	r3, r0
 8008256:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	330a      	adds	r3, #10
 8008260:	4619      	mov	r1, r3
 8008262:	2002      	movs	r0, #2
 8008264:	f7fe fee4 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	330c      	adds	r3, #12
 8008274:	4619      	mov	r1, r3
 8008276:	2002      	movs	r0, #2
 8008278:	f7fe feda 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800827c:	4603      	mov	r3, r0
 800827e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	330e      	adds	r3, #14
 8008288:	4619      	mov	r1, r3
 800828a:	2002      	movs	r0, #2
 800828c:	f7fe fed0 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	3310      	adds	r3, #16
 800829c:	4619      	mov	r1, r3
 800829e:	2002      	movs	r0, #2
 80082a0:	f7fe fec6 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80082a4:	4603      	mov	r3, r0
 80082a6:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	3312      	adds	r3, #18
 80082b0:	4619      	mov	r1, r3
 80082b2:	2002      	movs	r0, #2
 80082b4:	f7fe febc 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80082b8:	4603      	mov	r3, r0
 80082ba:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	3314      	adds	r3, #20
 80082c4:	4619      	mov	r1, r3
 80082c6:	2002      	movs	r0, #2
 80082c8:	f7fe feb2 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80082cc:	4603      	mov	r3, r0
 80082ce:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	3316      	adds	r3, #22
 80082d8:	4619      	mov	r1, r3
 80082da:	2002      	movs	r0, #2
 80082dc:	f7fe fea8 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	3318      	adds	r3, #24
 80082ec:	4619      	mov	r1, r3
 80082ee:	2002      	movs	r0, #2
 80082f0:	f7fe fe9e 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	331a      	adds	r3, #26
 8008300:	4619      	mov	r1, r3
 8008302:	2002      	movs	r0, #2
 8008304:	f7fe fe94 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008308:	4603      	mov	r3, r0
 800830a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	331c      	adds	r3, #28
 8008314:	4619      	mov	r1, r3
 8008316:	2002      	movs	r0, #2
 8008318:	f7fe fe8a 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800831c:	4603      	mov	r3, r0
 800831e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	331e      	adds	r3, #30
 8008328:	4619      	mov	r1, r3
 800832a:	2002      	movs	r0, #2
 800832c:	f7fe fe80 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008330:	4603      	mov	r3, r0
 8008332:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3320      	adds	r3, #32
 800833c:	4619      	mov	r1, r3
 800833e:	2002      	movs	r0, #2
 8008340:	f7fe fe76 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008344:	4603      	mov	r3, r0
 8008346:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3322      	adds	r3, #34	; 0x22
 8008350:	4619      	mov	r1, r3
 8008352:	2002      	movs	r0, #2
 8008354:	f7fe fe6c 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008358:	4603      	mov	r3, r0
 800835a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	3324      	adds	r3, #36	; 0x24
 8008364:	4619      	mov	r1, r3
 8008366:	2002      	movs	r0, #2
 8008368:	f7fe fe62 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800836c:	4603      	mov	r3, r0
 800836e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	3326      	adds	r3, #38	; 0x26
 8008378:	4619      	mov	r1, r3
 800837a:	2002      	movs	r0, #2
 800837c:	f7fe fe58 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008380:	4603      	mov	r3, r0
 8008382:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	3328      	adds	r3, #40	; 0x28
 800838c:	4619      	mov	r1, r3
 800838e:	2002      	movs	r0, #2
 8008390:	f7fe fe4e 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80083b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3718      	adds	r7, #24
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	4603      	mov	r3, r0
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80083d2:	89fb      	ldrh	r3, [r7, #14]
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d802      	bhi.n	80083de <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80083d8:	f06f 0309 	mvn.w	r3, #9
 80083dc:	e04d      	b.n	800847a <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	2004      	movs	r0, #4
 80083e2:	f7fe fec0 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 80083e6:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4619      	mov	r1, r3
 80083f2:	2004      	movs	r0, #4
 80083f4:	f7fe feb7 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 80083f8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	3308      	adds	r3, #8
 8008402:	4619      	mov	r1, r3
 8008404:	2004      	movs	r0, #4
 8008406:	f7fe feca 	bl	800719e <VL53L1_i2c_decode_int32_t>
 800840a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	330c      	adds	r3, #12
 8008414:	4619      	mov	r1, r3
 8008416:	2004      	movs	r0, #4
 8008418:	f7fe fea5 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 800841c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	3310      	adds	r3, #16
 8008426:	4619      	mov	r1, r3
 8008428:	2004      	movs	r0, #4
 800842a:	f7fe fe9c 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 800842e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	3314      	adds	r3, #20
 8008438:	4619      	mov	r1, r3
 800843a:	2004      	movs	r0, #4
 800843c:	f7fe fe93 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 8008440:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	3318      	adds	r3, #24
 800844a:	4619      	mov	r1, r3
 800844c:	2004      	movs	r0, #4
 800844e:	f7fe fea6 	bl	800719e <VL53L1_i2c_decode_int32_t>
 8008452:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	331c      	adds	r3, #28
 800845c:	4619      	mov	r1, r3
 800845e:	2004      	movs	r0, #4
 8008460:	f7fe fe81 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 8008464:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8008476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b086      	sub	sp, #24
 8008486:	af00      	add	r7, sp, #0
 8008488:	4603      	mov	r3, r0
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
 800848e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008490:	2300      	movs	r3, #0
 8008492:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008494:	89fb      	ldrh	r3, [r7, #14]
 8008496:	2b37      	cmp	r3, #55	; 0x37
 8008498:	d802      	bhi.n	80084a0 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800849a:	f06f 0309 	mvn.w	r3, #9
 800849e:	e15e      	b.n	800875e <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	2002      	movs	r0, #2
 80084a4:	f7fe fdc4 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80084a8:	4603      	mov	r3, r0
 80084aa:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3302      	adds	r3, #2
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ba:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3303      	adds	r3, #3
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ca:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3304      	adds	r3, #4
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 0303 	and.w	r3, r3, #3
 80084da:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3305      	adds	r3, #5
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3306      	adds	r3, #6
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084fa:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3307      	adds	r3, #7
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800850a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3308      	adds	r3, #8
 8008514:	4619      	mov	r1, r3
 8008516:	2002      	movs	r0, #2
 8008518:	f7fe fd8a 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 800851c:	4603      	mov	r3, r0
 800851e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008522:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	330a      	adds	r3, #10
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	330b      	adds	r3, #11
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	330c      	adds	r3, #12
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	330d      	adds	r3, #13
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	330e      	adds	r3, #14
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	330f      	adds	r3, #15
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	7c1a      	ldrb	r2, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	7c5a      	ldrb	r2, [r3, #17]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	3312      	adds	r3, #18
 800859c:	4619      	mov	r1, r3
 800859e:	2002      	movs	r0, #2
 80085a0:	f7fe fd46 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085aa:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	3316      	adds	r3, #22
 80085b4:	4619      	mov	r1, r3
 80085b6:	2002      	movs	r0, #2
 80085b8:	f7fe fd3a 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80085bc:	4603      	mov	r3, r0
 80085be:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	3318      	adds	r3, #24
 80085c8:	4619      	mov	r1, r3
 80085ca:	2002      	movs	r0, #2
 80085cc:	f7fe fd30 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80085d0:	4603      	mov	r3, r0
 80085d2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	331a      	adds	r3, #26
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	331b      	adds	r3, #27
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f003 0307 	and.w	r3, r3, #7
 80085f2:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	7f1a      	ldrb	r2, [r3, #28]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	7f5a      	ldrb	r2, [r3, #29]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	331e      	adds	r3, #30
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008612:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	331f      	adds	r3, #31
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008622:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	3320      	adds	r3, #32
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	3321      	adds	r3, #33	; 0x21
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	3325      	adds	r3, #37	; 0x25
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	3326      	adds	r3, #38	; 0x26
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3327      	adds	r3, #39	; 0x27
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	3328      	adds	r3, #40	; 0x28
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	3329      	adds	r3, #41	; 0x29
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	f003 031f 	and.w	r3, r3, #31
 80086be:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	332a      	adds	r3, #42	; 0x2a
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	332b      	adds	r3, #43	; 0x2b
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	332c      	adds	r3, #44	; 0x2c
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	332d      	adds	r3, #45	; 0x2d
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008706:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	332e      	adds	r3, #46	; 0x2e
 8008712:	4619      	mov	r1, r3
 8008714:	2004      	movs	r0, #4
 8008716:	f7fe fd26 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 800871a:	4603      	mov	r3, r0
 800871c:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	3332      	adds	r3, #50	; 0x32
 8008728:	4619      	mov	r1, r3
 800872a:	2004      	movs	r0, #4
 800872c:	f7fe fd1b 	bl	8007166 <VL53L1_i2c_decode_uint32_t>
 8008730:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	3336      	adds	r3, #54	; 0x36
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	3337      	adds	r3, #55	; 0x37
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800875a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b086      	sub	sp, #24
 800876a:	af00      	add	r7, sp, #0
 800876c:	4603      	mov	r3, r0
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
 8008772:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008774:	2300      	movs	r3, #0
 8008776:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8008778:	89fb      	ldrh	r3, [r7, #14]
 800877a:	2b30      	cmp	r3, #48	; 0x30
 800877c:	d802      	bhi.n	8008784 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800877e:	f06f 0309 	mvn.w	r3, #9
 8008782:	e112      	b.n	80089aa <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	785a      	ldrb	r2, [r3, #1]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	789a      	ldrb	r2, [r3, #2]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	3303      	adds	r3, #3
 80087a0:	4619      	mov	r1, r3
 80087a2:	2002      	movs	r0, #2
 80087a4:	f7fe fc44 	bl	8007030 <VL53L1_i2c_decode_uint16_t>
 80087a8:	4603      	mov	r3, r0
 80087aa:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3305      	adds	r3, #5
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087ba:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3306      	adds	r3, #6
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3307      	adds	r3, #7
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 0307 	and.w	r3, r3, #7
 80087da:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3308      	adds	r3, #8
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ea:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	3309      	adds	r3, #9
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087fa:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	330a      	adds	r3, #10
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	330b      	adds	r3, #11
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	330c      	adds	r3, #12
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	330d      	adds	r3, #13
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800883a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	330e      	adds	r3, #14
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800884a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7bda      	ldrb	r2, [r3, #15]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	7c1a      	ldrb	r2, [r3, #16]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	7c5a      	ldrb	r2, [r3, #17]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	7c9a      	ldrb	r2, [r3, #18]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	7cda      	ldrb	r2, [r3, #19]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	7d1a      	ldrb	r2, [r3, #20]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	7d5a      	ldrb	r2, [r3, #21]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7d9a      	ldrb	r2, [r3, #22]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	7dda      	ldrb	r2, [r3, #23]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	7e1a      	ldrb	r2, [r3, #24]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	7e5a      	ldrb	r2, [r3, #25]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7e9a      	ldrb	r2, [r3, #26]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	7eda      	ldrb	r2, [r3, #27]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	7f1a      	ldrb	r2, [r3, #28]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	7f5a      	ldrb	r2, [r3, #29]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	7f9a      	ldrb	r2, [r3, #30]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	7fda      	ldrb	r2, [r3, #31]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 80089a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b090      	sub	sp, #64	; 0x40
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80089c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10a      	bne.n	80089e0 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80089ca:	f107 020c 	add.w	r2, r7, #12
 80089ce:	2331      	movs	r3, #49	; 0x31
 80089d0:	f240 110f 	movw	r1, #271	; 0x10f
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f8e7 	bl	8008ba8 <VL53L1_ReadMulti>
 80089da:	4603      	mov	r3, r0
 80089dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80089e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80089e8:	f107 030c 	add.w	r3, r7, #12
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	2031      	movs	r0, #49	; 0x31
 80089f2:	f7ff feb8 	bl	8008766 <VL53L1_i2c_decode_nvm_copy_data>
 80089f6:	4603      	mov	r3, r0
 80089f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80089fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3740      	adds	r7, #64	; 0x40
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8008a16:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9b6 	bl	8008d8c <VL53L1_WaitUs>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8008a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	2301      	movs	r3, #1
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	2301      	movs	r3, #1
 8008a36:	22e5      	movs	r2, #229	; 0xe5
 8008a38:	6839      	ldr	r1, [r7, #0]
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f9bc 	bl	8008db8 <VL53L1_WaitValueMaskEx>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8008a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8008a4c:	2103      	movs	r1, #3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fe f8ab 	bl	8006baa <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8008a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b088      	sub	sp, #32
 8008a64:	af02      	add	r7, sp, #8
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8008a80:	f003 0310 	and.w	r3, r3, #16
 8008a84:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d102      	bne.n	8008a92 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	75fb      	strb	r3, [r7, #23]
 8008a90:	e001      	b.n	8008a96 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8008a92:	2300      	movs	r3, #0
 8008a94:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	9201      	str	r2, [sp, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	9200      	str	r2, [sp, #0]
 8008aa0:	2231      	movs	r2, #49	; 0x31
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f987 	bl	8008db8 <VL53L1_WaitValueMaskEx>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8008aae:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b088      	sub	sp, #32
 8008abe:	af02      	add	r7, sp, #8
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	330a      	adds	r3, #10
 8008aca:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8008ad8:	b299      	uxth	r1, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	f7f9 fa21 	bl	8001f2c <HAL_I2C_Master_Transmit>
 8008aea:	4603      	mov	r3, r0
 8008aec:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008aee:	693b      	ldr	r3, [r7, #16]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	330a      	adds	r3, #10
 8008b08:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	b299      	uxth	r1, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	4613      	mov	r3, r2
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	f7f9 fafd 	bl	8002128 <HAL_I2C_Master_Receive>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008b32:	693b      	ldr	r3, [r7, #16]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	607a      	str	r2, [r7, #4]
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	460b      	mov	r3, r1
 8008b4a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2bff      	cmp	r3, #255	; 0xff
 8008b54:	d902      	bls.n	8008b5c <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8008b56:	f06f 0303 	mvn.w	r3, #3
 8008b5a:	e01d      	b.n	8008b98 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8008b5c:	897b      	ldrh	r3, [r7, #10]
 8008b5e:	0a1b      	lsrs	r3, r3, #8
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	4b0e      	ldr	r3, [pc, #56]	; (8008ba0 <VL53L1_WriteMulti+0x64>)
 8008b66:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008b68:	897b      	ldrh	r3, [r7, #10]
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ba0 <VL53L1_WriteMulti+0x64>)
 8008b6e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	6879      	ldr	r1, [r7, #4]
 8008b74:	480b      	ldr	r0, [pc, #44]	; (8008ba4 <VL53L1_WriteMulti+0x68>)
 8008b76:	f000 ffec 	bl	8009b52 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <VL53L1_WriteMulti+0x64>)
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff ff99 	bl	8008aba <_I2CWrite>
 8008b88:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d001      	beq.n	8008b94 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008b90:	23f3      	movs	r3, #243	; 0xf3
 8008b92:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	20000310 	.word	0x20000310
 8008ba4:	20000312 	.word	0x20000312

08008ba8 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	607a      	str	r2, [r7, #4]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008bbc:	897b      	ldrh	r3, [r7, #10]
 8008bbe:	0a1b      	lsrs	r3, r3, #8
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	4b12      	ldr	r3, [pc, #72]	; (8008c10 <VL53L1_ReadMulti+0x68>)
 8008bc6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008bc8:	897b      	ldrh	r3, [r7, #10]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	4b10      	ldr	r3, [pc, #64]	; (8008c10 <VL53L1_ReadMulti+0x68>)
 8008bce:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	490f      	ldr	r1, [pc, #60]	; (8008c10 <VL53L1_ReadMulti+0x68>)
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7ff ff70 	bl	8008aba <_I2CWrite>
 8008bda:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d002      	beq.n	8008be8 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008be2:	23f3      	movs	r3, #243	; 0xf3
 8008be4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008be6:	e00c      	b.n	8008c02 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	6879      	ldr	r1, [r7, #4]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff ff83 	bl	8008af8 <_I2CRead>
 8008bf2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d002      	beq.n	8008c00 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008bfa:	23f3      	movs	r3, #243	; 0xf3
 8008bfc:	75fb      	strb	r3, [r7, #23]
 8008bfe:	e000      	b.n	8008c02 <VL53L1_ReadMulti+0x5a>
    }
done:
 8008c00:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	20000310 	.word	0x20000310

08008c14 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	807b      	strh	r3, [r7, #2]
 8008c20:	4613      	mov	r3, r2
 8008c22:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c24:	2300      	movs	r3, #0
 8008c26:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008c28:	887b      	ldrh	r3, [r7, #2]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	4b0c      	ldr	r3, [pc, #48]	; (8008c64 <VL53L1_WrByte+0x50>)
 8008c32:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008c34:	887b      	ldrh	r3, [r7, #2]
 8008c36:	b2da      	uxtb	r2, r3
 8008c38:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <VL53L1_WrByte+0x50>)
 8008c3a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008c3c:	4a09      	ldr	r2, [pc, #36]	; (8008c64 <VL53L1_WrByte+0x50>)
 8008c3e:	787b      	ldrb	r3, [r7, #1]
 8008c40:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008c42:	2203      	movs	r2, #3
 8008c44:	4907      	ldr	r1, [pc, #28]	; (8008c64 <VL53L1_WrByte+0x50>)
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7ff ff37 	bl	8008aba <_I2CWrite>
 8008c4c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d001      	beq.n	8008c58 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c54:	23f3      	movs	r3, #243	; 0xf3
 8008c56:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000310 	.word	0x20000310

08008c68 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	460b      	mov	r3, r1
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c76:	2300      	movs	r3, #0
 8008c78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008c7a:	897b      	ldrh	r3, [r7, #10]
 8008c7c:	0a1b      	lsrs	r3, r3, #8
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	b2da      	uxtb	r2, r3
 8008c82:	4b12      	ldr	r3, [pc, #72]	; (8008ccc <VL53L1_RdByte+0x64>)
 8008c84:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008c86:	897b      	ldrh	r3, [r7, #10]
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <VL53L1_RdByte+0x64>)
 8008c8c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008c8e:	2202      	movs	r2, #2
 8008c90:	490e      	ldr	r1, [pc, #56]	; (8008ccc <VL53L1_RdByte+0x64>)
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7ff ff11 	bl	8008aba <_I2CWrite>
 8008c98:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ca0:	23f3      	movs	r3, #243	; 0xf3
 8008ca2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008ca4:	e00c      	b.n	8008cc0 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff ff24 	bl	8008af8 <_I2CRead>
 8008cb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008cb8:	23f3      	movs	r3, #243	; 0xf3
 8008cba:	75fb      	strb	r3, [r7, #23]
 8008cbc:	e000      	b.n	8008cc0 <VL53L1_RdByte+0x58>
    }
done:
 8008cbe:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	20000310 	.word	0x20000310

08008cd0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008ce2:	897b      	ldrh	r3, [r7, #10]
 8008ce4:	0a1b      	lsrs	r3, r3, #8
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	b2da      	uxtb	r2, r3
 8008cea:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008cec:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008cee:	897b      	ldrh	r3, [r7, #10]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008cf4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	4914      	ldr	r1, [pc, #80]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fedd 	bl	8008aba <_I2CWrite>
 8008d00:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d08:	23f3      	movs	r3, #243	; 0xf3
 8008d0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d0c:	e017      	b.n	8008d3e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008d0e:	2202      	movs	r2, #2
 8008d10:	490e      	ldr	r1, [pc, #56]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff fef0 	bl	8008af8 <_I2CRead>
 8008d18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d20:	23f3      	movs	r3, #243	; 0xf3
 8008d22:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d24:	e00b      	b.n	8008d3e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008d26:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <VL53L1_RdWord+0x7c>)
 8008d32:	785b      	ldrb	r3, [r3, #1]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8008d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000310 	.word	0x20000310

08008d50 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8008d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bc80      	pop	{r7}
 8008d6e:	4770      	bx	lr

08008d70 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f7f8 fadf 	bl	8001340 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	4a06      	ldr	r2, [pc, #24]	; (8008db4 <VL53L1_WaitUs+0x28>)
 8008d9a:	fb82 1203 	smull	r1, r2, r2, r3
 8008d9e:	1192      	asrs	r2, r2, #6
 8008da0:	17db      	asrs	r3, r3, #31
 8008da2:	1ad3      	subs	r3, r2, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7f8 facb 	bl	8001340 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	10624dd3 	.word	0x10624dd3

08008db8 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8008dc4:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8008dc8:	6020      	str	r0, [r4, #0]
 8008dca:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8008dce:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8008dd2:	6001      	str	r1, [r0, #0]
 8008dd4:	4619      	mov	r1, r3
 8008dd6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008dda:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8008dde:	801a      	strh	r2, [r3, #0]
 8008de0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008de4:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8008de8:	460a      	mov	r2, r1
 8008dea:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008dec:	2300      	movs	r3, #0
 8008dee:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8008e04:	2300      	movs	r3, #0
 8008e06:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8008e10:	f107 0310 	add.w	r3, r7, #16
 8008e14:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e18:	493b      	ldr	r1, [pc, #236]	; (8008f08 <VL53L1_WaitValueMaskEx+0x150>)
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fe01 	bl	8009a22 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8008e20:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff ff93 	bl	8008d50 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8008e2a:	e049      	b.n	8008ec0 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8008e2c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d110      	bne.n	8008e56 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8008e34:	f207 2213 	addw	r2, r7, #531	; 0x213
 8008e38:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e3c:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8008e40:	8819      	ldrh	r1, [r3, #0]
 8008e42:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e46:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8008e4a:	6818      	ldr	r0, [r3, #0]
 8008e4c:	f7ff ff0c 	bl	8008c68 <VL53L1_RdByte>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8008e56:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8008e5a:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8008e5e:	4013      	ands	r3, r2
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8008e66:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8008e6a:	7812      	ldrb	r2, [r2, #0]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d102      	bne.n	8008e76 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 8008e70:	2301      	movs	r3, #1
 8008e72:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8008e76:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d114      	bne.n	8008ea8 <VL53L1_WaitValueMaskEx+0xf0>
 8008e7e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d110      	bne.n	8008ea8 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 8008e86:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00c      	beq.n	8008ea8 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8008e8e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8008e92:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e96:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f7ff ff67 	bl	8008d70 <VL53L1_WaitMs>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8008ea8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff ff4f 	bl	8008d50 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8008eb2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008eb6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		   (polling_time_ms < timeout_ms) &&
 8008ec0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10c      	bne.n	8008ee2 <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 8008ec8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008ecc:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008ed0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d203      	bcs.n	8008ee2 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 8008eda:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0a4      	beq.n	8008e2c <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8008ee2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <VL53L1_WaitValueMaskEx+0x140>
 8008eea:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d102      	bne.n	8008ef8 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 8008ef2:	23f9      	movs	r3, #249	; 0xf9
 8008ef4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8008ef8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd90      	pop	{r4, r7, pc}
 8008f06:	bf00      	nop
 8008f08:	0800bc60 	.word	0x0800bc60

08008f0c <__cvt>:
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f12:	461f      	mov	r7, r3
 8008f14:	bfbb      	ittet	lt
 8008f16:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008f1a:	461f      	movlt	r7, r3
 8008f1c:	2300      	movge	r3, #0
 8008f1e:	232d      	movlt	r3, #45	; 0x2d
 8008f20:	b088      	sub	sp, #32
 8008f22:	4614      	mov	r4, r2
 8008f24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f28:	7013      	strb	r3, [r2, #0]
 8008f2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f2c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f30:	f023 0820 	bic.w	r8, r3, #32
 8008f34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f38:	d005      	beq.n	8008f46 <__cvt+0x3a>
 8008f3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f3e:	d100      	bne.n	8008f42 <__cvt+0x36>
 8008f40:	3501      	adds	r5, #1
 8008f42:	2302      	movs	r3, #2
 8008f44:	e000      	b.n	8008f48 <__cvt+0x3c>
 8008f46:	2303      	movs	r3, #3
 8008f48:	aa07      	add	r2, sp, #28
 8008f4a:	9204      	str	r2, [sp, #16]
 8008f4c:	aa06      	add	r2, sp, #24
 8008f4e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f52:	e9cd 3500 	strd	r3, r5, [sp]
 8008f56:	4622      	mov	r2, r4
 8008f58:	463b      	mov	r3, r7
 8008f5a:	f000 fe91 	bl	8009c80 <_dtoa_r>
 8008f5e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f62:	4606      	mov	r6, r0
 8008f64:	d102      	bne.n	8008f6c <__cvt+0x60>
 8008f66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f68:	07db      	lsls	r3, r3, #31
 8008f6a:	d522      	bpl.n	8008fb2 <__cvt+0xa6>
 8008f6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f70:	eb06 0905 	add.w	r9, r6, r5
 8008f74:	d110      	bne.n	8008f98 <__cvt+0x8c>
 8008f76:	7833      	ldrb	r3, [r6, #0]
 8008f78:	2b30      	cmp	r3, #48	; 0x30
 8008f7a:	d10a      	bne.n	8008f92 <__cvt+0x86>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	4620      	mov	r0, r4
 8008f82:	4639      	mov	r1, r7
 8008f84:	f7f7 fd10 	bl	80009a8 <__aeabi_dcmpeq>
 8008f88:	b918      	cbnz	r0, 8008f92 <__cvt+0x86>
 8008f8a:	f1c5 0501 	rsb	r5, r5, #1
 8008f8e:	f8ca 5000 	str.w	r5, [sl]
 8008f92:	f8da 3000 	ldr.w	r3, [sl]
 8008f96:	4499      	add	r9, r3
 8008f98:	2200      	movs	r2, #0
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	4639      	mov	r1, r7
 8008fa0:	f7f7 fd02 	bl	80009a8 <__aeabi_dcmpeq>
 8008fa4:	b108      	cbz	r0, 8008faa <__cvt+0x9e>
 8008fa6:	f8cd 901c 	str.w	r9, [sp, #28]
 8008faa:	2230      	movs	r2, #48	; 0x30
 8008fac:	9b07      	ldr	r3, [sp, #28]
 8008fae:	454b      	cmp	r3, r9
 8008fb0:	d307      	bcc.n	8008fc2 <__cvt+0xb6>
 8008fb2:	4630      	mov	r0, r6
 8008fb4:	9b07      	ldr	r3, [sp, #28]
 8008fb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fb8:	1b9b      	subs	r3, r3, r6
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	b008      	add	sp, #32
 8008fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fc2:	1c59      	adds	r1, r3, #1
 8008fc4:	9107      	str	r1, [sp, #28]
 8008fc6:	701a      	strb	r2, [r3, #0]
 8008fc8:	e7f0      	b.n	8008fac <__cvt+0xa0>

08008fca <__exponent>:
 8008fca:	4603      	mov	r3, r0
 8008fcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fce:	2900      	cmp	r1, #0
 8008fd0:	f803 2b02 	strb.w	r2, [r3], #2
 8008fd4:	bfb6      	itet	lt
 8008fd6:	222d      	movlt	r2, #45	; 0x2d
 8008fd8:	222b      	movge	r2, #43	; 0x2b
 8008fda:	4249      	neglt	r1, r1
 8008fdc:	2909      	cmp	r1, #9
 8008fde:	7042      	strb	r2, [r0, #1]
 8008fe0:	dd2a      	ble.n	8009038 <__exponent+0x6e>
 8008fe2:	f10d 0207 	add.w	r2, sp, #7
 8008fe6:	4617      	mov	r7, r2
 8008fe8:	260a      	movs	r6, #10
 8008fea:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fee:	4694      	mov	ip, r2
 8008ff0:	fb06 1415 	mls	r4, r6, r5, r1
 8008ff4:	3430      	adds	r4, #48	; 0x30
 8008ff6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008ffa:	460c      	mov	r4, r1
 8008ffc:	2c63      	cmp	r4, #99	; 0x63
 8008ffe:	4629      	mov	r1, r5
 8009000:	f102 32ff 	add.w	r2, r2, #4294967295
 8009004:	dcf1      	bgt.n	8008fea <__exponent+0x20>
 8009006:	3130      	adds	r1, #48	; 0x30
 8009008:	f1ac 0402 	sub.w	r4, ip, #2
 800900c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009010:	4622      	mov	r2, r4
 8009012:	1c41      	adds	r1, r0, #1
 8009014:	42ba      	cmp	r2, r7
 8009016:	d30a      	bcc.n	800902e <__exponent+0x64>
 8009018:	f10d 0209 	add.w	r2, sp, #9
 800901c:	eba2 020c 	sub.w	r2, r2, ip
 8009020:	42bc      	cmp	r4, r7
 8009022:	bf88      	it	hi
 8009024:	2200      	movhi	r2, #0
 8009026:	4413      	add	r3, r2
 8009028:	1a18      	subs	r0, r3, r0
 800902a:	b003      	add	sp, #12
 800902c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800902e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009032:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009036:	e7ed      	b.n	8009014 <__exponent+0x4a>
 8009038:	2330      	movs	r3, #48	; 0x30
 800903a:	3130      	adds	r1, #48	; 0x30
 800903c:	7083      	strb	r3, [r0, #2]
 800903e:	70c1      	strb	r1, [r0, #3]
 8009040:	1d03      	adds	r3, r0, #4
 8009042:	e7f1      	b.n	8009028 <__exponent+0x5e>

08009044 <_printf_float>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	b091      	sub	sp, #68	; 0x44
 800904a:	460c      	mov	r4, r1
 800904c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009050:	4616      	mov	r6, r2
 8009052:	461f      	mov	r7, r3
 8009054:	4605      	mov	r5, r0
 8009056:	f000 fcf7 	bl	8009a48 <_localeconv_r>
 800905a:	6803      	ldr	r3, [r0, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	9309      	str	r3, [sp, #36]	; 0x24
 8009060:	f7f7 f876 	bl	8000150 <strlen>
 8009064:	2300      	movs	r3, #0
 8009066:	930e      	str	r3, [sp, #56]	; 0x38
 8009068:	f8d8 3000 	ldr.w	r3, [r8]
 800906c:	900a      	str	r0, [sp, #40]	; 0x28
 800906e:	3307      	adds	r3, #7
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	f103 0208 	add.w	r2, r3, #8
 8009078:	f894 9018 	ldrb.w	r9, [r4, #24]
 800907c:	f8d4 b000 	ldr.w	fp, [r4]
 8009080:	f8c8 2000 	str.w	r2, [r8]
 8009084:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009088:	4652      	mov	r2, sl
 800908a:	4643      	mov	r3, r8
 800908c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009090:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009094:	930b      	str	r3, [sp, #44]	; 0x2c
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	4650      	mov	r0, sl
 800909c:	4b9c      	ldr	r3, [pc, #624]	; (8009310 <_printf_float+0x2cc>)
 800909e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090a0:	f7f7 fcb4 	bl	8000a0c <__aeabi_dcmpun>
 80090a4:	bb70      	cbnz	r0, 8009104 <_printf_float+0xc0>
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295
 80090aa:	4650      	mov	r0, sl
 80090ac:	4b98      	ldr	r3, [pc, #608]	; (8009310 <_printf_float+0x2cc>)
 80090ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090b0:	f7f7 fc8e 	bl	80009d0 <__aeabi_dcmple>
 80090b4:	bb30      	cbnz	r0, 8009104 <_printf_float+0xc0>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2300      	movs	r3, #0
 80090ba:	4650      	mov	r0, sl
 80090bc:	4641      	mov	r1, r8
 80090be:	f7f7 fc7d 	bl	80009bc <__aeabi_dcmplt>
 80090c2:	b110      	cbz	r0, 80090ca <_printf_float+0x86>
 80090c4:	232d      	movs	r3, #45	; 0x2d
 80090c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090ca:	4a92      	ldr	r2, [pc, #584]	; (8009314 <_printf_float+0x2d0>)
 80090cc:	4b92      	ldr	r3, [pc, #584]	; (8009318 <_printf_float+0x2d4>)
 80090ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090d2:	bf94      	ite	ls
 80090d4:	4690      	movls	r8, r2
 80090d6:	4698      	movhi	r8, r3
 80090d8:	2303      	movs	r3, #3
 80090da:	f04f 0a00 	mov.w	sl, #0
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	f02b 0304 	bic.w	r3, fp, #4
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	4633      	mov	r3, r6
 80090e8:	4621      	mov	r1, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	9700      	str	r7, [sp, #0]
 80090ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80090f0:	f000 f9d6 	bl	80094a0 <_printf_common>
 80090f4:	3001      	adds	r0, #1
 80090f6:	f040 8090 	bne.w	800921a <_printf_float+0x1d6>
 80090fa:	f04f 30ff 	mov.w	r0, #4294967295
 80090fe:	b011      	add	sp, #68	; 0x44
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	4652      	mov	r2, sl
 8009106:	4643      	mov	r3, r8
 8009108:	4650      	mov	r0, sl
 800910a:	4641      	mov	r1, r8
 800910c:	f7f7 fc7e 	bl	8000a0c <__aeabi_dcmpun>
 8009110:	b148      	cbz	r0, 8009126 <_printf_float+0xe2>
 8009112:	f1b8 0f00 	cmp.w	r8, #0
 8009116:	bfb8      	it	lt
 8009118:	232d      	movlt	r3, #45	; 0x2d
 800911a:	4a80      	ldr	r2, [pc, #512]	; (800931c <_printf_float+0x2d8>)
 800911c:	bfb8      	it	lt
 800911e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009122:	4b7f      	ldr	r3, [pc, #508]	; (8009320 <_printf_float+0x2dc>)
 8009124:	e7d3      	b.n	80090ce <_printf_float+0x8a>
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800912c:	1c5a      	adds	r2, r3, #1
 800912e:	d142      	bne.n	80091b6 <_printf_float+0x172>
 8009130:	2306      	movs	r3, #6
 8009132:	6063      	str	r3, [r4, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	9206      	str	r2, [sp, #24]
 8009138:	aa0e      	add	r2, sp, #56	; 0x38
 800913a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800913e:	aa0d      	add	r2, sp, #52	; 0x34
 8009140:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009144:	9203      	str	r2, [sp, #12]
 8009146:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800914a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800914e:	6023      	str	r3, [r4, #0]
 8009150:	6863      	ldr	r3, [r4, #4]
 8009152:	4652      	mov	r2, sl
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4628      	mov	r0, r5
 8009158:	4643      	mov	r3, r8
 800915a:	910b      	str	r1, [sp, #44]	; 0x2c
 800915c:	f7ff fed6 	bl	8008f0c <__cvt>
 8009160:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009162:	4680      	mov	r8, r0
 8009164:	2947      	cmp	r1, #71	; 0x47
 8009166:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009168:	d108      	bne.n	800917c <_printf_float+0x138>
 800916a:	1cc8      	adds	r0, r1, #3
 800916c:	db02      	blt.n	8009174 <_printf_float+0x130>
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	4299      	cmp	r1, r3
 8009172:	dd40      	ble.n	80091f6 <_printf_float+0x1b2>
 8009174:	f1a9 0902 	sub.w	r9, r9, #2
 8009178:	fa5f f989 	uxtb.w	r9, r9
 800917c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009180:	d81f      	bhi.n	80091c2 <_printf_float+0x17e>
 8009182:	464a      	mov	r2, r9
 8009184:	3901      	subs	r1, #1
 8009186:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800918a:	910d      	str	r1, [sp, #52]	; 0x34
 800918c:	f7ff ff1d 	bl	8008fca <__exponent>
 8009190:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009192:	4682      	mov	sl, r0
 8009194:	1813      	adds	r3, r2, r0
 8009196:	2a01      	cmp	r2, #1
 8009198:	6123      	str	r3, [r4, #16]
 800919a:	dc02      	bgt.n	80091a2 <_printf_float+0x15e>
 800919c:	6822      	ldr	r2, [r4, #0]
 800919e:	07d2      	lsls	r2, r2, #31
 80091a0:	d501      	bpl.n	80091a6 <_printf_float+0x162>
 80091a2:	3301      	adds	r3, #1
 80091a4:	6123      	str	r3, [r4, #16]
 80091a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d09b      	beq.n	80090e6 <_printf_float+0xa2>
 80091ae:	232d      	movs	r3, #45	; 0x2d
 80091b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091b4:	e797      	b.n	80090e6 <_printf_float+0xa2>
 80091b6:	2947      	cmp	r1, #71	; 0x47
 80091b8:	d1bc      	bne.n	8009134 <_printf_float+0xf0>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1ba      	bne.n	8009134 <_printf_float+0xf0>
 80091be:	2301      	movs	r3, #1
 80091c0:	e7b7      	b.n	8009132 <_printf_float+0xee>
 80091c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091c6:	d118      	bne.n	80091fa <_printf_float+0x1b6>
 80091c8:	2900      	cmp	r1, #0
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	dd0b      	ble.n	80091e6 <_printf_float+0x1a2>
 80091ce:	6121      	str	r1, [r4, #16]
 80091d0:	b913      	cbnz	r3, 80091d8 <_printf_float+0x194>
 80091d2:	6822      	ldr	r2, [r4, #0]
 80091d4:	07d0      	lsls	r0, r2, #31
 80091d6:	d502      	bpl.n	80091de <_printf_float+0x19a>
 80091d8:	3301      	adds	r3, #1
 80091da:	440b      	add	r3, r1
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	f04f 0a00 	mov.w	sl, #0
 80091e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80091e4:	e7df      	b.n	80091a6 <_printf_float+0x162>
 80091e6:	b913      	cbnz	r3, 80091ee <_printf_float+0x1aa>
 80091e8:	6822      	ldr	r2, [r4, #0]
 80091ea:	07d2      	lsls	r2, r2, #31
 80091ec:	d501      	bpl.n	80091f2 <_printf_float+0x1ae>
 80091ee:	3302      	adds	r3, #2
 80091f0:	e7f4      	b.n	80091dc <_printf_float+0x198>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e7f2      	b.n	80091dc <_printf_float+0x198>
 80091f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091fc:	4299      	cmp	r1, r3
 80091fe:	db05      	blt.n	800920c <_printf_float+0x1c8>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	6121      	str	r1, [r4, #16]
 8009204:	07d8      	lsls	r0, r3, #31
 8009206:	d5ea      	bpl.n	80091de <_printf_float+0x19a>
 8009208:	1c4b      	adds	r3, r1, #1
 800920a:	e7e7      	b.n	80091dc <_printf_float+0x198>
 800920c:	2900      	cmp	r1, #0
 800920e:	bfcc      	ite	gt
 8009210:	2201      	movgt	r2, #1
 8009212:	f1c1 0202 	rsble	r2, r1, #2
 8009216:	4413      	add	r3, r2
 8009218:	e7e0      	b.n	80091dc <_printf_float+0x198>
 800921a:	6823      	ldr	r3, [r4, #0]
 800921c:	055a      	lsls	r2, r3, #21
 800921e:	d407      	bmi.n	8009230 <_printf_float+0x1ec>
 8009220:	6923      	ldr	r3, [r4, #16]
 8009222:	4642      	mov	r2, r8
 8009224:	4631      	mov	r1, r6
 8009226:	4628      	mov	r0, r5
 8009228:	47b8      	blx	r7
 800922a:	3001      	adds	r0, #1
 800922c:	d12b      	bne.n	8009286 <_printf_float+0x242>
 800922e:	e764      	b.n	80090fa <_printf_float+0xb6>
 8009230:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009234:	f240 80dd 	bls.w	80093f2 <_printf_float+0x3ae>
 8009238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800923c:	2200      	movs	r2, #0
 800923e:	2300      	movs	r3, #0
 8009240:	f7f7 fbb2 	bl	80009a8 <__aeabi_dcmpeq>
 8009244:	2800      	cmp	r0, #0
 8009246:	d033      	beq.n	80092b0 <_printf_float+0x26c>
 8009248:	2301      	movs	r3, #1
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	4a35      	ldr	r2, [pc, #212]	; (8009324 <_printf_float+0x2e0>)
 8009250:	47b8      	blx	r7
 8009252:	3001      	adds	r0, #1
 8009254:	f43f af51 	beq.w	80090fa <_printf_float+0xb6>
 8009258:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800925c:	429a      	cmp	r2, r3
 800925e:	db02      	blt.n	8009266 <_printf_float+0x222>
 8009260:	6823      	ldr	r3, [r4, #0]
 8009262:	07d8      	lsls	r0, r3, #31
 8009264:	d50f      	bpl.n	8009286 <_printf_float+0x242>
 8009266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800926a:	4631      	mov	r1, r6
 800926c:	4628      	mov	r0, r5
 800926e:	47b8      	blx	r7
 8009270:	3001      	adds	r0, #1
 8009272:	f43f af42 	beq.w	80090fa <_printf_float+0xb6>
 8009276:	f04f 0800 	mov.w	r8, #0
 800927a:	f104 091a 	add.w	r9, r4, #26
 800927e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009280:	3b01      	subs	r3, #1
 8009282:	4543      	cmp	r3, r8
 8009284:	dc09      	bgt.n	800929a <_printf_float+0x256>
 8009286:	6823      	ldr	r3, [r4, #0]
 8009288:	079b      	lsls	r3, r3, #30
 800928a:	f100 8104 	bmi.w	8009496 <_printf_float+0x452>
 800928e:	68e0      	ldr	r0, [r4, #12]
 8009290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009292:	4298      	cmp	r0, r3
 8009294:	bfb8      	it	lt
 8009296:	4618      	movlt	r0, r3
 8009298:	e731      	b.n	80090fe <_printf_float+0xba>
 800929a:	2301      	movs	r3, #1
 800929c:	464a      	mov	r2, r9
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	f43f af28 	beq.w	80090fa <_printf_float+0xb6>
 80092aa:	f108 0801 	add.w	r8, r8, #1
 80092ae:	e7e6      	b.n	800927e <_printf_float+0x23a>
 80092b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dc38      	bgt.n	8009328 <_printf_float+0x2e4>
 80092b6:	2301      	movs	r3, #1
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	4a19      	ldr	r2, [pc, #100]	; (8009324 <_printf_float+0x2e0>)
 80092be:	47b8      	blx	r7
 80092c0:	3001      	adds	r0, #1
 80092c2:	f43f af1a 	beq.w	80090fa <_printf_float+0xb6>
 80092c6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80092ca:	4313      	orrs	r3, r2
 80092cc:	d102      	bne.n	80092d4 <_printf_float+0x290>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	07d9      	lsls	r1, r3, #31
 80092d2:	d5d8      	bpl.n	8009286 <_printf_float+0x242>
 80092d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092d8:	4631      	mov	r1, r6
 80092da:	4628      	mov	r0, r5
 80092dc:	47b8      	blx	r7
 80092de:	3001      	adds	r0, #1
 80092e0:	f43f af0b 	beq.w	80090fa <_printf_float+0xb6>
 80092e4:	f04f 0900 	mov.w	r9, #0
 80092e8:	f104 0a1a 	add.w	sl, r4, #26
 80092ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ee:	425b      	negs	r3, r3
 80092f0:	454b      	cmp	r3, r9
 80092f2:	dc01      	bgt.n	80092f8 <_printf_float+0x2b4>
 80092f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092f6:	e794      	b.n	8009222 <_printf_float+0x1de>
 80092f8:	2301      	movs	r3, #1
 80092fa:	4652      	mov	r2, sl
 80092fc:	4631      	mov	r1, r6
 80092fe:	4628      	mov	r0, r5
 8009300:	47b8      	blx	r7
 8009302:	3001      	adds	r0, #1
 8009304:	f43f aef9 	beq.w	80090fa <_printf_float+0xb6>
 8009308:	f109 0901 	add.w	r9, r9, #1
 800930c:	e7ee      	b.n	80092ec <_printf_float+0x2a8>
 800930e:	bf00      	nop
 8009310:	7fefffff 	.word	0x7fefffff
 8009314:	0800bc8e 	.word	0x0800bc8e
 8009318:	0800bc92 	.word	0x0800bc92
 800931c:	0800bc96 	.word	0x0800bc96
 8009320:	0800bc9a 	.word	0x0800bc9a
 8009324:	0800bc9e 	.word	0x0800bc9e
 8009328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800932a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800932c:	429a      	cmp	r2, r3
 800932e:	bfa8      	it	ge
 8009330:	461a      	movge	r2, r3
 8009332:	2a00      	cmp	r2, #0
 8009334:	4691      	mov	r9, r2
 8009336:	dc37      	bgt.n	80093a8 <_printf_float+0x364>
 8009338:	f04f 0b00 	mov.w	fp, #0
 800933c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009340:	f104 021a 	add.w	r2, r4, #26
 8009344:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009348:	ebaa 0309 	sub.w	r3, sl, r9
 800934c:	455b      	cmp	r3, fp
 800934e:	dc33      	bgt.n	80093b8 <_printf_float+0x374>
 8009350:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009354:	429a      	cmp	r2, r3
 8009356:	db3b      	blt.n	80093d0 <_printf_float+0x38c>
 8009358:	6823      	ldr	r3, [r4, #0]
 800935a:	07da      	lsls	r2, r3, #31
 800935c:	d438      	bmi.n	80093d0 <_printf_float+0x38c>
 800935e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009362:	eba2 0903 	sub.w	r9, r2, r3
 8009366:	eba2 020a 	sub.w	r2, r2, sl
 800936a:	4591      	cmp	r9, r2
 800936c:	bfa8      	it	ge
 800936e:	4691      	movge	r9, r2
 8009370:	f1b9 0f00 	cmp.w	r9, #0
 8009374:	dc34      	bgt.n	80093e0 <_printf_float+0x39c>
 8009376:	f04f 0800 	mov.w	r8, #0
 800937a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800937e:	f104 0a1a 	add.w	sl, r4, #26
 8009382:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009386:	1a9b      	subs	r3, r3, r2
 8009388:	eba3 0309 	sub.w	r3, r3, r9
 800938c:	4543      	cmp	r3, r8
 800938e:	f77f af7a 	ble.w	8009286 <_printf_float+0x242>
 8009392:	2301      	movs	r3, #1
 8009394:	4652      	mov	r2, sl
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f aeac 	beq.w	80090fa <_printf_float+0xb6>
 80093a2:	f108 0801 	add.w	r8, r8, #1
 80093a6:	e7ec      	b.n	8009382 <_printf_float+0x33e>
 80093a8:	4613      	mov	r3, r2
 80093aa:	4631      	mov	r1, r6
 80093ac:	4642      	mov	r2, r8
 80093ae:	4628      	mov	r0, r5
 80093b0:	47b8      	blx	r7
 80093b2:	3001      	adds	r0, #1
 80093b4:	d1c0      	bne.n	8009338 <_printf_float+0x2f4>
 80093b6:	e6a0      	b.n	80090fa <_printf_float+0xb6>
 80093b8:	2301      	movs	r3, #1
 80093ba:	4631      	mov	r1, r6
 80093bc:	4628      	mov	r0, r5
 80093be:	920b      	str	r2, [sp, #44]	; 0x2c
 80093c0:	47b8      	blx	r7
 80093c2:	3001      	adds	r0, #1
 80093c4:	f43f ae99 	beq.w	80090fa <_printf_float+0xb6>
 80093c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093ca:	f10b 0b01 	add.w	fp, fp, #1
 80093ce:	e7b9      	b.n	8009344 <_printf_float+0x300>
 80093d0:	4631      	mov	r1, r6
 80093d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d6:	4628      	mov	r0, r5
 80093d8:	47b8      	blx	r7
 80093da:	3001      	adds	r0, #1
 80093dc:	d1bf      	bne.n	800935e <_printf_float+0x31a>
 80093de:	e68c      	b.n	80090fa <_printf_float+0xb6>
 80093e0:	464b      	mov	r3, r9
 80093e2:	4631      	mov	r1, r6
 80093e4:	4628      	mov	r0, r5
 80093e6:	eb08 020a 	add.w	r2, r8, sl
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	d1c2      	bne.n	8009376 <_printf_float+0x332>
 80093f0:	e683      	b.n	80090fa <_printf_float+0xb6>
 80093f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f4:	2a01      	cmp	r2, #1
 80093f6:	dc01      	bgt.n	80093fc <_printf_float+0x3b8>
 80093f8:	07db      	lsls	r3, r3, #31
 80093fa:	d539      	bpl.n	8009470 <_printf_float+0x42c>
 80093fc:	2301      	movs	r3, #1
 80093fe:	4642      	mov	r2, r8
 8009400:	4631      	mov	r1, r6
 8009402:	4628      	mov	r0, r5
 8009404:	47b8      	blx	r7
 8009406:	3001      	adds	r0, #1
 8009408:	f43f ae77 	beq.w	80090fa <_printf_float+0xb6>
 800940c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009410:	4631      	mov	r1, r6
 8009412:	4628      	mov	r0, r5
 8009414:	47b8      	blx	r7
 8009416:	3001      	adds	r0, #1
 8009418:	f43f ae6f 	beq.w	80090fa <_printf_float+0xb6>
 800941c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009420:	2200      	movs	r2, #0
 8009422:	2300      	movs	r3, #0
 8009424:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009428:	f7f7 fabe 	bl	80009a8 <__aeabi_dcmpeq>
 800942c:	b9d8      	cbnz	r0, 8009466 <_printf_float+0x422>
 800942e:	f109 33ff 	add.w	r3, r9, #4294967295
 8009432:	f108 0201 	add.w	r2, r8, #1
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	d10e      	bne.n	800945e <_printf_float+0x41a>
 8009440:	e65b      	b.n	80090fa <_printf_float+0xb6>
 8009442:	2301      	movs	r3, #1
 8009444:	464a      	mov	r2, r9
 8009446:	4631      	mov	r1, r6
 8009448:	4628      	mov	r0, r5
 800944a:	47b8      	blx	r7
 800944c:	3001      	adds	r0, #1
 800944e:	f43f ae54 	beq.w	80090fa <_printf_float+0xb6>
 8009452:	f108 0801 	add.w	r8, r8, #1
 8009456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009458:	3b01      	subs	r3, #1
 800945a:	4543      	cmp	r3, r8
 800945c:	dcf1      	bgt.n	8009442 <_printf_float+0x3fe>
 800945e:	4653      	mov	r3, sl
 8009460:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009464:	e6de      	b.n	8009224 <_printf_float+0x1e0>
 8009466:	f04f 0800 	mov.w	r8, #0
 800946a:	f104 091a 	add.w	r9, r4, #26
 800946e:	e7f2      	b.n	8009456 <_printf_float+0x412>
 8009470:	2301      	movs	r3, #1
 8009472:	4642      	mov	r2, r8
 8009474:	e7df      	b.n	8009436 <_printf_float+0x3f2>
 8009476:	2301      	movs	r3, #1
 8009478:	464a      	mov	r2, r9
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae3a 	beq.w	80090fa <_printf_float+0xb6>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	68e3      	ldr	r3, [r4, #12]
 800948c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800948e:	1a5b      	subs	r3, r3, r1
 8009490:	4543      	cmp	r3, r8
 8009492:	dcf0      	bgt.n	8009476 <_printf_float+0x432>
 8009494:	e6fb      	b.n	800928e <_printf_float+0x24a>
 8009496:	f04f 0800 	mov.w	r8, #0
 800949a:	f104 0919 	add.w	r9, r4, #25
 800949e:	e7f4      	b.n	800948a <_printf_float+0x446>

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4616      	mov	r6, r2
 80094a6:	4699      	mov	r9, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	4607      	mov	r7, r0
 80094ae:	4293      	cmp	r3, r2
 80094b0:	bfb8      	it	lt
 80094b2:	4613      	movlt	r3, r2
 80094b4:	6033      	str	r3, [r6, #0]
 80094b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094ba:	460c      	mov	r4, r1
 80094bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094c0:	b10a      	cbz	r2, 80094c6 <_printf_common+0x26>
 80094c2:	3301      	adds	r3, #1
 80094c4:	6033      	str	r3, [r6, #0]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	0699      	lsls	r1, r3, #26
 80094ca:	bf42      	ittt	mi
 80094cc:	6833      	ldrmi	r3, [r6, #0]
 80094ce:	3302      	addmi	r3, #2
 80094d0:	6033      	strmi	r3, [r6, #0]
 80094d2:	6825      	ldr	r5, [r4, #0]
 80094d4:	f015 0506 	ands.w	r5, r5, #6
 80094d8:	d106      	bne.n	80094e8 <_printf_common+0x48>
 80094da:	f104 0a19 	add.w	sl, r4, #25
 80094de:	68e3      	ldr	r3, [r4, #12]
 80094e0:	6832      	ldr	r2, [r6, #0]
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	42ab      	cmp	r3, r5
 80094e6:	dc2b      	bgt.n	8009540 <_printf_common+0xa0>
 80094e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094ec:	1e13      	subs	r3, r2, #0
 80094ee:	6822      	ldr	r2, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	2301      	movne	r3, #1
 80094f4:	0692      	lsls	r2, r2, #26
 80094f6:	d430      	bmi.n	800955a <_printf_common+0xba>
 80094f8:	4649      	mov	r1, r9
 80094fa:	4638      	mov	r0, r7
 80094fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009500:	47c0      	blx	r8
 8009502:	3001      	adds	r0, #1
 8009504:	d023      	beq.n	800954e <_printf_common+0xae>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	6922      	ldr	r2, [r4, #16]
 800950a:	f003 0306 	and.w	r3, r3, #6
 800950e:	2b04      	cmp	r3, #4
 8009510:	bf14      	ite	ne
 8009512:	2500      	movne	r5, #0
 8009514:	6833      	ldreq	r3, [r6, #0]
 8009516:	f04f 0600 	mov.w	r6, #0
 800951a:	bf08      	it	eq
 800951c:	68e5      	ldreq	r5, [r4, #12]
 800951e:	f104 041a 	add.w	r4, r4, #26
 8009522:	bf08      	it	eq
 8009524:	1aed      	subeq	r5, r5, r3
 8009526:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800952a:	bf08      	it	eq
 800952c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009530:	4293      	cmp	r3, r2
 8009532:	bfc4      	itt	gt
 8009534:	1a9b      	subgt	r3, r3, r2
 8009536:	18ed      	addgt	r5, r5, r3
 8009538:	42b5      	cmp	r5, r6
 800953a:	d11a      	bne.n	8009572 <_printf_common+0xd2>
 800953c:	2000      	movs	r0, #0
 800953e:	e008      	b.n	8009552 <_printf_common+0xb2>
 8009540:	2301      	movs	r3, #1
 8009542:	4652      	mov	r2, sl
 8009544:	4649      	mov	r1, r9
 8009546:	4638      	mov	r0, r7
 8009548:	47c0      	blx	r8
 800954a:	3001      	adds	r0, #1
 800954c:	d103      	bne.n	8009556 <_printf_common+0xb6>
 800954e:	f04f 30ff 	mov.w	r0, #4294967295
 8009552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009556:	3501      	adds	r5, #1
 8009558:	e7c1      	b.n	80094de <_printf_common+0x3e>
 800955a:	2030      	movs	r0, #48	; 0x30
 800955c:	18e1      	adds	r1, r4, r3
 800955e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009568:	4422      	add	r2, r4
 800956a:	3302      	adds	r3, #2
 800956c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009570:	e7c2      	b.n	80094f8 <_printf_common+0x58>
 8009572:	2301      	movs	r3, #1
 8009574:	4622      	mov	r2, r4
 8009576:	4649      	mov	r1, r9
 8009578:	4638      	mov	r0, r7
 800957a:	47c0      	blx	r8
 800957c:	3001      	adds	r0, #1
 800957e:	d0e6      	beq.n	800954e <_printf_common+0xae>
 8009580:	3601      	adds	r6, #1
 8009582:	e7d9      	b.n	8009538 <_printf_common+0x98>

08009584 <_printf_i>:
 8009584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	7e0f      	ldrb	r7, [r1, #24]
 800958a:	4691      	mov	r9, r2
 800958c:	2f78      	cmp	r7, #120	; 0x78
 800958e:	4680      	mov	r8, r0
 8009590:	460c      	mov	r4, r1
 8009592:	469a      	mov	sl, r3
 8009594:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800959a:	d807      	bhi.n	80095ac <_printf_i+0x28>
 800959c:	2f62      	cmp	r7, #98	; 0x62
 800959e:	d80a      	bhi.n	80095b6 <_printf_i+0x32>
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	f000 80d5 	beq.w	8009750 <_printf_i+0x1cc>
 80095a6:	2f58      	cmp	r7, #88	; 0x58
 80095a8:	f000 80c1 	beq.w	800972e <_printf_i+0x1aa>
 80095ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095b4:	e03a      	b.n	800962c <_printf_i+0xa8>
 80095b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ba:	2b15      	cmp	r3, #21
 80095bc:	d8f6      	bhi.n	80095ac <_printf_i+0x28>
 80095be:	a101      	add	r1, pc, #4	; (adr r1, 80095c4 <_printf_i+0x40>)
 80095c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095c4:	0800961d 	.word	0x0800961d
 80095c8:	08009631 	.word	0x08009631
 80095cc:	080095ad 	.word	0x080095ad
 80095d0:	080095ad 	.word	0x080095ad
 80095d4:	080095ad 	.word	0x080095ad
 80095d8:	080095ad 	.word	0x080095ad
 80095dc:	08009631 	.word	0x08009631
 80095e0:	080095ad 	.word	0x080095ad
 80095e4:	080095ad 	.word	0x080095ad
 80095e8:	080095ad 	.word	0x080095ad
 80095ec:	080095ad 	.word	0x080095ad
 80095f0:	08009737 	.word	0x08009737
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080096f1 	.word	0x080096f1
 80095fc:	080095ad 	.word	0x080095ad
 8009600:	080095ad 	.word	0x080095ad
 8009604:	08009759 	.word	0x08009759
 8009608:	080095ad 	.word	0x080095ad
 800960c:	0800965d 	.word	0x0800965d
 8009610:	080095ad 	.word	0x080095ad
 8009614:	080095ad 	.word	0x080095ad
 8009618:	080096f9 	.word	0x080096f9
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	1d1a      	adds	r2, r3, #4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	602a      	str	r2, [r5, #0]
 8009624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800962c:	2301      	movs	r3, #1
 800962e:	e0a0      	b.n	8009772 <_printf_i+0x1ee>
 8009630:	6820      	ldr	r0, [r4, #0]
 8009632:	682b      	ldr	r3, [r5, #0]
 8009634:	0607      	lsls	r7, r0, #24
 8009636:	f103 0104 	add.w	r1, r3, #4
 800963a:	6029      	str	r1, [r5, #0]
 800963c:	d501      	bpl.n	8009642 <_printf_i+0xbe>
 800963e:	681e      	ldr	r6, [r3, #0]
 8009640:	e003      	b.n	800964a <_printf_i+0xc6>
 8009642:	0646      	lsls	r6, r0, #25
 8009644:	d5fb      	bpl.n	800963e <_printf_i+0xba>
 8009646:	f9b3 6000 	ldrsh.w	r6, [r3]
 800964a:	2e00      	cmp	r6, #0
 800964c:	da03      	bge.n	8009656 <_printf_i+0xd2>
 800964e:	232d      	movs	r3, #45	; 0x2d
 8009650:	4276      	negs	r6, r6
 8009652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009656:	230a      	movs	r3, #10
 8009658:	4859      	ldr	r0, [pc, #356]	; (80097c0 <_printf_i+0x23c>)
 800965a:	e012      	b.n	8009682 <_printf_i+0xfe>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	6820      	ldr	r0, [r4, #0]
 8009660:	1d19      	adds	r1, r3, #4
 8009662:	6029      	str	r1, [r5, #0]
 8009664:	0605      	lsls	r5, r0, #24
 8009666:	d501      	bpl.n	800966c <_printf_i+0xe8>
 8009668:	681e      	ldr	r6, [r3, #0]
 800966a:	e002      	b.n	8009672 <_printf_i+0xee>
 800966c:	0641      	lsls	r1, r0, #25
 800966e:	d5fb      	bpl.n	8009668 <_printf_i+0xe4>
 8009670:	881e      	ldrh	r6, [r3, #0]
 8009672:	2f6f      	cmp	r7, #111	; 0x6f
 8009674:	bf0c      	ite	eq
 8009676:	2308      	moveq	r3, #8
 8009678:	230a      	movne	r3, #10
 800967a:	4851      	ldr	r0, [pc, #324]	; (80097c0 <_printf_i+0x23c>)
 800967c:	2100      	movs	r1, #0
 800967e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009682:	6865      	ldr	r5, [r4, #4]
 8009684:	2d00      	cmp	r5, #0
 8009686:	bfa8      	it	ge
 8009688:	6821      	ldrge	r1, [r4, #0]
 800968a:	60a5      	str	r5, [r4, #8]
 800968c:	bfa4      	itt	ge
 800968e:	f021 0104 	bicge.w	r1, r1, #4
 8009692:	6021      	strge	r1, [r4, #0]
 8009694:	b90e      	cbnz	r6, 800969a <_printf_i+0x116>
 8009696:	2d00      	cmp	r5, #0
 8009698:	d04b      	beq.n	8009732 <_printf_i+0x1ae>
 800969a:	4615      	mov	r5, r2
 800969c:	fbb6 f1f3 	udiv	r1, r6, r3
 80096a0:	fb03 6711 	mls	r7, r3, r1, r6
 80096a4:	5dc7      	ldrb	r7, [r0, r7]
 80096a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096aa:	4637      	mov	r7, r6
 80096ac:	42bb      	cmp	r3, r7
 80096ae:	460e      	mov	r6, r1
 80096b0:	d9f4      	bls.n	800969c <_printf_i+0x118>
 80096b2:	2b08      	cmp	r3, #8
 80096b4:	d10b      	bne.n	80096ce <_printf_i+0x14a>
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	07de      	lsls	r6, r3, #31
 80096ba:	d508      	bpl.n	80096ce <_printf_i+0x14a>
 80096bc:	6923      	ldr	r3, [r4, #16]
 80096be:	6861      	ldr	r1, [r4, #4]
 80096c0:	4299      	cmp	r1, r3
 80096c2:	bfde      	ittt	le
 80096c4:	2330      	movle	r3, #48	; 0x30
 80096c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ce:	1b52      	subs	r2, r2, r5
 80096d0:	6122      	str	r2, [r4, #16]
 80096d2:	464b      	mov	r3, r9
 80096d4:	4621      	mov	r1, r4
 80096d6:	4640      	mov	r0, r8
 80096d8:	f8cd a000 	str.w	sl, [sp]
 80096dc:	aa03      	add	r2, sp, #12
 80096de:	f7ff fedf 	bl	80094a0 <_printf_common>
 80096e2:	3001      	adds	r0, #1
 80096e4:	d14a      	bne.n	800977c <_printf_i+0x1f8>
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ea:	b004      	add	sp, #16
 80096ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	f043 0320 	orr.w	r3, r3, #32
 80096f6:	6023      	str	r3, [r4, #0]
 80096f8:	2778      	movs	r7, #120	; 0x78
 80096fa:	4832      	ldr	r0, [pc, #200]	; (80097c4 <_printf_i+0x240>)
 80096fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009700:	6823      	ldr	r3, [r4, #0]
 8009702:	6829      	ldr	r1, [r5, #0]
 8009704:	061f      	lsls	r7, r3, #24
 8009706:	f851 6b04 	ldr.w	r6, [r1], #4
 800970a:	d402      	bmi.n	8009712 <_printf_i+0x18e>
 800970c:	065f      	lsls	r7, r3, #25
 800970e:	bf48      	it	mi
 8009710:	b2b6      	uxthmi	r6, r6
 8009712:	07df      	lsls	r7, r3, #31
 8009714:	bf48      	it	mi
 8009716:	f043 0320 	orrmi.w	r3, r3, #32
 800971a:	6029      	str	r1, [r5, #0]
 800971c:	bf48      	it	mi
 800971e:	6023      	strmi	r3, [r4, #0]
 8009720:	b91e      	cbnz	r6, 800972a <_printf_i+0x1a6>
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	f023 0320 	bic.w	r3, r3, #32
 8009728:	6023      	str	r3, [r4, #0]
 800972a:	2310      	movs	r3, #16
 800972c:	e7a6      	b.n	800967c <_printf_i+0xf8>
 800972e:	4824      	ldr	r0, [pc, #144]	; (80097c0 <_printf_i+0x23c>)
 8009730:	e7e4      	b.n	80096fc <_printf_i+0x178>
 8009732:	4615      	mov	r5, r2
 8009734:	e7bd      	b.n	80096b2 <_printf_i+0x12e>
 8009736:	682b      	ldr	r3, [r5, #0]
 8009738:	6826      	ldr	r6, [r4, #0]
 800973a:	1d18      	adds	r0, r3, #4
 800973c:	6961      	ldr	r1, [r4, #20]
 800973e:	6028      	str	r0, [r5, #0]
 8009740:	0635      	lsls	r5, r6, #24
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	d501      	bpl.n	800974a <_printf_i+0x1c6>
 8009746:	6019      	str	r1, [r3, #0]
 8009748:	e002      	b.n	8009750 <_printf_i+0x1cc>
 800974a:	0670      	lsls	r0, r6, #25
 800974c:	d5fb      	bpl.n	8009746 <_printf_i+0x1c2>
 800974e:	8019      	strh	r1, [r3, #0]
 8009750:	2300      	movs	r3, #0
 8009752:	4615      	mov	r5, r2
 8009754:	6123      	str	r3, [r4, #16]
 8009756:	e7bc      	b.n	80096d2 <_printf_i+0x14e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	2100      	movs	r1, #0
 800975c:	1d1a      	adds	r2, r3, #4
 800975e:	602a      	str	r2, [r5, #0]
 8009760:	681d      	ldr	r5, [r3, #0]
 8009762:	6862      	ldr	r2, [r4, #4]
 8009764:	4628      	mov	r0, r5
 8009766:	f000 f9e6 	bl	8009b36 <memchr>
 800976a:	b108      	cbz	r0, 8009770 <_printf_i+0x1ec>
 800976c:	1b40      	subs	r0, r0, r5
 800976e:	6060      	str	r0, [r4, #4]
 8009770:	6863      	ldr	r3, [r4, #4]
 8009772:	6123      	str	r3, [r4, #16]
 8009774:	2300      	movs	r3, #0
 8009776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800977a:	e7aa      	b.n	80096d2 <_printf_i+0x14e>
 800977c:	462a      	mov	r2, r5
 800977e:	4649      	mov	r1, r9
 8009780:	4640      	mov	r0, r8
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	47d0      	blx	sl
 8009786:	3001      	adds	r0, #1
 8009788:	d0ad      	beq.n	80096e6 <_printf_i+0x162>
 800978a:	6823      	ldr	r3, [r4, #0]
 800978c:	079b      	lsls	r3, r3, #30
 800978e:	d413      	bmi.n	80097b8 <_printf_i+0x234>
 8009790:	68e0      	ldr	r0, [r4, #12]
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	4298      	cmp	r0, r3
 8009796:	bfb8      	it	lt
 8009798:	4618      	movlt	r0, r3
 800979a:	e7a6      	b.n	80096ea <_printf_i+0x166>
 800979c:	2301      	movs	r3, #1
 800979e:	4632      	mov	r2, r6
 80097a0:	4649      	mov	r1, r9
 80097a2:	4640      	mov	r0, r8
 80097a4:	47d0      	blx	sl
 80097a6:	3001      	adds	r0, #1
 80097a8:	d09d      	beq.n	80096e6 <_printf_i+0x162>
 80097aa:	3501      	adds	r5, #1
 80097ac:	68e3      	ldr	r3, [r4, #12]
 80097ae:	9903      	ldr	r1, [sp, #12]
 80097b0:	1a5b      	subs	r3, r3, r1
 80097b2:	42ab      	cmp	r3, r5
 80097b4:	dcf2      	bgt.n	800979c <_printf_i+0x218>
 80097b6:	e7eb      	b.n	8009790 <_printf_i+0x20c>
 80097b8:	2500      	movs	r5, #0
 80097ba:	f104 0619 	add.w	r6, r4, #25
 80097be:	e7f5      	b.n	80097ac <_printf_i+0x228>
 80097c0:	0800bca0 	.word	0x0800bca0
 80097c4:	0800bcb1 	.word	0x0800bcb1

080097c8 <std>:
 80097c8:	2300      	movs	r3, #0
 80097ca:	b510      	push	{r4, lr}
 80097cc:	4604      	mov	r4, r0
 80097ce:	e9c0 3300 	strd	r3, r3, [r0]
 80097d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097d6:	6083      	str	r3, [r0, #8]
 80097d8:	8181      	strh	r1, [r0, #12]
 80097da:	6643      	str	r3, [r0, #100]	; 0x64
 80097dc:	81c2      	strh	r2, [r0, #14]
 80097de:	6183      	str	r3, [r0, #24]
 80097e0:	4619      	mov	r1, r3
 80097e2:	2208      	movs	r2, #8
 80097e4:	305c      	adds	r0, #92	; 0x5c
 80097e6:	f000 f914 	bl	8009a12 <memset>
 80097ea:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <std+0x58>)
 80097ec:	6224      	str	r4, [r4, #32]
 80097ee:	6263      	str	r3, [r4, #36]	; 0x24
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <std+0x5c>)
 80097f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80097f4:	4b0c      	ldr	r3, [pc, #48]	; (8009828 <std+0x60>)
 80097f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <std+0x64>)
 80097fa:	6323      	str	r3, [r4, #48]	; 0x30
 80097fc:	4b0c      	ldr	r3, [pc, #48]	; (8009830 <std+0x68>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d006      	beq.n	8009810 <std+0x48>
 8009802:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009806:	4294      	cmp	r4, r2
 8009808:	d002      	beq.n	8009810 <std+0x48>
 800980a:	33d0      	adds	r3, #208	; 0xd0
 800980c:	429c      	cmp	r4, r3
 800980e:	d105      	bne.n	800981c <std+0x54>
 8009810:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009818:	f000 b98a 	b.w	8009b30 <__retarget_lock_init_recursive>
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	0800998d 	.word	0x0800998d
 8009824:	080099af 	.word	0x080099af
 8009828:	080099e7 	.word	0x080099e7
 800982c:	08009a0b 	.word	0x08009a0b
 8009830:	20000410 	.word	0x20000410

08009834 <stdio_exit_handler>:
 8009834:	4a02      	ldr	r2, [pc, #8]	; (8009840 <stdio_exit_handler+0xc>)
 8009836:	4903      	ldr	r1, [pc, #12]	; (8009844 <stdio_exit_handler+0x10>)
 8009838:	4803      	ldr	r0, [pc, #12]	; (8009848 <stdio_exit_handler+0x14>)
 800983a:	f000 b869 	b.w	8009910 <_fwalk_sglue>
 800983e:	bf00      	nop
 8009840:	2000003c 	.word	0x2000003c
 8009844:	0800b4e5 	.word	0x0800b4e5
 8009848:	20000048 	.word	0x20000048

0800984c <cleanup_stdio>:
 800984c:	6841      	ldr	r1, [r0, #4]
 800984e:	4b0c      	ldr	r3, [pc, #48]	; (8009880 <cleanup_stdio+0x34>)
 8009850:	b510      	push	{r4, lr}
 8009852:	4299      	cmp	r1, r3
 8009854:	4604      	mov	r4, r0
 8009856:	d001      	beq.n	800985c <cleanup_stdio+0x10>
 8009858:	f001 fe44 	bl	800b4e4 <_fflush_r>
 800985c:	68a1      	ldr	r1, [r4, #8]
 800985e:	4b09      	ldr	r3, [pc, #36]	; (8009884 <cleanup_stdio+0x38>)
 8009860:	4299      	cmp	r1, r3
 8009862:	d002      	beq.n	800986a <cleanup_stdio+0x1e>
 8009864:	4620      	mov	r0, r4
 8009866:	f001 fe3d 	bl	800b4e4 <_fflush_r>
 800986a:	68e1      	ldr	r1, [r4, #12]
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <cleanup_stdio+0x3c>)
 800986e:	4299      	cmp	r1, r3
 8009870:	d004      	beq.n	800987c <cleanup_stdio+0x30>
 8009872:	4620      	mov	r0, r4
 8009874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009878:	f001 be34 	b.w	800b4e4 <_fflush_r>
 800987c:	bd10      	pop	{r4, pc}
 800987e:	bf00      	nop
 8009880:	20000410 	.word	0x20000410
 8009884:	20000478 	.word	0x20000478
 8009888:	200004e0 	.word	0x200004e0

0800988c <global_stdio_init.part.0>:
 800988c:	b510      	push	{r4, lr}
 800988e:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <global_stdio_init.part.0+0x30>)
 8009890:	4c0b      	ldr	r4, [pc, #44]	; (80098c0 <global_stdio_init.part.0+0x34>)
 8009892:	4a0c      	ldr	r2, [pc, #48]	; (80098c4 <global_stdio_init.part.0+0x38>)
 8009894:	4620      	mov	r0, r4
 8009896:	601a      	str	r2, [r3, #0]
 8009898:	2104      	movs	r1, #4
 800989a:	2200      	movs	r2, #0
 800989c:	f7ff ff94 	bl	80097c8 <std>
 80098a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80098a4:	2201      	movs	r2, #1
 80098a6:	2109      	movs	r1, #9
 80098a8:	f7ff ff8e 	bl	80097c8 <std>
 80098ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80098b0:	2202      	movs	r2, #2
 80098b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b6:	2112      	movs	r1, #18
 80098b8:	f7ff bf86 	b.w	80097c8 <std>
 80098bc:	20000548 	.word	0x20000548
 80098c0:	20000410 	.word	0x20000410
 80098c4:	08009835 	.word	0x08009835

080098c8 <__sfp_lock_acquire>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__sfp_lock_acquire+0x8>)
 80098ca:	f000 b932 	b.w	8009b32 <__retarget_lock_acquire_recursive>
 80098ce:	bf00      	nop
 80098d0:	20000551 	.word	0x20000551

080098d4 <__sfp_lock_release>:
 80098d4:	4801      	ldr	r0, [pc, #4]	; (80098dc <__sfp_lock_release+0x8>)
 80098d6:	f000 b92d 	b.w	8009b34 <__retarget_lock_release_recursive>
 80098da:	bf00      	nop
 80098dc:	20000551 	.word	0x20000551

080098e0 <__sinit>:
 80098e0:	b510      	push	{r4, lr}
 80098e2:	4604      	mov	r4, r0
 80098e4:	f7ff fff0 	bl	80098c8 <__sfp_lock_acquire>
 80098e8:	6a23      	ldr	r3, [r4, #32]
 80098ea:	b11b      	cbz	r3, 80098f4 <__sinit+0x14>
 80098ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f0:	f7ff bff0 	b.w	80098d4 <__sfp_lock_release>
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <__sinit+0x28>)
 80098f6:	6223      	str	r3, [r4, #32]
 80098f8:	4b04      	ldr	r3, [pc, #16]	; (800990c <__sinit+0x2c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1f5      	bne.n	80098ec <__sinit+0xc>
 8009900:	f7ff ffc4 	bl	800988c <global_stdio_init.part.0>
 8009904:	e7f2      	b.n	80098ec <__sinit+0xc>
 8009906:	bf00      	nop
 8009908:	0800984d 	.word	0x0800984d
 800990c:	20000548 	.word	0x20000548

08009910 <_fwalk_sglue>:
 8009910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009914:	4607      	mov	r7, r0
 8009916:	4688      	mov	r8, r1
 8009918:	4614      	mov	r4, r2
 800991a:	2600      	movs	r6, #0
 800991c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009920:	f1b9 0901 	subs.w	r9, r9, #1
 8009924:	d505      	bpl.n	8009932 <_fwalk_sglue+0x22>
 8009926:	6824      	ldr	r4, [r4, #0]
 8009928:	2c00      	cmp	r4, #0
 800992a:	d1f7      	bne.n	800991c <_fwalk_sglue+0xc>
 800992c:	4630      	mov	r0, r6
 800992e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009932:	89ab      	ldrh	r3, [r5, #12]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d907      	bls.n	8009948 <_fwalk_sglue+0x38>
 8009938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800993c:	3301      	adds	r3, #1
 800993e:	d003      	beq.n	8009948 <_fwalk_sglue+0x38>
 8009940:	4629      	mov	r1, r5
 8009942:	4638      	mov	r0, r7
 8009944:	47c0      	blx	r8
 8009946:	4306      	orrs	r6, r0
 8009948:	3568      	adds	r5, #104	; 0x68
 800994a:	e7e9      	b.n	8009920 <_fwalk_sglue+0x10>

0800994c <siprintf>:
 800994c:	b40e      	push	{r1, r2, r3}
 800994e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009952:	b500      	push	{lr}
 8009954:	b09c      	sub	sp, #112	; 0x70
 8009956:	ab1d      	add	r3, sp, #116	; 0x74
 8009958:	9002      	str	r0, [sp, #8]
 800995a:	9006      	str	r0, [sp, #24]
 800995c:	9107      	str	r1, [sp, #28]
 800995e:	9104      	str	r1, [sp, #16]
 8009960:	4808      	ldr	r0, [pc, #32]	; (8009984 <siprintf+0x38>)
 8009962:	4909      	ldr	r1, [pc, #36]	; (8009988 <siprintf+0x3c>)
 8009964:	f853 2b04 	ldr.w	r2, [r3], #4
 8009968:	9105      	str	r1, [sp, #20]
 800996a:	6800      	ldr	r0, [r0, #0]
 800996c:	a902      	add	r1, sp, #8
 800996e:	9301      	str	r3, [sp, #4]
 8009970:	f001 fc38 	bl	800b1e4 <_svfiprintf_r>
 8009974:	2200      	movs	r2, #0
 8009976:	9b02      	ldr	r3, [sp, #8]
 8009978:	701a      	strb	r2, [r3, #0]
 800997a:	b01c      	add	sp, #112	; 0x70
 800997c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009980:	b003      	add	sp, #12
 8009982:	4770      	bx	lr
 8009984:	20000094 	.word	0x20000094
 8009988:	ffff0208 	.word	0xffff0208

0800998c <__sread>:
 800998c:	b510      	push	{r4, lr}
 800998e:	460c      	mov	r4, r1
 8009990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009994:	f000 f87e 	bl	8009a94 <_read_r>
 8009998:	2800      	cmp	r0, #0
 800999a:	bfab      	itete	ge
 800999c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800999e:	89a3      	ldrhlt	r3, [r4, #12]
 80099a0:	181b      	addge	r3, r3, r0
 80099a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099a6:	bfac      	ite	ge
 80099a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80099aa:	81a3      	strhlt	r3, [r4, #12]
 80099ac:	bd10      	pop	{r4, pc}

080099ae <__swrite>:
 80099ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	461f      	mov	r7, r3
 80099b4:	898b      	ldrh	r3, [r1, #12]
 80099b6:	4605      	mov	r5, r0
 80099b8:	05db      	lsls	r3, r3, #23
 80099ba:	460c      	mov	r4, r1
 80099bc:	4616      	mov	r6, r2
 80099be:	d505      	bpl.n	80099cc <__swrite+0x1e>
 80099c0:	2302      	movs	r3, #2
 80099c2:	2200      	movs	r2, #0
 80099c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c8:	f000 f852 	bl	8009a70 <_lseek_r>
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	4632      	mov	r2, r6
 80099d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	4628      	mov	r0, r5
 80099d8:	463b      	mov	r3, r7
 80099da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	f000 b869 	b.w	8009ab8 <_write_r>

080099e6 <__sseek>:
 80099e6:	b510      	push	{r4, lr}
 80099e8:	460c      	mov	r4, r1
 80099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ee:	f000 f83f 	bl	8009a70 <_lseek_r>
 80099f2:	1c43      	adds	r3, r0, #1
 80099f4:	89a3      	ldrh	r3, [r4, #12]
 80099f6:	bf15      	itete	ne
 80099f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a02:	81a3      	strheq	r3, [r4, #12]
 8009a04:	bf18      	it	ne
 8009a06:	81a3      	strhne	r3, [r4, #12]
 8009a08:	bd10      	pop	{r4, pc}

08009a0a <__sclose>:
 8009a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a0e:	f000 b81f 	b.w	8009a50 <_close_r>

08009a12 <memset>:
 8009a12:	4603      	mov	r3, r0
 8009a14:	4402      	add	r2, r0
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d100      	bne.n	8009a1c <memset+0xa>
 8009a1a:	4770      	bx	lr
 8009a1c:	f803 1b01 	strb.w	r1, [r3], #1
 8009a20:	e7f9      	b.n	8009a16 <memset+0x4>

08009a22 <strncpy>:
 8009a22:	4603      	mov	r3, r0
 8009a24:	b510      	push	{r4, lr}
 8009a26:	3901      	subs	r1, #1
 8009a28:	b132      	cbz	r2, 8009a38 <strncpy+0x16>
 8009a2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	f803 4b01 	strb.w	r4, [r3], #1
 8009a34:	2c00      	cmp	r4, #0
 8009a36:	d1f7      	bne.n	8009a28 <strncpy+0x6>
 8009a38:	2100      	movs	r1, #0
 8009a3a:	441a      	add	r2, r3
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <strncpy+0x20>
 8009a40:	bd10      	pop	{r4, pc}
 8009a42:	f803 1b01 	strb.w	r1, [r3], #1
 8009a46:	e7f9      	b.n	8009a3c <strncpy+0x1a>

08009a48 <_localeconv_r>:
 8009a48:	4800      	ldr	r0, [pc, #0]	; (8009a4c <_localeconv_r+0x4>)
 8009a4a:	4770      	bx	lr
 8009a4c:	20000188 	.word	0x20000188

08009a50 <_close_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	2300      	movs	r3, #0
 8009a54:	4d05      	ldr	r5, [pc, #20]	; (8009a6c <_close_r+0x1c>)
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	602b      	str	r3, [r5, #0]
 8009a5c:	f7f7 fb7b 	bl	8001156 <_close>
 8009a60:	1c43      	adds	r3, r0, #1
 8009a62:	d102      	bne.n	8009a6a <_close_r+0x1a>
 8009a64:	682b      	ldr	r3, [r5, #0]
 8009a66:	b103      	cbz	r3, 8009a6a <_close_r+0x1a>
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	bd38      	pop	{r3, r4, r5, pc}
 8009a6c:	2000054c 	.word	0x2000054c

08009a70 <_lseek_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4d05      	ldr	r5, [pc, #20]	; (8009a90 <_lseek_r+0x20>)
 8009a7c:	602a      	str	r2, [r5, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f7f7 fb8d 	bl	800119e <_lseek>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_lseek_r+0x1e>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_lseek_r+0x1e>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	2000054c 	.word	0x2000054c

08009a94 <_read_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	4d05      	ldr	r5, [pc, #20]	; (8009ab4 <_read_r+0x20>)
 8009aa0:	602a      	str	r2, [r5, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f7f7 fb1e 	bl	80010e4 <_read>
 8009aa8:	1c43      	adds	r3, r0, #1
 8009aaa:	d102      	bne.n	8009ab2 <_read_r+0x1e>
 8009aac:	682b      	ldr	r3, [r5, #0]
 8009aae:	b103      	cbz	r3, 8009ab2 <_read_r+0x1e>
 8009ab0:	6023      	str	r3, [r4, #0]
 8009ab2:	bd38      	pop	{r3, r4, r5, pc}
 8009ab4:	2000054c 	.word	0x2000054c

08009ab8 <_write_r>:
 8009ab8:	b538      	push	{r3, r4, r5, lr}
 8009aba:	4604      	mov	r4, r0
 8009abc:	4608      	mov	r0, r1
 8009abe:	4611      	mov	r1, r2
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	4d05      	ldr	r5, [pc, #20]	; (8009ad8 <_write_r+0x20>)
 8009ac4:	602a      	str	r2, [r5, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f7f7 fb29 	bl	800111e <_write>
 8009acc:	1c43      	adds	r3, r0, #1
 8009ace:	d102      	bne.n	8009ad6 <_write_r+0x1e>
 8009ad0:	682b      	ldr	r3, [r5, #0]
 8009ad2:	b103      	cbz	r3, 8009ad6 <_write_r+0x1e>
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	bd38      	pop	{r3, r4, r5, pc}
 8009ad8:	2000054c 	.word	0x2000054c

08009adc <__errno>:
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <__errno+0x8>)
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20000094 	.word	0x20000094

08009ae8 <__libc_init_array>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	2600      	movs	r6, #0
 8009aec:	4d0c      	ldr	r5, [pc, #48]	; (8009b20 <__libc_init_array+0x38>)
 8009aee:	4c0d      	ldr	r4, [pc, #52]	; (8009b24 <__libc_init_array+0x3c>)
 8009af0:	1b64      	subs	r4, r4, r5
 8009af2:	10a4      	asrs	r4, r4, #2
 8009af4:	42a6      	cmp	r6, r4
 8009af6:	d109      	bne.n	8009b0c <__libc_init_array+0x24>
 8009af8:	f002 f886 	bl	800bc08 <_init>
 8009afc:	2600      	movs	r6, #0
 8009afe:	4d0a      	ldr	r5, [pc, #40]	; (8009b28 <__libc_init_array+0x40>)
 8009b00:	4c0a      	ldr	r4, [pc, #40]	; (8009b2c <__libc_init_array+0x44>)
 8009b02:	1b64      	subs	r4, r4, r5
 8009b04:	10a4      	asrs	r4, r4, #2
 8009b06:	42a6      	cmp	r6, r4
 8009b08:	d105      	bne.n	8009b16 <__libc_init_array+0x2e>
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b10:	4798      	blx	r3
 8009b12:	3601      	adds	r6, #1
 8009b14:	e7ee      	b.n	8009af4 <__libc_init_array+0xc>
 8009b16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b1a:	4798      	blx	r3
 8009b1c:	3601      	adds	r6, #1
 8009b1e:	e7f2      	b.n	8009b06 <__libc_init_array+0x1e>
 8009b20:	0800bffc 	.word	0x0800bffc
 8009b24:	0800bffc 	.word	0x0800bffc
 8009b28:	0800bffc 	.word	0x0800bffc
 8009b2c:	0800c000 	.word	0x0800c000

08009b30 <__retarget_lock_init_recursive>:
 8009b30:	4770      	bx	lr

08009b32 <__retarget_lock_acquire_recursive>:
 8009b32:	4770      	bx	lr

08009b34 <__retarget_lock_release_recursive>:
 8009b34:	4770      	bx	lr

08009b36 <memchr>:
 8009b36:	4603      	mov	r3, r0
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	b2c9      	uxtb	r1, r1
 8009b3c:	4402      	add	r2, r0
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	4618      	mov	r0, r3
 8009b42:	d101      	bne.n	8009b48 <memchr+0x12>
 8009b44:	2000      	movs	r0, #0
 8009b46:	e003      	b.n	8009b50 <memchr+0x1a>
 8009b48:	7804      	ldrb	r4, [r0, #0]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	428c      	cmp	r4, r1
 8009b4e:	d1f6      	bne.n	8009b3e <memchr+0x8>
 8009b50:	bd10      	pop	{r4, pc}

08009b52 <memcpy>:
 8009b52:	440a      	add	r2, r1
 8009b54:	4291      	cmp	r1, r2
 8009b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b5a:	d100      	bne.n	8009b5e <memcpy+0xc>
 8009b5c:	4770      	bx	lr
 8009b5e:	b510      	push	{r4, lr}
 8009b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b64:	4291      	cmp	r1, r2
 8009b66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b6a:	d1f9      	bne.n	8009b60 <memcpy+0xe>
 8009b6c:	bd10      	pop	{r4, pc}

08009b6e <quorem>:
 8009b6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b72:	6903      	ldr	r3, [r0, #16]
 8009b74:	690c      	ldr	r4, [r1, #16]
 8009b76:	4607      	mov	r7, r0
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	db7f      	blt.n	8009c7c <quorem+0x10e>
 8009b7c:	3c01      	subs	r4, #1
 8009b7e:	f100 0514 	add.w	r5, r0, #20
 8009b82:	f101 0814 	add.w	r8, r1, #20
 8009b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b8a:	9301      	str	r3, [sp, #4]
 8009b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b94:	3301      	adds	r3, #1
 8009b96:	429a      	cmp	r2, r3
 8009b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ba4:	d331      	bcc.n	8009c0a <quorem+0x9c>
 8009ba6:	f04f 0e00 	mov.w	lr, #0
 8009baa:	4640      	mov	r0, r8
 8009bac:	46ac      	mov	ip, r5
 8009bae:	46f2      	mov	sl, lr
 8009bb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bb4:	b293      	uxth	r3, r2
 8009bb6:	fb06 e303 	mla	r3, r6, r3, lr
 8009bba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bbe:	0c1a      	lsrs	r2, r3, #16
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	fb06 220e 	mla	r2, r6, lr, r2
 8009bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8009bca:	f8dc a000 	ldr.w	sl, [ip]
 8009bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bd2:	fa1f fa8a 	uxth.w	sl, sl
 8009bd6:	4453      	add	r3, sl
 8009bd8:	f8dc a000 	ldr.w	sl, [ip]
 8009bdc:	b292      	uxth	r2, r2
 8009bde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009be2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bec:	4581      	cmp	r9, r0
 8009bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8009bf6:	d2db      	bcs.n	8009bb0 <quorem+0x42>
 8009bf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bfc:	b92b      	cbnz	r3, 8009c0a <quorem+0x9c>
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	3b04      	subs	r3, #4
 8009c02:	429d      	cmp	r5, r3
 8009c04:	461a      	mov	r2, r3
 8009c06:	d32d      	bcc.n	8009c64 <quorem+0xf6>
 8009c08:	613c      	str	r4, [r7, #16]
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f001 f992 	bl	800af34 <__mcmp>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	db23      	blt.n	8009c5c <quorem+0xee>
 8009c14:	4629      	mov	r1, r5
 8009c16:	2000      	movs	r0, #0
 8009c18:	3601      	adds	r6, #1
 8009c1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c1e:	f8d1 c000 	ldr.w	ip, [r1]
 8009c22:	b293      	uxth	r3, r2
 8009c24:	1ac3      	subs	r3, r0, r3
 8009c26:	0c12      	lsrs	r2, r2, #16
 8009c28:	fa1f f08c 	uxth.w	r0, ip
 8009c2c:	4403      	add	r3, r0
 8009c2e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c3c:	45c1      	cmp	r9, r8
 8009c3e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c42:	f841 3b04 	str.w	r3, [r1], #4
 8009c46:	d2e8      	bcs.n	8009c1a <quorem+0xac>
 8009c48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c50:	b922      	cbnz	r2, 8009c5c <quorem+0xee>
 8009c52:	3b04      	subs	r3, #4
 8009c54:	429d      	cmp	r5, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	d30a      	bcc.n	8009c70 <quorem+0x102>
 8009c5a:	613c      	str	r4, [r7, #16]
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	b003      	add	sp, #12
 8009c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	6812      	ldr	r2, [r2, #0]
 8009c66:	3b04      	subs	r3, #4
 8009c68:	2a00      	cmp	r2, #0
 8009c6a:	d1cd      	bne.n	8009c08 <quorem+0x9a>
 8009c6c:	3c01      	subs	r4, #1
 8009c6e:	e7c8      	b.n	8009c02 <quorem+0x94>
 8009c70:	6812      	ldr	r2, [r2, #0]
 8009c72:	3b04      	subs	r3, #4
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	d1f0      	bne.n	8009c5a <quorem+0xec>
 8009c78:	3c01      	subs	r4, #1
 8009c7a:	e7eb      	b.n	8009c54 <quorem+0xe6>
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7ee      	b.n	8009c5e <quorem+0xf0>

08009c80 <_dtoa_r>:
 8009c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	4616      	mov	r6, r2
 8009c86:	461f      	mov	r7, r3
 8009c88:	69c4      	ldr	r4, [r0, #28]
 8009c8a:	b099      	sub	sp, #100	; 0x64
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009c96:	b974      	cbnz	r4, 8009cb6 <_dtoa_r+0x36>
 8009c98:	2010      	movs	r0, #16
 8009c9a:	f000 fe1d 	bl	800a8d8 <malloc>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	61e8      	str	r0, [r5, #28]
 8009ca2:	b920      	cbnz	r0, 8009cae <_dtoa_r+0x2e>
 8009ca4:	21ef      	movs	r1, #239	; 0xef
 8009ca6:	4bac      	ldr	r3, [pc, #688]	; (8009f58 <_dtoa_r+0x2d8>)
 8009ca8:	48ac      	ldr	r0, [pc, #688]	; (8009f5c <_dtoa_r+0x2dc>)
 8009caa:	f001 fc6d 	bl	800b588 <__assert_func>
 8009cae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cb2:	6004      	str	r4, [r0, #0]
 8009cb4:	60c4      	str	r4, [r0, #12]
 8009cb6:	69eb      	ldr	r3, [r5, #28]
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	b151      	cbz	r1, 8009cd2 <_dtoa_r+0x52>
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	4093      	lsls	r3, r2
 8009cc2:	604a      	str	r2, [r1, #4]
 8009cc4:	608b      	str	r3, [r1, #8]
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 fefa 	bl	800aac0 <_Bfree>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	69eb      	ldr	r3, [r5, #28]
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	1e3b      	subs	r3, r7, #0
 8009cd4:	bfaf      	iteee	ge
 8009cd6:	2300      	movge	r3, #0
 8009cd8:	2201      	movlt	r2, #1
 8009cda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cde:	9305      	strlt	r3, [sp, #20]
 8009ce0:	bfa8      	it	ge
 8009ce2:	f8c8 3000 	strge.w	r3, [r8]
 8009ce6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009cea:	4b9d      	ldr	r3, [pc, #628]	; (8009f60 <_dtoa_r+0x2e0>)
 8009cec:	bfb8      	it	lt
 8009cee:	f8c8 2000 	strlt.w	r2, [r8]
 8009cf2:	ea33 0309 	bics.w	r3, r3, r9
 8009cf6:	d119      	bne.n	8009d2c <_dtoa_r+0xac>
 8009cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d04:	4333      	orrs	r3, r6
 8009d06:	f000 8589 	beq.w	800a81c <_dtoa_r+0xb9c>
 8009d0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d0c:	b953      	cbnz	r3, 8009d24 <_dtoa_r+0xa4>
 8009d0e:	4b95      	ldr	r3, [pc, #596]	; (8009f64 <_dtoa_r+0x2e4>)
 8009d10:	e023      	b.n	8009d5a <_dtoa_r+0xda>
 8009d12:	4b95      	ldr	r3, [pc, #596]	; (8009f68 <_dtoa_r+0x2e8>)
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	3308      	adds	r3, #8
 8009d18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	9803      	ldr	r0, [sp, #12]
 8009d1e:	b019      	add	sp, #100	; 0x64
 8009d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d24:	4b8f      	ldr	r3, [pc, #572]	; (8009f64 <_dtoa_r+0x2e4>)
 8009d26:	9303      	str	r3, [sp, #12]
 8009d28:	3303      	adds	r3, #3
 8009d2a:	e7f5      	b.n	8009d18 <_dtoa_r+0x98>
 8009d2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009d34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d38:	2200      	movs	r2, #0
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f7f6 fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8009d40:	4680      	mov	r8, r0
 8009d42:	b160      	cbz	r0, 8009d5e <_dtoa_r+0xde>
 8009d44:	2301      	movs	r3, #1
 8009d46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 8562 	beq.w	800a816 <_dtoa_r+0xb96>
 8009d52:	4b86      	ldr	r3, [pc, #536]	; (8009f6c <_dtoa_r+0x2ec>)
 8009d54:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	9303      	str	r3, [sp, #12]
 8009d5c:	e7de      	b.n	8009d1c <_dtoa_r+0x9c>
 8009d5e:	ab16      	add	r3, sp, #88	; 0x58
 8009d60:	9301      	str	r3, [sp, #4]
 8009d62:	ab17      	add	r3, sp, #92	; 0x5c
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	4628      	mov	r0, r5
 8009d68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d6c:	f001 f98a 	bl	800b084 <__d2b>
 8009d70:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d74:	4682      	mov	sl, r0
 8009d76:	2c00      	cmp	r4, #0
 8009d78:	d07e      	beq.n	8009e78 <_dtoa_r+0x1f8>
 8009d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d80:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d88:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009d8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d90:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009d94:	4619      	mov	r1, r3
 8009d96:	2200      	movs	r2, #0
 8009d98:	4b75      	ldr	r3, [pc, #468]	; (8009f70 <_dtoa_r+0x2f0>)
 8009d9a:	f7f6 f9e5 	bl	8000168 <__aeabi_dsub>
 8009d9e:	a368      	add	r3, pc, #416	; (adr r3, 8009f40 <_dtoa_r+0x2c0>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	f7f6 fb98 	bl	80004d8 <__aeabi_dmul>
 8009da8:	a367      	add	r3, pc, #412	; (adr r3, 8009f48 <_dtoa_r+0x2c8>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	f7f6 f9dd 	bl	800016c <__adddf3>
 8009db2:	4606      	mov	r6, r0
 8009db4:	4620      	mov	r0, r4
 8009db6:	460f      	mov	r7, r1
 8009db8:	f7f6 fb24 	bl	8000404 <__aeabi_i2d>
 8009dbc:	a364      	add	r3, pc, #400	; (adr r3, 8009f50 <_dtoa_r+0x2d0>)
 8009dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc2:	f7f6 fb89 	bl	80004d8 <__aeabi_dmul>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4630      	mov	r0, r6
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 f9cd 	bl	800016c <__adddf3>
 8009dd2:	4606      	mov	r6, r0
 8009dd4:	460f      	mov	r7, r1
 8009dd6:	f7f6 fe2f 	bl	8000a38 <__aeabi_d2iz>
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4683      	mov	fp, r0
 8009dde:	2300      	movs	r3, #0
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fdea 	bl	80009bc <__aeabi_dcmplt>
 8009de8:	b148      	cbz	r0, 8009dfe <_dtoa_r+0x17e>
 8009dea:	4658      	mov	r0, fp
 8009dec:	f7f6 fb0a 	bl	8000404 <__aeabi_i2d>
 8009df0:	4632      	mov	r2, r6
 8009df2:	463b      	mov	r3, r7
 8009df4:	f7f6 fdd8 	bl	80009a8 <__aeabi_dcmpeq>
 8009df8:	b908      	cbnz	r0, 8009dfe <_dtoa_r+0x17e>
 8009dfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dfe:	f1bb 0f16 	cmp.w	fp, #22
 8009e02:	d857      	bhi.n	8009eb4 <_dtoa_r+0x234>
 8009e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e08:	4b5a      	ldr	r3, [pc, #360]	; (8009f74 <_dtoa_r+0x2f4>)
 8009e0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	f7f6 fdd3 	bl	80009bc <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d04e      	beq.n	8009eb8 <_dtoa_r+0x238>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e24:	1b1b      	subs	r3, r3, r4
 8009e26:	1e5a      	subs	r2, r3, #1
 8009e28:	bf46      	itte	mi
 8009e2a:	f1c3 0901 	rsbmi	r9, r3, #1
 8009e2e:	2300      	movmi	r3, #0
 8009e30:	f04f 0900 	movpl.w	r9, #0
 8009e34:	9209      	str	r2, [sp, #36]	; 0x24
 8009e36:	bf48      	it	mi
 8009e38:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009e3a:	f1bb 0f00 	cmp.w	fp, #0
 8009e3e:	db3d      	blt.n	8009ebc <_dtoa_r+0x23c>
 8009e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e42:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009e46:	445b      	add	r3, fp
 8009e48:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e50:	2b09      	cmp	r3, #9
 8009e52:	d867      	bhi.n	8009f24 <_dtoa_r+0x2a4>
 8009e54:	2b05      	cmp	r3, #5
 8009e56:	bfc4      	itt	gt
 8009e58:	3b04      	subgt	r3, #4
 8009e5a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009e5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e5e:	bfc8      	it	gt
 8009e60:	2400      	movgt	r4, #0
 8009e62:	f1a3 0302 	sub.w	r3, r3, #2
 8009e66:	bfd8      	it	le
 8009e68:	2401      	movle	r4, #1
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	f200 8086 	bhi.w	8009f7c <_dtoa_r+0x2fc>
 8009e70:	e8df f003 	tbb	[pc, r3]
 8009e74:	5637392c 	.word	0x5637392c
 8009e78:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009e7c:	441c      	add	r4, r3
 8009e7e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009e82:	2b20      	cmp	r3, #32
 8009e84:	bfc1      	itttt	gt
 8009e86:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e8a:	fa09 f903 	lslgt.w	r9, r9, r3
 8009e8e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009e92:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009e96:	bfd6      	itet	le
 8009e98:	f1c3 0320 	rsble	r3, r3, #32
 8009e9c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009ea0:	fa06 f003 	lslle.w	r0, r6, r3
 8009ea4:	f7f6 fa9e 	bl	80003e4 <__aeabi_ui2d>
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009eae:	3c01      	subs	r4, #1
 8009eb0:	9213      	str	r2, [sp, #76]	; 0x4c
 8009eb2:	e76f      	b.n	8009d94 <_dtoa_r+0x114>
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e7b3      	b.n	8009e20 <_dtoa_r+0x1a0>
 8009eb8:	900f      	str	r0, [sp, #60]	; 0x3c
 8009eba:	e7b2      	b.n	8009e22 <_dtoa_r+0x1a2>
 8009ebc:	f1cb 0300 	rsb	r3, fp, #0
 8009ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	eba9 090b 	sub.w	r9, r9, fp
 8009ec8:	930e      	str	r3, [sp, #56]	; 0x38
 8009eca:	e7c0      	b.n	8009e4e <_dtoa_r+0x1ce>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ed0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dc55      	bgt.n	8009f82 <_dtoa_r+0x302>
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	461a      	mov	r2, r3
 8009eda:	9306      	str	r3, [sp, #24]
 8009edc:	9308      	str	r3, [sp, #32]
 8009ede:	9223      	str	r2, [sp, #140]	; 0x8c
 8009ee0:	e00b      	b.n	8009efa <_dtoa_r+0x27a>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e7f3      	b.n	8009ece <_dtoa_r+0x24e>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009eec:	445b      	add	r3, fp
 8009eee:	9306      	str	r3, [sp, #24]
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	9308      	str	r3, [sp, #32]
 8009ef6:	bfb8      	it	lt
 8009ef8:	2301      	movlt	r3, #1
 8009efa:	2100      	movs	r1, #0
 8009efc:	2204      	movs	r2, #4
 8009efe:	69e8      	ldr	r0, [r5, #28]
 8009f00:	f102 0614 	add.w	r6, r2, #20
 8009f04:	429e      	cmp	r6, r3
 8009f06:	d940      	bls.n	8009f8a <_dtoa_r+0x30a>
 8009f08:	6041      	str	r1, [r0, #4]
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	f000 fd98 	bl	800aa40 <_Balloc>
 8009f10:	9003      	str	r0, [sp, #12]
 8009f12:	2800      	cmp	r0, #0
 8009f14:	d13c      	bne.n	8009f90 <_dtoa_r+0x310>
 8009f16:	4602      	mov	r2, r0
 8009f18:	f240 11af 	movw	r1, #431	; 0x1af
 8009f1c:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <_dtoa_r+0x2f8>)
 8009f1e:	e6c3      	b.n	8009ca8 <_dtoa_r+0x28>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e7e1      	b.n	8009ee8 <_dtoa_r+0x268>
 8009f24:	2401      	movs	r4, #1
 8009f26:	2300      	movs	r3, #0
 8009f28:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f2a:	9322      	str	r3, [sp, #136]	; 0x88
 8009f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f30:	2200      	movs	r2, #0
 8009f32:	9306      	str	r3, [sp, #24]
 8009f34:	9308      	str	r3, [sp, #32]
 8009f36:	2312      	movs	r3, #18
 8009f38:	e7d1      	b.n	8009ede <_dtoa_r+0x25e>
 8009f3a:	bf00      	nop
 8009f3c:	f3af 8000 	nop.w
 8009f40:	636f4361 	.word	0x636f4361
 8009f44:	3fd287a7 	.word	0x3fd287a7
 8009f48:	8b60c8b3 	.word	0x8b60c8b3
 8009f4c:	3fc68a28 	.word	0x3fc68a28
 8009f50:	509f79fb 	.word	0x509f79fb
 8009f54:	3fd34413 	.word	0x3fd34413
 8009f58:	0800bccf 	.word	0x0800bccf
 8009f5c:	0800bce6 	.word	0x0800bce6
 8009f60:	7ff00000 	.word	0x7ff00000
 8009f64:	0800bccb 	.word	0x0800bccb
 8009f68:	0800bcc2 	.word	0x0800bcc2
 8009f6c:	0800bc9f 	.word	0x0800bc9f
 8009f70:	3ff80000 	.word	0x3ff80000
 8009f74:	0800bdd0 	.word	0x0800bdd0
 8009f78:	0800bd3e 	.word	0x0800bd3e
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f80:	e7d4      	b.n	8009f2c <_dtoa_r+0x2ac>
 8009f82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f84:	9306      	str	r3, [sp, #24]
 8009f86:	9308      	str	r3, [sp, #32]
 8009f88:	e7b7      	b.n	8009efa <_dtoa_r+0x27a>
 8009f8a:	3101      	adds	r1, #1
 8009f8c:	0052      	lsls	r2, r2, #1
 8009f8e:	e7b7      	b.n	8009f00 <_dtoa_r+0x280>
 8009f90:	69eb      	ldr	r3, [r5, #28]
 8009f92:	9a03      	ldr	r2, [sp, #12]
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	9b08      	ldr	r3, [sp, #32]
 8009f98:	2b0e      	cmp	r3, #14
 8009f9a:	f200 80a8 	bhi.w	800a0ee <_dtoa_r+0x46e>
 8009f9e:	2c00      	cmp	r4, #0
 8009fa0:	f000 80a5 	beq.w	800a0ee <_dtoa_r+0x46e>
 8009fa4:	f1bb 0f00 	cmp.w	fp, #0
 8009fa8:	dd34      	ble.n	800a014 <_dtoa_r+0x394>
 8009faa:	4b9a      	ldr	r3, [pc, #616]	; (800a214 <_dtoa_r+0x594>)
 8009fac:	f00b 020f 	and.w	r2, fp, #15
 8009fb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009fb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009fc0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009fc4:	d016      	beq.n	8009ff4 <_dtoa_r+0x374>
 8009fc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009fca:	4b93      	ldr	r3, [pc, #588]	; (800a218 <_dtoa_r+0x598>)
 8009fcc:	2703      	movs	r7, #3
 8009fce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fd2:	f7f6 fbab 	bl	800072c <__aeabi_ddiv>
 8009fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fda:	f004 040f 	and.w	r4, r4, #15
 8009fde:	4e8e      	ldr	r6, [pc, #568]	; (800a218 <_dtoa_r+0x598>)
 8009fe0:	b954      	cbnz	r4, 8009ff8 <_dtoa_r+0x378>
 8009fe2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fe6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fea:	f7f6 fb9f 	bl	800072c <__aeabi_ddiv>
 8009fee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ff2:	e029      	b.n	800a048 <_dtoa_r+0x3c8>
 8009ff4:	2702      	movs	r7, #2
 8009ff6:	e7f2      	b.n	8009fde <_dtoa_r+0x35e>
 8009ff8:	07e1      	lsls	r1, r4, #31
 8009ffa:	d508      	bpl.n	800a00e <_dtoa_r+0x38e>
 8009ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a000:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a004:	f7f6 fa68 	bl	80004d8 <__aeabi_dmul>
 800a008:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a00c:	3701      	adds	r7, #1
 800a00e:	1064      	asrs	r4, r4, #1
 800a010:	3608      	adds	r6, #8
 800a012:	e7e5      	b.n	8009fe0 <_dtoa_r+0x360>
 800a014:	f000 80a5 	beq.w	800a162 <_dtoa_r+0x4e2>
 800a018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a01c:	f1cb 0400 	rsb	r4, fp, #0
 800a020:	4b7c      	ldr	r3, [pc, #496]	; (800a214 <_dtoa_r+0x594>)
 800a022:	f004 020f 	and.w	r2, r4, #15
 800a026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02e:	f7f6 fa53 	bl	80004d8 <__aeabi_dmul>
 800a032:	2702      	movs	r7, #2
 800a034:	2300      	movs	r3, #0
 800a036:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a03a:	4e77      	ldr	r6, [pc, #476]	; (800a218 <_dtoa_r+0x598>)
 800a03c:	1124      	asrs	r4, r4, #4
 800a03e:	2c00      	cmp	r4, #0
 800a040:	f040 8084 	bne.w	800a14c <_dtoa_r+0x4cc>
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1d2      	bne.n	8009fee <_dtoa_r+0x36e>
 800a048:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a04c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 8087 	beq.w	800a166 <_dtoa_r+0x4e6>
 800a058:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a05c:	2200      	movs	r2, #0
 800a05e:	4b6f      	ldr	r3, [pc, #444]	; (800a21c <_dtoa_r+0x59c>)
 800a060:	f7f6 fcac 	bl	80009bc <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	d07e      	beq.n	800a166 <_dtoa_r+0x4e6>
 800a068:	9b08      	ldr	r3, [sp, #32]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d07b      	beq.n	800a166 <_dtoa_r+0x4e6>
 800a06e:	9b06      	ldr	r3, [sp, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	dd38      	ble.n	800a0e6 <_dtoa_r+0x466>
 800a074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a078:	2200      	movs	r2, #0
 800a07a:	4b69      	ldr	r3, [pc, #420]	; (800a220 <_dtoa_r+0x5a0>)
 800a07c:	f7f6 fa2c 	bl	80004d8 <__aeabi_dmul>
 800a080:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a084:	9c06      	ldr	r4, [sp, #24]
 800a086:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a08a:	3701      	adds	r7, #1
 800a08c:	4638      	mov	r0, r7
 800a08e:	f7f6 f9b9 	bl	8000404 <__aeabi_i2d>
 800a092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a096:	f7f6 fa1f 	bl	80004d8 <__aeabi_dmul>
 800a09a:	2200      	movs	r2, #0
 800a09c:	4b61      	ldr	r3, [pc, #388]	; (800a224 <_dtoa_r+0x5a4>)
 800a09e:	f7f6 f865 	bl	800016c <__adddf3>
 800a0a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a0a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a0aa:	9611      	str	r6, [sp, #68]	; 0x44
 800a0ac:	2c00      	cmp	r4, #0
 800a0ae:	d15d      	bne.n	800a16c <_dtoa_r+0x4ec>
 800a0b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	4b5c      	ldr	r3, [pc, #368]	; (800a228 <_dtoa_r+0x5a8>)
 800a0b8:	f7f6 f856 	bl	8000168 <__aeabi_dsub>
 800a0bc:	4602      	mov	r2, r0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0c4:	4633      	mov	r3, r6
 800a0c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0c8:	f7f6 fc96 	bl	80009f8 <__aeabi_dcmpgt>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f040 8295 	bne.w	800a5fc <_dtoa_r+0x97c>
 800a0d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a0dc:	f7f6 fc6e 	bl	80009bc <__aeabi_dcmplt>
 800a0e0:	2800      	cmp	r0, #0
 800a0e2:	f040 8289 	bne.w	800a5f8 <_dtoa_r+0x978>
 800a0e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a0ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f2c0 8151 	blt.w	800a398 <_dtoa_r+0x718>
 800a0f6:	f1bb 0f0e 	cmp.w	fp, #14
 800a0fa:	f300 814d 	bgt.w	800a398 <_dtoa_r+0x718>
 800a0fe:	4b45      	ldr	r3, [pc, #276]	; (800a214 <_dtoa_r+0x594>)
 800a100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a104:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a108:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a10c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f280 80da 	bge.w	800a2c8 <_dtoa_r+0x648>
 800a114:	9b08      	ldr	r3, [sp, #32]
 800a116:	2b00      	cmp	r3, #0
 800a118:	f300 80d6 	bgt.w	800a2c8 <_dtoa_r+0x648>
 800a11c:	f040 826b 	bne.w	800a5f6 <_dtoa_r+0x976>
 800a120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a124:	2200      	movs	r2, #0
 800a126:	4b40      	ldr	r3, [pc, #256]	; (800a228 <_dtoa_r+0x5a8>)
 800a128:	f7f6 f9d6 	bl	80004d8 <__aeabi_dmul>
 800a12c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a130:	f7f6 fc58 	bl	80009e4 <__aeabi_dcmpge>
 800a134:	9c08      	ldr	r4, [sp, #32]
 800a136:	4626      	mov	r6, r4
 800a138:	2800      	cmp	r0, #0
 800a13a:	f040 8241 	bne.w	800a5c0 <_dtoa_r+0x940>
 800a13e:	2331      	movs	r3, #49	; 0x31
 800a140:	9f03      	ldr	r7, [sp, #12]
 800a142:	f10b 0b01 	add.w	fp, fp, #1
 800a146:	f807 3b01 	strb.w	r3, [r7], #1
 800a14a:	e23d      	b.n	800a5c8 <_dtoa_r+0x948>
 800a14c:	07e2      	lsls	r2, r4, #31
 800a14e:	d505      	bpl.n	800a15c <_dtoa_r+0x4dc>
 800a150:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a154:	f7f6 f9c0 	bl	80004d8 <__aeabi_dmul>
 800a158:	2301      	movs	r3, #1
 800a15a:	3701      	adds	r7, #1
 800a15c:	1064      	asrs	r4, r4, #1
 800a15e:	3608      	adds	r6, #8
 800a160:	e76d      	b.n	800a03e <_dtoa_r+0x3be>
 800a162:	2702      	movs	r7, #2
 800a164:	e770      	b.n	800a048 <_dtoa_r+0x3c8>
 800a166:	46d8      	mov	r8, fp
 800a168:	9c08      	ldr	r4, [sp, #32]
 800a16a:	e78f      	b.n	800a08c <_dtoa_r+0x40c>
 800a16c:	9903      	ldr	r1, [sp, #12]
 800a16e:	4b29      	ldr	r3, [pc, #164]	; (800a214 <_dtoa_r+0x594>)
 800a170:	4421      	add	r1, r4
 800a172:	9112      	str	r1, [sp, #72]	; 0x48
 800a174:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a176:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a17a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a17e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a182:	2900      	cmp	r1, #0
 800a184:	d054      	beq.n	800a230 <_dtoa_r+0x5b0>
 800a186:	2000      	movs	r0, #0
 800a188:	4928      	ldr	r1, [pc, #160]	; (800a22c <_dtoa_r+0x5ac>)
 800a18a:	f7f6 facf 	bl	800072c <__aeabi_ddiv>
 800a18e:	463b      	mov	r3, r7
 800a190:	4632      	mov	r2, r6
 800a192:	f7f5 ffe9 	bl	8000168 <__aeabi_dsub>
 800a196:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a19a:	9f03      	ldr	r7, [sp, #12]
 800a19c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1a0:	f7f6 fc4a 	bl	8000a38 <__aeabi_d2iz>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f7f6 f92d 	bl	8000404 <__aeabi_i2d>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1b2:	f7f5 ffd9 	bl	8000168 <__aeabi_dsub>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	3430      	adds	r4, #48	; 0x30
 800a1bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c4:	f807 4b01 	strb.w	r4, [r7], #1
 800a1c8:	f7f6 fbf8 	bl	80009bc <__aeabi_dcmplt>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d173      	bne.n	800a2b8 <_dtoa_r+0x638>
 800a1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4911      	ldr	r1, [pc, #68]	; (800a21c <_dtoa_r+0x59c>)
 800a1d8:	f7f5 ffc6 	bl	8000168 <__aeabi_dsub>
 800a1dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1e0:	f7f6 fbec 	bl	80009bc <__aeabi_dcmplt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f040 80b6 	bne.w	800a356 <_dtoa_r+0x6d6>
 800a1ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ec:	429f      	cmp	r7, r3
 800a1ee:	f43f af7a 	beq.w	800a0e6 <_dtoa_r+0x466>
 800a1f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	4b09      	ldr	r3, [pc, #36]	; (800a220 <_dtoa_r+0x5a0>)
 800a1fa:	f7f6 f96d 	bl	80004d8 <__aeabi_dmul>
 800a1fe:	2200      	movs	r2, #0
 800a200:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a208:	4b05      	ldr	r3, [pc, #20]	; (800a220 <_dtoa_r+0x5a0>)
 800a20a:	f7f6 f965 	bl	80004d8 <__aeabi_dmul>
 800a20e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a212:	e7c3      	b.n	800a19c <_dtoa_r+0x51c>
 800a214:	0800bdd0 	.word	0x0800bdd0
 800a218:	0800bda8 	.word	0x0800bda8
 800a21c:	3ff00000 	.word	0x3ff00000
 800a220:	40240000 	.word	0x40240000
 800a224:	401c0000 	.word	0x401c0000
 800a228:	40140000 	.word	0x40140000
 800a22c:	3fe00000 	.word	0x3fe00000
 800a230:	4630      	mov	r0, r6
 800a232:	4639      	mov	r1, r7
 800a234:	f7f6 f950 	bl	80004d8 <__aeabi_dmul>
 800a238:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a23a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a23e:	9c03      	ldr	r4, [sp, #12]
 800a240:	9314      	str	r3, [sp, #80]	; 0x50
 800a242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a246:	f7f6 fbf7 	bl	8000a38 <__aeabi_d2iz>
 800a24a:	9015      	str	r0, [sp, #84]	; 0x54
 800a24c:	f7f6 f8da 	bl	8000404 <__aeabi_i2d>
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a258:	f7f5 ff86 	bl	8000168 <__aeabi_dsub>
 800a25c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a25e:	4606      	mov	r6, r0
 800a260:	3330      	adds	r3, #48	; 0x30
 800a262:	f804 3b01 	strb.w	r3, [r4], #1
 800a266:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a268:	460f      	mov	r7, r1
 800a26a:	429c      	cmp	r4, r3
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	d124      	bne.n	800a2bc <_dtoa_r+0x63c>
 800a272:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a276:	4baf      	ldr	r3, [pc, #700]	; (800a534 <_dtoa_r+0x8b4>)
 800a278:	f7f5 ff78 	bl	800016c <__adddf3>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fbb8 	bl	80009f8 <__aeabi_dcmpgt>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d163      	bne.n	800a354 <_dtoa_r+0x6d4>
 800a28c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a290:	2000      	movs	r0, #0
 800a292:	49a8      	ldr	r1, [pc, #672]	; (800a534 <_dtoa_r+0x8b4>)
 800a294:	f7f5 ff68 	bl	8000168 <__aeabi_dsub>
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4630      	mov	r0, r6
 800a29e:	4639      	mov	r1, r7
 800a2a0:	f7f6 fb8c 	bl	80009bc <__aeabi_dcmplt>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	f43f af1e 	beq.w	800a0e6 <_dtoa_r+0x466>
 800a2aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a2ac:	1e7b      	subs	r3, r7, #1
 800a2ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a2b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a2b4:	2b30      	cmp	r3, #48	; 0x30
 800a2b6:	d0f8      	beq.n	800a2aa <_dtoa_r+0x62a>
 800a2b8:	46c3      	mov	fp, r8
 800a2ba:	e03b      	b.n	800a334 <_dtoa_r+0x6b4>
 800a2bc:	4b9e      	ldr	r3, [pc, #632]	; (800a538 <_dtoa_r+0x8b8>)
 800a2be:	f7f6 f90b 	bl	80004d8 <__aeabi_dmul>
 800a2c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c6:	e7bc      	b.n	800a242 <_dtoa_r+0x5c2>
 800a2c8:	9f03      	ldr	r7, [sp, #12]
 800a2ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	4649      	mov	r1, r9
 800a2d6:	f7f6 fa29 	bl	800072c <__aeabi_ddiv>
 800a2da:	f7f6 fbad 	bl	8000a38 <__aeabi_d2iz>
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f7f6 f890 	bl	8000404 <__aeabi_i2d>
 800a2e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2e8:	f7f6 f8f6 	bl	80004d8 <__aeabi_dmul>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	4640      	mov	r0, r8
 800a2f2:	4649      	mov	r1, r9
 800a2f4:	f7f5 ff38 	bl	8000168 <__aeabi_dsub>
 800a2f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a2fc:	f807 6b01 	strb.w	r6, [r7], #1
 800a300:	9e03      	ldr	r6, [sp, #12]
 800a302:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a306:	1bbe      	subs	r6, r7, r6
 800a308:	45b4      	cmp	ip, r6
 800a30a:	4602      	mov	r2, r0
 800a30c:	460b      	mov	r3, r1
 800a30e:	d136      	bne.n	800a37e <_dtoa_r+0x6fe>
 800a310:	f7f5 ff2c 	bl	800016c <__adddf3>
 800a314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a318:	4680      	mov	r8, r0
 800a31a:	4689      	mov	r9, r1
 800a31c:	f7f6 fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 800a320:	bb58      	cbnz	r0, 800a37a <_dtoa_r+0x6fa>
 800a322:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800a32e:	b108      	cbz	r0, 800a334 <_dtoa_r+0x6b4>
 800a330:	07e3      	lsls	r3, r4, #31
 800a332:	d422      	bmi.n	800a37a <_dtoa_r+0x6fa>
 800a334:	4651      	mov	r1, sl
 800a336:	4628      	mov	r0, r5
 800a338:	f000 fbc2 	bl	800aac0 <_Bfree>
 800a33c:	2300      	movs	r3, #0
 800a33e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a340:	703b      	strb	r3, [r7, #0]
 800a342:	f10b 0301 	add.w	r3, fp, #1
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f43f ace6 	beq.w	8009d1c <_dtoa_r+0x9c>
 800a350:	601f      	str	r7, [r3, #0]
 800a352:	e4e3      	b.n	8009d1c <_dtoa_r+0x9c>
 800a354:	4627      	mov	r7, r4
 800a356:	463b      	mov	r3, r7
 800a358:	461f      	mov	r7, r3
 800a35a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a35e:	2a39      	cmp	r2, #57	; 0x39
 800a360:	d107      	bne.n	800a372 <_dtoa_r+0x6f2>
 800a362:	9a03      	ldr	r2, [sp, #12]
 800a364:	429a      	cmp	r2, r3
 800a366:	d1f7      	bne.n	800a358 <_dtoa_r+0x6d8>
 800a368:	2230      	movs	r2, #48	; 0x30
 800a36a:	9903      	ldr	r1, [sp, #12]
 800a36c:	f108 0801 	add.w	r8, r8, #1
 800a370:	700a      	strb	r2, [r1, #0]
 800a372:	781a      	ldrb	r2, [r3, #0]
 800a374:	3201      	adds	r2, #1
 800a376:	701a      	strb	r2, [r3, #0]
 800a378:	e79e      	b.n	800a2b8 <_dtoa_r+0x638>
 800a37a:	46d8      	mov	r8, fp
 800a37c:	e7eb      	b.n	800a356 <_dtoa_r+0x6d6>
 800a37e:	2200      	movs	r2, #0
 800a380:	4b6d      	ldr	r3, [pc, #436]	; (800a538 <_dtoa_r+0x8b8>)
 800a382:	f7f6 f8a9 	bl	80004d8 <__aeabi_dmul>
 800a386:	2200      	movs	r2, #0
 800a388:	2300      	movs	r3, #0
 800a38a:	4680      	mov	r8, r0
 800a38c:	4689      	mov	r9, r1
 800a38e:	f7f6 fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 800a392:	2800      	cmp	r0, #0
 800a394:	d09b      	beq.n	800a2ce <_dtoa_r+0x64e>
 800a396:	e7cd      	b.n	800a334 <_dtoa_r+0x6b4>
 800a398:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a39a:	2a00      	cmp	r2, #0
 800a39c:	f000 80c4 	beq.w	800a528 <_dtoa_r+0x8a8>
 800a3a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a3a2:	2a01      	cmp	r2, #1
 800a3a4:	f300 80a8 	bgt.w	800a4f8 <_dtoa_r+0x878>
 800a3a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	f000 80a0 	beq.w	800a4f0 <_dtoa_r+0x870>
 800a3b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a3b4:	464f      	mov	r7, r9
 800a3b6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ba:	2101      	movs	r1, #1
 800a3bc:	441a      	add	r2, r3
 800a3be:	4628      	mov	r0, r5
 800a3c0:	4499      	add	r9, r3
 800a3c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3c4:	f000 fc32 	bl	800ac2c <__i2b>
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	b15f      	cbz	r7, 800a3e4 <_dtoa_r+0x764>
 800a3cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd08      	ble.n	800a3e4 <_dtoa_r+0x764>
 800a3d2:	42bb      	cmp	r3, r7
 800a3d4:	bfa8      	it	ge
 800a3d6:	463b      	movge	r3, r7
 800a3d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3da:	eba9 0903 	sub.w	r9, r9, r3
 800a3de:	1aff      	subs	r7, r7, r3
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e6:	b1f3      	cbz	r3, 800a426 <_dtoa_r+0x7a6>
 800a3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80a0 	beq.w	800a530 <_dtoa_r+0x8b0>
 800a3f0:	2c00      	cmp	r4, #0
 800a3f2:	dd10      	ble.n	800a416 <_dtoa_r+0x796>
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	f000 fcd5 	bl	800ada8 <__pow5mult>
 800a3fe:	4652      	mov	r2, sl
 800a400:	4601      	mov	r1, r0
 800a402:	4606      	mov	r6, r0
 800a404:	4628      	mov	r0, r5
 800a406:	f000 fc27 	bl	800ac58 <__multiply>
 800a40a:	4680      	mov	r8, r0
 800a40c:	4651      	mov	r1, sl
 800a40e:	4628      	mov	r0, r5
 800a410:	f000 fb56 	bl	800aac0 <_Bfree>
 800a414:	46c2      	mov	sl, r8
 800a416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a418:	1b1a      	subs	r2, r3, r4
 800a41a:	d004      	beq.n	800a426 <_dtoa_r+0x7a6>
 800a41c:	4651      	mov	r1, sl
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 fcc2 	bl	800ada8 <__pow5mult>
 800a424:	4682      	mov	sl, r0
 800a426:	2101      	movs	r1, #1
 800a428:	4628      	mov	r0, r5
 800a42a:	f000 fbff 	bl	800ac2c <__i2b>
 800a42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a430:	4604      	mov	r4, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	f340 8082 	ble.w	800a53c <_dtoa_r+0x8bc>
 800a438:	461a      	mov	r2, r3
 800a43a:	4601      	mov	r1, r0
 800a43c:	4628      	mov	r0, r5
 800a43e:	f000 fcb3 	bl	800ada8 <__pow5mult>
 800a442:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a444:	4604      	mov	r4, r0
 800a446:	2b01      	cmp	r3, #1
 800a448:	dd7b      	ble.n	800a542 <_dtoa_r+0x8c2>
 800a44a:	f04f 0800 	mov.w	r8, #0
 800a44e:	6923      	ldr	r3, [r4, #16]
 800a450:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a454:	6918      	ldr	r0, [r3, #16]
 800a456:	f000 fb9b 	bl	800ab90 <__hi0bits>
 800a45a:	f1c0 0020 	rsb	r0, r0, #32
 800a45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a460:	4418      	add	r0, r3
 800a462:	f010 001f 	ands.w	r0, r0, #31
 800a466:	f000 8092 	beq.w	800a58e <_dtoa_r+0x90e>
 800a46a:	f1c0 0320 	rsb	r3, r0, #32
 800a46e:	2b04      	cmp	r3, #4
 800a470:	f340 8085 	ble.w	800a57e <_dtoa_r+0x8fe>
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	f1c0 001c 	rsb	r0, r0, #28
 800a47a:	4403      	add	r3, r0
 800a47c:	4481      	add	r9, r0
 800a47e:	4407      	add	r7, r0
 800a480:	9309      	str	r3, [sp, #36]	; 0x24
 800a482:	f1b9 0f00 	cmp.w	r9, #0
 800a486:	dd05      	ble.n	800a494 <_dtoa_r+0x814>
 800a488:	4651      	mov	r1, sl
 800a48a:	464a      	mov	r2, r9
 800a48c:	4628      	mov	r0, r5
 800a48e:	f000 fce5 	bl	800ae5c <__lshift>
 800a492:	4682      	mov	sl, r0
 800a494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd05      	ble.n	800a4a6 <_dtoa_r+0x826>
 800a49a:	4621      	mov	r1, r4
 800a49c:	461a      	mov	r2, r3
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 fcdc 	bl	800ae5c <__lshift>
 800a4a4:	4604      	mov	r4, r0
 800a4a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d072      	beq.n	800a592 <_dtoa_r+0x912>
 800a4ac:	4621      	mov	r1, r4
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	f000 fd40 	bl	800af34 <__mcmp>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	da6c      	bge.n	800a592 <_dtoa_r+0x912>
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4651      	mov	r1, sl
 800a4bc:	220a      	movs	r2, #10
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 fb20 	bl	800ab04 <__multadd>
 800a4c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 81ac 	beq.w	800a82a <_dtoa_r+0xbaa>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4631      	mov	r1, r6
 800a4d6:	220a      	movs	r2, #10
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f000 fb13 	bl	800ab04 <__multadd>
 800a4de:	9b06      	ldr	r3, [sp, #24]
 800a4e0:	4606      	mov	r6, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	f300 8093 	bgt.w	800a60e <_dtoa_r+0x98e>
 800a4e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	dc59      	bgt.n	800a5a2 <_dtoa_r+0x922>
 800a4ee:	e08e      	b.n	800a60e <_dtoa_r+0x98e>
 800a4f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4f6:	e75d      	b.n	800a3b4 <_dtoa_r+0x734>
 800a4f8:	9b08      	ldr	r3, [sp, #32]
 800a4fa:	1e5c      	subs	r4, r3, #1
 800a4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fe:	42a3      	cmp	r3, r4
 800a500:	bfbf      	itttt	lt
 800a502:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a504:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a506:	1ae3      	sublt	r3, r4, r3
 800a508:	18d2      	addlt	r2, r2, r3
 800a50a:	bfa8      	it	ge
 800a50c:	1b1c      	subge	r4, r3, r4
 800a50e:	9b08      	ldr	r3, [sp, #32]
 800a510:	bfbe      	ittt	lt
 800a512:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a514:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a516:	2400      	movlt	r4, #0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfb5      	itete	lt
 800a51c:	eba9 0703 	sublt.w	r7, r9, r3
 800a520:	464f      	movge	r7, r9
 800a522:	2300      	movlt	r3, #0
 800a524:	9b08      	ldrge	r3, [sp, #32]
 800a526:	e747      	b.n	800a3b8 <_dtoa_r+0x738>
 800a528:	464f      	mov	r7, r9
 800a52a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a52c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a52e:	e74c      	b.n	800a3ca <_dtoa_r+0x74a>
 800a530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a532:	e773      	b.n	800a41c <_dtoa_r+0x79c>
 800a534:	3fe00000 	.word	0x3fe00000
 800a538:	40240000 	.word	0x40240000
 800a53c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a53e:	2b01      	cmp	r3, #1
 800a540:	dc18      	bgt.n	800a574 <_dtoa_r+0x8f4>
 800a542:	9b04      	ldr	r3, [sp, #16]
 800a544:	b9b3      	cbnz	r3, 800a574 <_dtoa_r+0x8f4>
 800a546:	9b05      	ldr	r3, [sp, #20]
 800a548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a54c:	b993      	cbnz	r3, 800a574 <_dtoa_r+0x8f4>
 800a54e:	9b05      	ldr	r3, [sp, #20]
 800a550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a554:	0d1b      	lsrs	r3, r3, #20
 800a556:	051b      	lsls	r3, r3, #20
 800a558:	b17b      	cbz	r3, 800a57a <_dtoa_r+0x8fa>
 800a55a:	f04f 0801 	mov.w	r8, #1
 800a55e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a560:	f109 0901 	add.w	r9, r9, #1
 800a564:	3301      	adds	r3, #1
 800a566:	9309      	str	r3, [sp, #36]	; 0x24
 800a568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f47f af6f 	bne.w	800a44e <_dtoa_r+0x7ce>
 800a570:	2001      	movs	r0, #1
 800a572:	e774      	b.n	800a45e <_dtoa_r+0x7de>
 800a574:	f04f 0800 	mov.w	r8, #0
 800a578:	e7f6      	b.n	800a568 <_dtoa_r+0x8e8>
 800a57a:	4698      	mov	r8, r3
 800a57c:	e7f4      	b.n	800a568 <_dtoa_r+0x8e8>
 800a57e:	d080      	beq.n	800a482 <_dtoa_r+0x802>
 800a580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a582:	331c      	adds	r3, #28
 800a584:	441a      	add	r2, r3
 800a586:	4499      	add	r9, r3
 800a588:	441f      	add	r7, r3
 800a58a:	9209      	str	r2, [sp, #36]	; 0x24
 800a58c:	e779      	b.n	800a482 <_dtoa_r+0x802>
 800a58e:	4603      	mov	r3, r0
 800a590:	e7f6      	b.n	800a580 <_dtoa_r+0x900>
 800a592:	9b08      	ldr	r3, [sp, #32]
 800a594:	2b00      	cmp	r3, #0
 800a596:	dc34      	bgt.n	800a602 <_dtoa_r+0x982>
 800a598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	dd31      	ble.n	800a602 <_dtoa_r+0x982>
 800a59e:	9b08      	ldr	r3, [sp, #32]
 800a5a0:	9306      	str	r3, [sp, #24]
 800a5a2:	9b06      	ldr	r3, [sp, #24]
 800a5a4:	b963      	cbnz	r3, 800a5c0 <_dtoa_r+0x940>
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	2205      	movs	r2, #5
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	f000 faaa 	bl	800ab04 <__multadd>
 800a5b0:	4601      	mov	r1, r0
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	4650      	mov	r0, sl
 800a5b6:	f000 fcbd 	bl	800af34 <__mcmp>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	f73f adbf 	bgt.w	800a13e <_dtoa_r+0x4be>
 800a5c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5c2:	9f03      	ldr	r7, [sp, #12]
 800a5c4:	ea6f 0b03 	mvn.w	fp, r3
 800a5c8:	f04f 0800 	mov.w	r8, #0
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 fa76 	bl	800aac0 <_Bfree>
 800a5d4:	2e00      	cmp	r6, #0
 800a5d6:	f43f aead 	beq.w	800a334 <_dtoa_r+0x6b4>
 800a5da:	f1b8 0f00 	cmp.w	r8, #0
 800a5de:	d005      	beq.n	800a5ec <_dtoa_r+0x96c>
 800a5e0:	45b0      	cmp	r8, r6
 800a5e2:	d003      	beq.n	800a5ec <_dtoa_r+0x96c>
 800a5e4:	4641      	mov	r1, r8
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	f000 fa6a 	bl	800aac0 <_Bfree>
 800a5ec:	4631      	mov	r1, r6
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f000 fa66 	bl	800aac0 <_Bfree>
 800a5f4:	e69e      	b.n	800a334 <_dtoa_r+0x6b4>
 800a5f6:	2400      	movs	r4, #0
 800a5f8:	4626      	mov	r6, r4
 800a5fa:	e7e1      	b.n	800a5c0 <_dtoa_r+0x940>
 800a5fc:	46c3      	mov	fp, r8
 800a5fe:	4626      	mov	r6, r4
 800a600:	e59d      	b.n	800a13e <_dtoa_r+0x4be>
 800a602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a604:	2b00      	cmp	r3, #0
 800a606:	f000 80c8 	beq.w	800a79a <_dtoa_r+0xb1a>
 800a60a:	9b08      	ldr	r3, [sp, #32]
 800a60c:	9306      	str	r3, [sp, #24]
 800a60e:	2f00      	cmp	r7, #0
 800a610:	dd05      	ble.n	800a61e <_dtoa_r+0x99e>
 800a612:	4631      	mov	r1, r6
 800a614:	463a      	mov	r2, r7
 800a616:	4628      	mov	r0, r5
 800a618:	f000 fc20 	bl	800ae5c <__lshift>
 800a61c:	4606      	mov	r6, r0
 800a61e:	f1b8 0f00 	cmp.w	r8, #0
 800a622:	d05b      	beq.n	800a6dc <_dtoa_r+0xa5c>
 800a624:	4628      	mov	r0, r5
 800a626:	6871      	ldr	r1, [r6, #4]
 800a628:	f000 fa0a 	bl	800aa40 <_Balloc>
 800a62c:	4607      	mov	r7, r0
 800a62e:	b928      	cbnz	r0, 800a63c <_dtoa_r+0x9bc>
 800a630:	4602      	mov	r2, r0
 800a632:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a636:	4b81      	ldr	r3, [pc, #516]	; (800a83c <_dtoa_r+0xbbc>)
 800a638:	f7ff bb36 	b.w	8009ca8 <_dtoa_r+0x28>
 800a63c:	6932      	ldr	r2, [r6, #16]
 800a63e:	f106 010c 	add.w	r1, r6, #12
 800a642:	3202      	adds	r2, #2
 800a644:	0092      	lsls	r2, r2, #2
 800a646:	300c      	adds	r0, #12
 800a648:	f7ff fa83 	bl	8009b52 <memcpy>
 800a64c:	2201      	movs	r2, #1
 800a64e:	4639      	mov	r1, r7
 800a650:	4628      	mov	r0, r5
 800a652:	f000 fc03 	bl	800ae5c <__lshift>
 800a656:	46b0      	mov	r8, r6
 800a658:	4606      	mov	r6, r0
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	9a03      	ldr	r2, [sp, #12]
 800a65e:	3301      	adds	r3, #1
 800a660:	9308      	str	r3, [sp, #32]
 800a662:	9b06      	ldr	r3, [sp, #24]
 800a664:	4413      	add	r3, r2
 800a666:	930b      	str	r3, [sp, #44]	; 0x2c
 800a668:	9b04      	ldr	r3, [sp, #16]
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	930a      	str	r3, [sp, #40]	; 0x28
 800a670:	9b08      	ldr	r3, [sp, #32]
 800a672:	4621      	mov	r1, r4
 800a674:	3b01      	subs	r3, #1
 800a676:	4650      	mov	r0, sl
 800a678:	9304      	str	r3, [sp, #16]
 800a67a:	f7ff fa78 	bl	8009b6e <quorem>
 800a67e:	4641      	mov	r1, r8
 800a680:	9006      	str	r0, [sp, #24]
 800a682:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a686:	4650      	mov	r0, sl
 800a688:	f000 fc54 	bl	800af34 <__mcmp>
 800a68c:	4632      	mov	r2, r6
 800a68e:	9009      	str	r0, [sp, #36]	; 0x24
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f000 fc6a 	bl	800af6c <__mdiff>
 800a698:	68c2      	ldr	r2, [r0, #12]
 800a69a:	4607      	mov	r7, r0
 800a69c:	bb02      	cbnz	r2, 800a6e0 <_dtoa_r+0xa60>
 800a69e:	4601      	mov	r1, r0
 800a6a0:	4650      	mov	r0, sl
 800a6a2:	f000 fc47 	bl	800af34 <__mcmp>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	920c      	str	r2, [sp, #48]	; 0x30
 800a6ae:	f000 fa07 	bl	800aac0 <_Bfree>
 800a6b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6b6:	9f08      	ldr	r7, [sp, #32]
 800a6b8:	ea43 0102 	orr.w	r1, r3, r2
 800a6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6be:	4319      	orrs	r1, r3
 800a6c0:	d110      	bne.n	800a6e4 <_dtoa_r+0xa64>
 800a6c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6c6:	d029      	beq.n	800a71c <_dtoa_r+0xa9c>
 800a6c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dd02      	ble.n	800a6d4 <_dtoa_r+0xa54>
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a6d4:	9b04      	ldr	r3, [sp, #16]
 800a6d6:	f883 9000 	strb.w	r9, [r3]
 800a6da:	e777      	b.n	800a5cc <_dtoa_r+0x94c>
 800a6dc:	4630      	mov	r0, r6
 800a6de:	e7ba      	b.n	800a656 <_dtoa_r+0x9d6>
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	e7e1      	b.n	800a6a8 <_dtoa_r+0xa28>
 800a6e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	db04      	blt.n	800a6f4 <_dtoa_r+0xa74>
 800a6ea:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	d120      	bne.n	800a736 <_dtoa_r+0xab6>
 800a6f4:	2a00      	cmp	r2, #0
 800a6f6:	dded      	ble.n	800a6d4 <_dtoa_r+0xa54>
 800a6f8:	4651      	mov	r1, sl
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f000 fbad 	bl	800ae5c <__lshift>
 800a702:	4621      	mov	r1, r4
 800a704:	4682      	mov	sl, r0
 800a706:	f000 fc15 	bl	800af34 <__mcmp>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	dc03      	bgt.n	800a716 <_dtoa_r+0xa96>
 800a70e:	d1e1      	bne.n	800a6d4 <_dtoa_r+0xa54>
 800a710:	f019 0f01 	tst.w	r9, #1
 800a714:	d0de      	beq.n	800a6d4 <_dtoa_r+0xa54>
 800a716:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a71a:	d1d8      	bne.n	800a6ce <_dtoa_r+0xa4e>
 800a71c:	2339      	movs	r3, #57	; 0x39
 800a71e:	9a04      	ldr	r2, [sp, #16]
 800a720:	7013      	strb	r3, [r2, #0]
 800a722:	463b      	mov	r3, r7
 800a724:	461f      	mov	r7, r3
 800a726:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a72a:	3b01      	subs	r3, #1
 800a72c:	2a39      	cmp	r2, #57	; 0x39
 800a72e:	d06b      	beq.n	800a808 <_dtoa_r+0xb88>
 800a730:	3201      	adds	r2, #1
 800a732:	701a      	strb	r2, [r3, #0]
 800a734:	e74a      	b.n	800a5cc <_dtoa_r+0x94c>
 800a736:	2a00      	cmp	r2, #0
 800a738:	dd07      	ble.n	800a74a <_dtoa_r+0xaca>
 800a73a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a73e:	d0ed      	beq.n	800a71c <_dtoa_r+0xa9c>
 800a740:	9a04      	ldr	r2, [sp, #16]
 800a742:	f109 0301 	add.w	r3, r9, #1
 800a746:	7013      	strb	r3, [r2, #0]
 800a748:	e740      	b.n	800a5cc <_dtoa_r+0x94c>
 800a74a:	9b08      	ldr	r3, [sp, #32]
 800a74c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a74e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a752:	4293      	cmp	r3, r2
 800a754:	d042      	beq.n	800a7dc <_dtoa_r+0xb5c>
 800a756:	4651      	mov	r1, sl
 800a758:	2300      	movs	r3, #0
 800a75a:	220a      	movs	r2, #10
 800a75c:	4628      	mov	r0, r5
 800a75e:	f000 f9d1 	bl	800ab04 <__multadd>
 800a762:	45b0      	cmp	r8, r6
 800a764:	4682      	mov	sl, r0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	f04f 020a 	mov.w	r2, #10
 800a76e:	4641      	mov	r1, r8
 800a770:	4628      	mov	r0, r5
 800a772:	d107      	bne.n	800a784 <_dtoa_r+0xb04>
 800a774:	f000 f9c6 	bl	800ab04 <__multadd>
 800a778:	4680      	mov	r8, r0
 800a77a:	4606      	mov	r6, r0
 800a77c:	9b08      	ldr	r3, [sp, #32]
 800a77e:	3301      	adds	r3, #1
 800a780:	9308      	str	r3, [sp, #32]
 800a782:	e775      	b.n	800a670 <_dtoa_r+0x9f0>
 800a784:	f000 f9be 	bl	800ab04 <__multadd>
 800a788:	4631      	mov	r1, r6
 800a78a:	4680      	mov	r8, r0
 800a78c:	2300      	movs	r3, #0
 800a78e:	220a      	movs	r2, #10
 800a790:	4628      	mov	r0, r5
 800a792:	f000 f9b7 	bl	800ab04 <__multadd>
 800a796:	4606      	mov	r6, r0
 800a798:	e7f0      	b.n	800a77c <_dtoa_r+0xafc>
 800a79a:	9b08      	ldr	r3, [sp, #32]
 800a79c:	9306      	str	r3, [sp, #24]
 800a79e:	9f03      	ldr	r7, [sp, #12]
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	f7ff f9e3 	bl	8009b6e <quorem>
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a7ae:	f807 9b01 	strb.w	r9, [r7], #1
 800a7b2:	1afa      	subs	r2, r7, r3
 800a7b4:	9b06      	ldr	r3, [sp, #24]
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	dd07      	ble.n	800a7ca <_dtoa_r+0xb4a>
 800a7ba:	4651      	mov	r1, sl
 800a7bc:	2300      	movs	r3, #0
 800a7be:	220a      	movs	r2, #10
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 f99f 	bl	800ab04 <__multadd>
 800a7c6:	4682      	mov	sl, r0
 800a7c8:	e7ea      	b.n	800a7a0 <_dtoa_r+0xb20>
 800a7ca:	9b06      	ldr	r3, [sp, #24]
 800a7cc:	f04f 0800 	mov.w	r8, #0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bfcc      	ite	gt
 800a7d4:	461f      	movgt	r7, r3
 800a7d6:	2701      	movle	r7, #1
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	441f      	add	r7, r3
 800a7dc:	4651      	mov	r1, sl
 800a7de:	2201      	movs	r2, #1
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	f000 fb3b 	bl	800ae5c <__lshift>
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	4682      	mov	sl, r0
 800a7ea:	f000 fba3 	bl	800af34 <__mcmp>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	dc97      	bgt.n	800a722 <_dtoa_r+0xaa2>
 800a7f2:	d102      	bne.n	800a7fa <_dtoa_r+0xb7a>
 800a7f4:	f019 0f01 	tst.w	r9, #1
 800a7f8:	d193      	bne.n	800a722 <_dtoa_r+0xaa2>
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	461f      	mov	r7, r3
 800a7fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a802:	2a30      	cmp	r2, #48	; 0x30
 800a804:	d0fa      	beq.n	800a7fc <_dtoa_r+0xb7c>
 800a806:	e6e1      	b.n	800a5cc <_dtoa_r+0x94c>
 800a808:	9a03      	ldr	r2, [sp, #12]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d18a      	bne.n	800a724 <_dtoa_r+0xaa4>
 800a80e:	2331      	movs	r3, #49	; 0x31
 800a810:	f10b 0b01 	add.w	fp, fp, #1
 800a814:	e797      	b.n	800a746 <_dtoa_r+0xac6>
 800a816:	4b0a      	ldr	r3, [pc, #40]	; (800a840 <_dtoa_r+0xbc0>)
 800a818:	f7ff ba9f 	b.w	8009d5a <_dtoa_r+0xda>
 800a81c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f47f aa77 	bne.w	8009d12 <_dtoa_r+0x92>
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <_dtoa_r+0xbc4>)
 800a826:	f7ff ba98 	b.w	8009d5a <_dtoa_r+0xda>
 800a82a:	9b06      	ldr	r3, [sp, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	dcb6      	bgt.n	800a79e <_dtoa_r+0xb1e>
 800a830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a832:	2b02      	cmp	r3, #2
 800a834:	f73f aeb5 	bgt.w	800a5a2 <_dtoa_r+0x922>
 800a838:	e7b1      	b.n	800a79e <_dtoa_r+0xb1e>
 800a83a:	bf00      	nop
 800a83c:	0800bd3e 	.word	0x0800bd3e
 800a840:	0800bc9e 	.word	0x0800bc9e
 800a844:	0800bcc2 	.word	0x0800bcc2

0800a848 <_free_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4605      	mov	r5, r0
 800a84c:	2900      	cmp	r1, #0
 800a84e:	d040      	beq.n	800a8d2 <_free_r+0x8a>
 800a850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a854:	1f0c      	subs	r4, r1, #4
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfb8      	it	lt
 800a85a:	18e4      	addlt	r4, r4, r3
 800a85c:	f000 f8e4 	bl	800aa28 <__malloc_lock>
 800a860:	4a1c      	ldr	r2, [pc, #112]	; (800a8d4 <_free_r+0x8c>)
 800a862:	6813      	ldr	r3, [r2, #0]
 800a864:	b933      	cbnz	r3, 800a874 <_free_r+0x2c>
 800a866:	6063      	str	r3, [r4, #4]
 800a868:	6014      	str	r4, [r2, #0]
 800a86a:	4628      	mov	r0, r5
 800a86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a870:	f000 b8e0 	b.w	800aa34 <__malloc_unlock>
 800a874:	42a3      	cmp	r3, r4
 800a876:	d908      	bls.n	800a88a <_free_r+0x42>
 800a878:	6820      	ldr	r0, [r4, #0]
 800a87a:	1821      	adds	r1, r4, r0
 800a87c:	428b      	cmp	r3, r1
 800a87e:	bf01      	itttt	eq
 800a880:	6819      	ldreq	r1, [r3, #0]
 800a882:	685b      	ldreq	r3, [r3, #4]
 800a884:	1809      	addeq	r1, r1, r0
 800a886:	6021      	streq	r1, [r4, #0]
 800a888:	e7ed      	b.n	800a866 <_free_r+0x1e>
 800a88a:	461a      	mov	r2, r3
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	b10b      	cbz	r3, 800a894 <_free_r+0x4c>
 800a890:	42a3      	cmp	r3, r4
 800a892:	d9fa      	bls.n	800a88a <_free_r+0x42>
 800a894:	6811      	ldr	r1, [r2, #0]
 800a896:	1850      	adds	r0, r2, r1
 800a898:	42a0      	cmp	r0, r4
 800a89a:	d10b      	bne.n	800a8b4 <_free_r+0x6c>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	4401      	add	r1, r0
 800a8a0:	1850      	adds	r0, r2, r1
 800a8a2:	4283      	cmp	r3, r0
 800a8a4:	6011      	str	r1, [r2, #0]
 800a8a6:	d1e0      	bne.n	800a86a <_free_r+0x22>
 800a8a8:	6818      	ldr	r0, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	4408      	add	r0, r1
 800a8ae:	6010      	str	r0, [r2, #0]
 800a8b0:	6053      	str	r3, [r2, #4]
 800a8b2:	e7da      	b.n	800a86a <_free_r+0x22>
 800a8b4:	d902      	bls.n	800a8bc <_free_r+0x74>
 800a8b6:	230c      	movs	r3, #12
 800a8b8:	602b      	str	r3, [r5, #0]
 800a8ba:	e7d6      	b.n	800a86a <_free_r+0x22>
 800a8bc:	6820      	ldr	r0, [r4, #0]
 800a8be:	1821      	adds	r1, r4, r0
 800a8c0:	428b      	cmp	r3, r1
 800a8c2:	bf01      	itttt	eq
 800a8c4:	6819      	ldreq	r1, [r3, #0]
 800a8c6:	685b      	ldreq	r3, [r3, #4]
 800a8c8:	1809      	addeq	r1, r1, r0
 800a8ca:	6021      	streq	r1, [r4, #0]
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	6054      	str	r4, [r2, #4]
 800a8d0:	e7cb      	b.n	800a86a <_free_r+0x22>
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
 800a8d4:	20000554 	.word	0x20000554

0800a8d8 <malloc>:
 800a8d8:	4b02      	ldr	r3, [pc, #8]	; (800a8e4 <malloc+0xc>)
 800a8da:	4601      	mov	r1, r0
 800a8dc:	6818      	ldr	r0, [r3, #0]
 800a8de:	f000 b823 	b.w	800a928 <_malloc_r>
 800a8e2:	bf00      	nop
 800a8e4:	20000094 	.word	0x20000094

0800a8e8 <sbrk_aligned>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	4e0e      	ldr	r6, [pc, #56]	; (800a924 <sbrk_aligned+0x3c>)
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	6831      	ldr	r1, [r6, #0]
 800a8f0:	4605      	mov	r5, r0
 800a8f2:	b911      	cbnz	r1, 800a8fa <sbrk_aligned+0x12>
 800a8f4:	f000 fe38 	bl	800b568 <_sbrk_r>
 800a8f8:	6030      	str	r0, [r6, #0]
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	f000 fe33 	bl	800b568 <_sbrk_r>
 800a902:	1c43      	adds	r3, r0, #1
 800a904:	d00a      	beq.n	800a91c <sbrk_aligned+0x34>
 800a906:	1cc4      	adds	r4, r0, #3
 800a908:	f024 0403 	bic.w	r4, r4, #3
 800a90c:	42a0      	cmp	r0, r4
 800a90e:	d007      	beq.n	800a920 <sbrk_aligned+0x38>
 800a910:	1a21      	subs	r1, r4, r0
 800a912:	4628      	mov	r0, r5
 800a914:	f000 fe28 	bl	800b568 <_sbrk_r>
 800a918:	3001      	adds	r0, #1
 800a91a:	d101      	bne.n	800a920 <sbrk_aligned+0x38>
 800a91c:	f04f 34ff 	mov.w	r4, #4294967295
 800a920:	4620      	mov	r0, r4
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	20000558 	.word	0x20000558

0800a928 <_malloc_r>:
 800a928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a92c:	1ccd      	adds	r5, r1, #3
 800a92e:	f025 0503 	bic.w	r5, r5, #3
 800a932:	3508      	adds	r5, #8
 800a934:	2d0c      	cmp	r5, #12
 800a936:	bf38      	it	cc
 800a938:	250c      	movcc	r5, #12
 800a93a:	2d00      	cmp	r5, #0
 800a93c:	4607      	mov	r7, r0
 800a93e:	db01      	blt.n	800a944 <_malloc_r+0x1c>
 800a940:	42a9      	cmp	r1, r5
 800a942:	d905      	bls.n	800a950 <_malloc_r+0x28>
 800a944:	230c      	movs	r3, #12
 800a946:	2600      	movs	r6, #0
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	4630      	mov	r0, r6
 800a94c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa24 <_malloc_r+0xfc>
 800a954:	f000 f868 	bl	800aa28 <__malloc_lock>
 800a958:	f8d8 3000 	ldr.w	r3, [r8]
 800a95c:	461c      	mov	r4, r3
 800a95e:	bb5c      	cbnz	r4, 800a9b8 <_malloc_r+0x90>
 800a960:	4629      	mov	r1, r5
 800a962:	4638      	mov	r0, r7
 800a964:	f7ff ffc0 	bl	800a8e8 <sbrk_aligned>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	4604      	mov	r4, r0
 800a96c:	d155      	bne.n	800aa1a <_malloc_r+0xf2>
 800a96e:	f8d8 4000 	ldr.w	r4, [r8]
 800a972:	4626      	mov	r6, r4
 800a974:	2e00      	cmp	r6, #0
 800a976:	d145      	bne.n	800aa04 <_malloc_r+0xdc>
 800a978:	2c00      	cmp	r4, #0
 800a97a:	d048      	beq.n	800aa0e <_malloc_r+0xe6>
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	4631      	mov	r1, r6
 800a980:	4638      	mov	r0, r7
 800a982:	eb04 0903 	add.w	r9, r4, r3
 800a986:	f000 fdef 	bl	800b568 <_sbrk_r>
 800a98a:	4581      	cmp	r9, r0
 800a98c:	d13f      	bne.n	800aa0e <_malloc_r+0xe6>
 800a98e:	6821      	ldr	r1, [r4, #0]
 800a990:	4638      	mov	r0, r7
 800a992:	1a6d      	subs	r5, r5, r1
 800a994:	4629      	mov	r1, r5
 800a996:	f7ff ffa7 	bl	800a8e8 <sbrk_aligned>
 800a99a:	3001      	adds	r0, #1
 800a99c:	d037      	beq.n	800aa0e <_malloc_r+0xe6>
 800a99e:	6823      	ldr	r3, [r4, #0]
 800a9a0:	442b      	add	r3, r5
 800a9a2:	6023      	str	r3, [r4, #0]
 800a9a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d038      	beq.n	800aa1e <_malloc_r+0xf6>
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	42a2      	cmp	r2, r4
 800a9b0:	d12b      	bne.n	800aa0a <_malloc_r+0xe2>
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	605a      	str	r2, [r3, #4]
 800a9b6:	e00f      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9b8:	6822      	ldr	r2, [r4, #0]
 800a9ba:	1b52      	subs	r2, r2, r5
 800a9bc:	d41f      	bmi.n	800a9fe <_malloc_r+0xd6>
 800a9be:	2a0b      	cmp	r2, #11
 800a9c0:	d917      	bls.n	800a9f2 <_malloc_r+0xca>
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	6025      	str	r5, [r4, #0]
 800a9c8:	bf18      	it	ne
 800a9ca:	6059      	strne	r1, [r3, #4]
 800a9cc:	6863      	ldr	r3, [r4, #4]
 800a9ce:	bf08      	it	eq
 800a9d0:	f8c8 1000 	streq.w	r1, [r8]
 800a9d4:	5162      	str	r2, [r4, r5]
 800a9d6:	604b      	str	r3, [r1, #4]
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f104 060b 	add.w	r6, r4, #11
 800a9de:	f000 f829 	bl	800aa34 <__malloc_unlock>
 800a9e2:	f026 0607 	bic.w	r6, r6, #7
 800a9e6:	1d23      	adds	r3, r4, #4
 800a9e8:	1af2      	subs	r2, r6, r3
 800a9ea:	d0ae      	beq.n	800a94a <_malloc_r+0x22>
 800a9ec:	1b9b      	subs	r3, r3, r6
 800a9ee:	50a3      	str	r3, [r4, r2]
 800a9f0:	e7ab      	b.n	800a94a <_malloc_r+0x22>
 800a9f2:	42a3      	cmp	r3, r4
 800a9f4:	6862      	ldr	r2, [r4, #4]
 800a9f6:	d1dd      	bne.n	800a9b4 <_malloc_r+0x8c>
 800a9f8:	f8c8 2000 	str.w	r2, [r8]
 800a9fc:	e7ec      	b.n	800a9d8 <_malloc_r+0xb0>
 800a9fe:	4623      	mov	r3, r4
 800aa00:	6864      	ldr	r4, [r4, #4]
 800aa02:	e7ac      	b.n	800a95e <_malloc_r+0x36>
 800aa04:	4634      	mov	r4, r6
 800aa06:	6876      	ldr	r6, [r6, #4]
 800aa08:	e7b4      	b.n	800a974 <_malloc_r+0x4c>
 800aa0a:	4613      	mov	r3, r2
 800aa0c:	e7cc      	b.n	800a9a8 <_malloc_r+0x80>
 800aa0e:	230c      	movs	r3, #12
 800aa10:	4638      	mov	r0, r7
 800aa12:	603b      	str	r3, [r7, #0]
 800aa14:	f000 f80e 	bl	800aa34 <__malloc_unlock>
 800aa18:	e797      	b.n	800a94a <_malloc_r+0x22>
 800aa1a:	6025      	str	r5, [r4, #0]
 800aa1c:	e7dc      	b.n	800a9d8 <_malloc_r+0xb0>
 800aa1e:	605b      	str	r3, [r3, #4]
 800aa20:	deff      	udf	#255	; 0xff
 800aa22:	bf00      	nop
 800aa24:	20000554 	.word	0x20000554

0800aa28 <__malloc_lock>:
 800aa28:	4801      	ldr	r0, [pc, #4]	; (800aa30 <__malloc_lock+0x8>)
 800aa2a:	f7ff b882 	b.w	8009b32 <__retarget_lock_acquire_recursive>
 800aa2e:	bf00      	nop
 800aa30:	20000550 	.word	0x20000550

0800aa34 <__malloc_unlock>:
 800aa34:	4801      	ldr	r0, [pc, #4]	; (800aa3c <__malloc_unlock+0x8>)
 800aa36:	f7ff b87d 	b.w	8009b34 <__retarget_lock_release_recursive>
 800aa3a:	bf00      	nop
 800aa3c:	20000550 	.word	0x20000550

0800aa40 <_Balloc>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	69c6      	ldr	r6, [r0, #28]
 800aa44:	4604      	mov	r4, r0
 800aa46:	460d      	mov	r5, r1
 800aa48:	b976      	cbnz	r6, 800aa68 <_Balloc+0x28>
 800aa4a:	2010      	movs	r0, #16
 800aa4c:	f7ff ff44 	bl	800a8d8 <malloc>
 800aa50:	4602      	mov	r2, r0
 800aa52:	61e0      	str	r0, [r4, #28]
 800aa54:	b920      	cbnz	r0, 800aa60 <_Balloc+0x20>
 800aa56:	216b      	movs	r1, #107	; 0x6b
 800aa58:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <_Balloc+0x78>)
 800aa5a:	4818      	ldr	r0, [pc, #96]	; (800aabc <_Balloc+0x7c>)
 800aa5c:	f000 fd94 	bl	800b588 <__assert_func>
 800aa60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa64:	6006      	str	r6, [r0, #0]
 800aa66:	60c6      	str	r6, [r0, #12]
 800aa68:	69e6      	ldr	r6, [r4, #28]
 800aa6a:	68f3      	ldr	r3, [r6, #12]
 800aa6c:	b183      	cbz	r3, 800aa90 <_Balloc+0x50>
 800aa6e:	69e3      	ldr	r3, [r4, #28]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa76:	b9b8      	cbnz	r0, 800aaa8 <_Balloc+0x68>
 800aa78:	2101      	movs	r1, #1
 800aa7a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa7e:	1d72      	adds	r2, r6, #5
 800aa80:	4620      	mov	r0, r4
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	f000 fd9e 	bl	800b5c4 <_calloc_r>
 800aa88:	b160      	cbz	r0, 800aaa4 <_Balloc+0x64>
 800aa8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa8e:	e00e      	b.n	800aaae <_Balloc+0x6e>
 800aa90:	2221      	movs	r2, #33	; 0x21
 800aa92:	2104      	movs	r1, #4
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fd95 	bl	800b5c4 <_calloc_r>
 800aa9a:	69e3      	ldr	r3, [r4, #28]
 800aa9c:	60f0      	str	r0, [r6, #12]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1e4      	bne.n	800aa6e <_Balloc+0x2e>
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	bd70      	pop	{r4, r5, r6, pc}
 800aaa8:	6802      	ldr	r2, [r0, #0]
 800aaaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaae:	2300      	movs	r3, #0
 800aab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aab4:	e7f7      	b.n	800aaa6 <_Balloc+0x66>
 800aab6:	bf00      	nop
 800aab8:	0800bccf 	.word	0x0800bccf
 800aabc:	0800bd4f 	.word	0x0800bd4f

0800aac0 <_Bfree>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	4605      	mov	r5, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	b976      	cbnz	r6, 800aae8 <_Bfree+0x28>
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7ff ff04 	bl	800a8d8 <malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	61e8      	str	r0, [r5, #28]
 800aad4:	b920      	cbnz	r0, 800aae0 <_Bfree+0x20>
 800aad6:	218f      	movs	r1, #143	; 0x8f
 800aad8:	4b08      	ldr	r3, [pc, #32]	; (800aafc <_Bfree+0x3c>)
 800aada:	4809      	ldr	r0, [pc, #36]	; (800ab00 <_Bfree+0x40>)
 800aadc:	f000 fd54 	bl	800b588 <__assert_func>
 800aae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae4:	6006      	str	r6, [r0, #0]
 800aae6:	60c6      	str	r6, [r0, #12]
 800aae8:	b13c      	cbz	r4, 800aafa <_Bfree+0x3a>
 800aaea:	69eb      	ldr	r3, [r5, #28]
 800aaec:	6862      	ldr	r2, [r4, #4]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaf4:	6021      	str	r1, [r4, #0]
 800aaf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aafa:	bd70      	pop	{r4, r5, r6, pc}
 800aafc:	0800bccf 	.word	0x0800bccf
 800ab00:	0800bd4f 	.word	0x0800bd4f

0800ab04 <__multadd>:
 800ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab08:	4607      	mov	r7, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	461e      	mov	r6, r3
 800ab0e:	2000      	movs	r0, #0
 800ab10:	690d      	ldr	r5, [r1, #16]
 800ab12:	f101 0c14 	add.w	ip, r1, #20
 800ab16:	f8dc 3000 	ldr.w	r3, [ip]
 800ab1a:	3001      	adds	r0, #1
 800ab1c:	b299      	uxth	r1, r3
 800ab1e:	fb02 6101 	mla	r1, r2, r1, r6
 800ab22:	0c1e      	lsrs	r6, r3, #16
 800ab24:	0c0b      	lsrs	r3, r1, #16
 800ab26:	fb02 3306 	mla	r3, r2, r6, r3
 800ab2a:	b289      	uxth	r1, r1
 800ab2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab30:	4285      	cmp	r5, r0
 800ab32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab36:	f84c 1b04 	str.w	r1, [ip], #4
 800ab3a:	dcec      	bgt.n	800ab16 <__multadd+0x12>
 800ab3c:	b30e      	cbz	r6, 800ab82 <__multadd+0x7e>
 800ab3e:	68a3      	ldr	r3, [r4, #8]
 800ab40:	42ab      	cmp	r3, r5
 800ab42:	dc19      	bgt.n	800ab78 <__multadd+0x74>
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4638      	mov	r0, r7
 800ab48:	3101      	adds	r1, #1
 800ab4a:	f7ff ff79 	bl	800aa40 <_Balloc>
 800ab4e:	4680      	mov	r8, r0
 800ab50:	b928      	cbnz	r0, 800ab5e <__multadd+0x5a>
 800ab52:	4602      	mov	r2, r0
 800ab54:	21ba      	movs	r1, #186	; 0xba
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <__multadd+0x84>)
 800ab58:	480c      	ldr	r0, [pc, #48]	; (800ab8c <__multadd+0x88>)
 800ab5a:	f000 fd15 	bl	800b588 <__assert_func>
 800ab5e:	6922      	ldr	r2, [r4, #16]
 800ab60:	f104 010c 	add.w	r1, r4, #12
 800ab64:	3202      	adds	r2, #2
 800ab66:	0092      	lsls	r2, r2, #2
 800ab68:	300c      	adds	r0, #12
 800ab6a:	f7fe fff2 	bl	8009b52 <memcpy>
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4638      	mov	r0, r7
 800ab72:	f7ff ffa5 	bl	800aac0 <_Bfree>
 800ab76:	4644      	mov	r4, r8
 800ab78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab7c:	3501      	adds	r5, #1
 800ab7e:	615e      	str	r6, [r3, #20]
 800ab80:	6125      	str	r5, [r4, #16]
 800ab82:	4620      	mov	r0, r4
 800ab84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab88:	0800bd3e 	.word	0x0800bd3e
 800ab8c:	0800bd4f 	.word	0x0800bd4f

0800ab90 <__hi0bits>:
 800ab90:	0c02      	lsrs	r2, r0, #16
 800ab92:	0412      	lsls	r2, r2, #16
 800ab94:	4603      	mov	r3, r0
 800ab96:	b9ca      	cbnz	r2, 800abcc <__hi0bits+0x3c>
 800ab98:	0403      	lsls	r3, r0, #16
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aba0:	bf04      	itt	eq
 800aba2:	021b      	lsleq	r3, r3, #8
 800aba4:	3008      	addeq	r0, #8
 800aba6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800abaa:	bf04      	itt	eq
 800abac:	011b      	lsleq	r3, r3, #4
 800abae:	3004      	addeq	r0, #4
 800abb0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800abb4:	bf04      	itt	eq
 800abb6:	009b      	lsleq	r3, r3, #2
 800abb8:	3002      	addeq	r0, #2
 800abba:	2b00      	cmp	r3, #0
 800abbc:	db05      	blt.n	800abca <__hi0bits+0x3a>
 800abbe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800abc2:	f100 0001 	add.w	r0, r0, #1
 800abc6:	bf08      	it	eq
 800abc8:	2020      	moveq	r0, #32
 800abca:	4770      	bx	lr
 800abcc:	2000      	movs	r0, #0
 800abce:	e7e5      	b.n	800ab9c <__hi0bits+0xc>

0800abd0 <__lo0bits>:
 800abd0:	6803      	ldr	r3, [r0, #0]
 800abd2:	4602      	mov	r2, r0
 800abd4:	f013 0007 	ands.w	r0, r3, #7
 800abd8:	d00b      	beq.n	800abf2 <__lo0bits+0x22>
 800abda:	07d9      	lsls	r1, r3, #31
 800abdc:	d421      	bmi.n	800ac22 <__lo0bits+0x52>
 800abde:	0798      	lsls	r0, r3, #30
 800abe0:	bf49      	itett	mi
 800abe2:	085b      	lsrmi	r3, r3, #1
 800abe4:	089b      	lsrpl	r3, r3, #2
 800abe6:	2001      	movmi	r0, #1
 800abe8:	6013      	strmi	r3, [r2, #0]
 800abea:	bf5c      	itt	pl
 800abec:	2002      	movpl	r0, #2
 800abee:	6013      	strpl	r3, [r2, #0]
 800abf0:	4770      	bx	lr
 800abf2:	b299      	uxth	r1, r3
 800abf4:	b909      	cbnz	r1, 800abfa <__lo0bits+0x2a>
 800abf6:	2010      	movs	r0, #16
 800abf8:	0c1b      	lsrs	r3, r3, #16
 800abfa:	b2d9      	uxtb	r1, r3
 800abfc:	b909      	cbnz	r1, 800ac02 <__lo0bits+0x32>
 800abfe:	3008      	adds	r0, #8
 800ac00:	0a1b      	lsrs	r3, r3, #8
 800ac02:	0719      	lsls	r1, r3, #28
 800ac04:	bf04      	itt	eq
 800ac06:	091b      	lsreq	r3, r3, #4
 800ac08:	3004      	addeq	r0, #4
 800ac0a:	0799      	lsls	r1, r3, #30
 800ac0c:	bf04      	itt	eq
 800ac0e:	089b      	lsreq	r3, r3, #2
 800ac10:	3002      	addeq	r0, #2
 800ac12:	07d9      	lsls	r1, r3, #31
 800ac14:	d403      	bmi.n	800ac1e <__lo0bits+0x4e>
 800ac16:	085b      	lsrs	r3, r3, #1
 800ac18:	f100 0001 	add.w	r0, r0, #1
 800ac1c:	d003      	beq.n	800ac26 <__lo0bits+0x56>
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	4770      	bx	lr
 800ac22:	2000      	movs	r0, #0
 800ac24:	4770      	bx	lr
 800ac26:	2020      	movs	r0, #32
 800ac28:	4770      	bx	lr
	...

0800ac2c <__i2b>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	460c      	mov	r4, r1
 800ac30:	2101      	movs	r1, #1
 800ac32:	f7ff ff05 	bl	800aa40 <_Balloc>
 800ac36:	4602      	mov	r2, r0
 800ac38:	b928      	cbnz	r0, 800ac46 <__i2b+0x1a>
 800ac3a:	f240 1145 	movw	r1, #325	; 0x145
 800ac3e:	4b04      	ldr	r3, [pc, #16]	; (800ac50 <__i2b+0x24>)
 800ac40:	4804      	ldr	r0, [pc, #16]	; (800ac54 <__i2b+0x28>)
 800ac42:	f000 fca1 	bl	800b588 <__assert_func>
 800ac46:	2301      	movs	r3, #1
 800ac48:	6144      	str	r4, [r0, #20]
 800ac4a:	6103      	str	r3, [r0, #16]
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800bd3e 	.word	0x0800bd3e
 800ac54:	0800bd4f 	.word	0x0800bd4f

0800ac58 <__multiply>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	4691      	mov	r9, r2
 800ac5e:	690a      	ldr	r2, [r1, #16]
 800ac60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac64:	460c      	mov	r4, r1
 800ac66:	429a      	cmp	r2, r3
 800ac68:	bfbe      	ittt	lt
 800ac6a:	460b      	movlt	r3, r1
 800ac6c:	464c      	movlt	r4, r9
 800ac6e:	4699      	movlt	r9, r3
 800ac70:	6927      	ldr	r7, [r4, #16]
 800ac72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac76:	68a3      	ldr	r3, [r4, #8]
 800ac78:	6861      	ldr	r1, [r4, #4]
 800ac7a:	eb07 060a 	add.w	r6, r7, sl
 800ac7e:	42b3      	cmp	r3, r6
 800ac80:	b085      	sub	sp, #20
 800ac82:	bfb8      	it	lt
 800ac84:	3101      	addlt	r1, #1
 800ac86:	f7ff fedb 	bl	800aa40 <_Balloc>
 800ac8a:	b930      	cbnz	r0, 800ac9a <__multiply+0x42>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ac92:	4b43      	ldr	r3, [pc, #268]	; (800ada0 <__multiply+0x148>)
 800ac94:	4843      	ldr	r0, [pc, #268]	; (800ada4 <__multiply+0x14c>)
 800ac96:	f000 fc77 	bl	800b588 <__assert_func>
 800ac9a:	f100 0514 	add.w	r5, r0, #20
 800ac9e:	462b      	mov	r3, r5
 800aca0:	2200      	movs	r2, #0
 800aca2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aca6:	4543      	cmp	r3, r8
 800aca8:	d321      	bcc.n	800acee <__multiply+0x96>
 800acaa:	f104 0314 	add.w	r3, r4, #20
 800acae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acb2:	f109 0314 	add.w	r3, r9, #20
 800acb6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acba:	9202      	str	r2, [sp, #8]
 800acbc:	1b3a      	subs	r2, r7, r4
 800acbe:	3a15      	subs	r2, #21
 800acc0:	f022 0203 	bic.w	r2, r2, #3
 800acc4:	3204      	adds	r2, #4
 800acc6:	f104 0115 	add.w	r1, r4, #21
 800acca:	428f      	cmp	r7, r1
 800accc:	bf38      	it	cc
 800acce:	2204      	movcc	r2, #4
 800acd0:	9201      	str	r2, [sp, #4]
 800acd2:	9a02      	ldr	r2, [sp, #8]
 800acd4:	9303      	str	r3, [sp, #12]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d80c      	bhi.n	800acf4 <__multiply+0x9c>
 800acda:	2e00      	cmp	r6, #0
 800acdc:	dd03      	ble.n	800ace6 <__multiply+0x8e>
 800acde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d05a      	beq.n	800ad9c <__multiply+0x144>
 800ace6:	6106      	str	r6, [r0, #16]
 800ace8:	b005      	add	sp, #20
 800acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acee:	f843 2b04 	str.w	r2, [r3], #4
 800acf2:	e7d8      	b.n	800aca6 <__multiply+0x4e>
 800acf4:	f8b3 a000 	ldrh.w	sl, [r3]
 800acf8:	f1ba 0f00 	cmp.w	sl, #0
 800acfc:	d023      	beq.n	800ad46 <__multiply+0xee>
 800acfe:	46a9      	mov	r9, r5
 800ad00:	f04f 0c00 	mov.w	ip, #0
 800ad04:	f104 0e14 	add.w	lr, r4, #20
 800ad08:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad0c:	f8d9 1000 	ldr.w	r1, [r9]
 800ad10:	fa1f fb82 	uxth.w	fp, r2
 800ad14:	b289      	uxth	r1, r1
 800ad16:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad1a:	4461      	add	r1, ip
 800ad1c:	f8d9 c000 	ldr.w	ip, [r9]
 800ad20:	0c12      	lsrs	r2, r2, #16
 800ad22:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad26:	fb0a c202 	mla	r2, sl, r2, ip
 800ad2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad2e:	b289      	uxth	r1, r1
 800ad30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad34:	4577      	cmp	r7, lr
 800ad36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad3a:	f849 1b04 	str.w	r1, [r9], #4
 800ad3e:	d8e3      	bhi.n	800ad08 <__multiply+0xb0>
 800ad40:	9a01      	ldr	r2, [sp, #4]
 800ad42:	f845 c002 	str.w	ip, [r5, r2]
 800ad46:	9a03      	ldr	r2, [sp, #12]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad4e:	f1b9 0f00 	cmp.w	r9, #0
 800ad52:	d021      	beq.n	800ad98 <__multiply+0x140>
 800ad54:	46ae      	mov	lr, r5
 800ad56:	f04f 0a00 	mov.w	sl, #0
 800ad5a:	6829      	ldr	r1, [r5, #0]
 800ad5c:	f104 0c14 	add.w	ip, r4, #20
 800ad60:	f8bc b000 	ldrh.w	fp, [ip]
 800ad64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad68:	b289      	uxth	r1, r1
 800ad6a:	fb09 220b 	mla	r2, r9, fp, r2
 800ad6e:	4452      	add	r2, sl
 800ad70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad74:	f84e 1b04 	str.w	r1, [lr], #4
 800ad78:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad80:	f8be 1000 	ldrh.w	r1, [lr]
 800ad84:	4567      	cmp	r7, ip
 800ad86:	fb09 110a 	mla	r1, r9, sl, r1
 800ad8a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ad8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad92:	d8e5      	bhi.n	800ad60 <__multiply+0x108>
 800ad94:	9a01      	ldr	r2, [sp, #4]
 800ad96:	50a9      	str	r1, [r5, r2]
 800ad98:	3504      	adds	r5, #4
 800ad9a:	e79a      	b.n	800acd2 <__multiply+0x7a>
 800ad9c:	3e01      	subs	r6, #1
 800ad9e:	e79c      	b.n	800acda <__multiply+0x82>
 800ada0:	0800bd3e 	.word	0x0800bd3e
 800ada4:	0800bd4f 	.word	0x0800bd4f

0800ada8 <__pow5mult>:
 800ada8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adac:	4615      	mov	r5, r2
 800adae:	f012 0203 	ands.w	r2, r2, #3
 800adb2:	4606      	mov	r6, r0
 800adb4:	460f      	mov	r7, r1
 800adb6:	d007      	beq.n	800adc8 <__pow5mult+0x20>
 800adb8:	4c25      	ldr	r4, [pc, #148]	; (800ae50 <__pow5mult+0xa8>)
 800adba:	3a01      	subs	r2, #1
 800adbc:	2300      	movs	r3, #0
 800adbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adc2:	f7ff fe9f 	bl	800ab04 <__multadd>
 800adc6:	4607      	mov	r7, r0
 800adc8:	10ad      	asrs	r5, r5, #2
 800adca:	d03d      	beq.n	800ae48 <__pow5mult+0xa0>
 800adcc:	69f4      	ldr	r4, [r6, #28]
 800adce:	b97c      	cbnz	r4, 800adf0 <__pow5mult+0x48>
 800add0:	2010      	movs	r0, #16
 800add2:	f7ff fd81 	bl	800a8d8 <malloc>
 800add6:	4602      	mov	r2, r0
 800add8:	61f0      	str	r0, [r6, #28]
 800adda:	b928      	cbnz	r0, 800ade8 <__pow5mult+0x40>
 800addc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ade0:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <__pow5mult+0xac>)
 800ade2:	481d      	ldr	r0, [pc, #116]	; (800ae58 <__pow5mult+0xb0>)
 800ade4:	f000 fbd0 	bl	800b588 <__assert_func>
 800ade8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adec:	6004      	str	r4, [r0, #0]
 800adee:	60c4      	str	r4, [r0, #12]
 800adf0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800adf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adf8:	b94c      	cbnz	r4, 800ae0e <__pow5mult+0x66>
 800adfa:	f240 2171 	movw	r1, #625	; 0x271
 800adfe:	4630      	mov	r0, r6
 800ae00:	f7ff ff14 	bl	800ac2c <__i2b>
 800ae04:	2300      	movs	r3, #0
 800ae06:	4604      	mov	r4, r0
 800ae08:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	f04f 0900 	mov.w	r9, #0
 800ae12:	07eb      	lsls	r3, r5, #31
 800ae14:	d50a      	bpl.n	800ae2c <__pow5mult+0x84>
 800ae16:	4639      	mov	r1, r7
 800ae18:	4622      	mov	r2, r4
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7ff ff1c 	bl	800ac58 <__multiply>
 800ae20:	4680      	mov	r8, r0
 800ae22:	4639      	mov	r1, r7
 800ae24:	4630      	mov	r0, r6
 800ae26:	f7ff fe4b 	bl	800aac0 <_Bfree>
 800ae2a:	4647      	mov	r7, r8
 800ae2c:	106d      	asrs	r5, r5, #1
 800ae2e:	d00b      	beq.n	800ae48 <__pow5mult+0xa0>
 800ae30:	6820      	ldr	r0, [r4, #0]
 800ae32:	b938      	cbnz	r0, 800ae44 <__pow5mult+0x9c>
 800ae34:	4622      	mov	r2, r4
 800ae36:	4621      	mov	r1, r4
 800ae38:	4630      	mov	r0, r6
 800ae3a:	f7ff ff0d 	bl	800ac58 <__multiply>
 800ae3e:	6020      	str	r0, [r4, #0]
 800ae40:	f8c0 9000 	str.w	r9, [r0]
 800ae44:	4604      	mov	r4, r0
 800ae46:	e7e4      	b.n	800ae12 <__pow5mult+0x6a>
 800ae48:	4638      	mov	r0, r7
 800ae4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae4e:	bf00      	nop
 800ae50:	0800be98 	.word	0x0800be98
 800ae54:	0800bccf 	.word	0x0800bccf
 800ae58:	0800bd4f 	.word	0x0800bd4f

0800ae5c <__lshift>:
 800ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	460c      	mov	r4, r1
 800ae62:	4607      	mov	r7, r0
 800ae64:	4691      	mov	r9, r2
 800ae66:	6923      	ldr	r3, [r4, #16]
 800ae68:	6849      	ldr	r1, [r1, #4]
 800ae6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae74:	f108 0601 	add.w	r6, r8, #1
 800ae78:	42b3      	cmp	r3, r6
 800ae7a:	db0b      	blt.n	800ae94 <__lshift+0x38>
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff fddf 	bl	800aa40 <_Balloc>
 800ae82:	4605      	mov	r5, r0
 800ae84:	b948      	cbnz	r0, 800ae9a <__lshift+0x3e>
 800ae86:	4602      	mov	r2, r0
 800ae88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ae8c:	4b27      	ldr	r3, [pc, #156]	; (800af2c <__lshift+0xd0>)
 800ae8e:	4828      	ldr	r0, [pc, #160]	; (800af30 <__lshift+0xd4>)
 800ae90:	f000 fb7a 	bl	800b588 <__assert_func>
 800ae94:	3101      	adds	r1, #1
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	e7ee      	b.n	800ae78 <__lshift+0x1c>
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f100 0114 	add.w	r1, r0, #20
 800aea0:	f100 0210 	add.w	r2, r0, #16
 800aea4:	4618      	mov	r0, r3
 800aea6:	4553      	cmp	r3, sl
 800aea8:	db33      	blt.n	800af12 <__lshift+0xb6>
 800aeaa:	6920      	ldr	r0, [r4, #16]
 800aeac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeb0:	f104 0314 	add.w	r3, r4, #20
 800aeb4:	f019 091f 	ands.w	r9, r9, #31
 800aeb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aec0:	d02b      	beq.n	800af1a <__lshift+0xbe>
 800aec2:	468a      	mov	sl, r1
 800aec4:	2200      	movs	r2, #0
 800aec6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeca:	6818      	ldr	r0, [r3, #0]
 800aecc:	fa00 f009 	lsl.w	r0, r0, r9
 800aed0:	4310      	orrs	r0, r2
 800aed2:	f84a 0b04 	str.w	r0, [sl], #4
 800aed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeda:	459c      	cmp	ip, r3
 800aedc:	fa22 f20e 	lsr.w	r2, r2, lr
 800aee0:	d8f3      	bhi.n	800aeca <__lshift+0x6e>
 800aee2:	ebac 0304 	sub.w	r3, ip, r4
 800aee6:	3b15      	subs	r3, #21
 800aee8:	f023 0303 	bic.w	r3, r3, #3
 800aeec:	3304      	adds	r3, #4
 800aeee:	f104 0015 	add.w	r0, r4, #21
 800aef2:	4584      	cmp	ip, r0
 800aef4:	bf38      	it	cc
 800aef6:	2304      	movcc	r3, #4
 800aef8:	50ca      	str	r2, [r1, r3]
 800aefa:	b10a      	cbz	r2, 800af00 <__lshift+0xa4>
 800aefc:	f108 0602 	add.w	r6, r8, #2
 800af00:	3e01      	subs	r6, #1
 800af02:	4638      	mov	r0, r7
 800af04:	4621      	mov	r1, r4
 800af06:	612e      	str	r6, [r5, #16]
 800af08:	f7ff fdda 	bl	800aac0 <_Bfree>
 800af0c:	4628      	mov	r0, r5
 800af0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af12:	f842 0f04 	str.w	r0, [r2, #4]!
 800af16:	3301      	adds	r3, #1
 800af18:	e7c5      	b.n	800aea6 <__lshift+0x4a>
 800af1a:	3904      	subs	r1, #4
 800af1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800af20:	459c      	cmp	ip, r3
 800af22:	f841 2f04 	str.w	r2, [r1, #4]!
 800af26:	d8f9      	bhi.n	800af1c <__lshift+0xc0>
 800af28:	e7ea      	b.n	800af00 <__lshift+0xa4>
 800af2a:	bf00      	nop
 800af2c:	0800bd3e 	.word	0x0800bd3e
 800af30:	0800bd4f 	.word	0x0800bd4f

0800af34 <__mcmp>:
 800af34:	4603      	mov	r3, r0
 800af36:	690a      	ldr	r2, [r1, #16]
 800af38:	6900      	ldr	r0, [r0, #16]
 800af3a:	b530      	push	{r4, r5, lr}
 800af3c:	1a80      	subs	r0, r0, r2
 800af3e:	d10d      	bne.n	800af5c <__mcmp+0x28>
 800af40:	3314      	adds	r3, #20
 800af42:	3114      	adds	r1, #20
 800af44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af54:	4295      	cmp	r5, r2
 800af56:	d002      	beq.n	800af5e <__mcmp+0x2a>
 800af58:	d304      	bcc.n	800af64 <__mcmp+0x30>
 800af5a:	2001      	movs	r0, #1
 800af5c:	bd30      	pop	{r4, r5, pc}
 800af5e:	42a3      	cmp	r3, r4
 800af60:	d3f4      	bcc.n	800af4c <__mcmp+0x18>
 800af62:	e7fb      	b.n	800af5c <__mcmp+0x28>
 800af64:	f04f 30ff 	mov.w	r0, #4294967295
 800af68:	e7f8      	b.n	800af5c <__mcmp+0x28>
	...

0800af6c <__mdiff>:
 800af6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af70:	460d      	mov	r5, r1
 800af72:	4607      	mov	r7, r0
 800af74:	4611      	mov	r1, r2
 800af76:	4628      	mov	r0, r5
 800af78:	4614      	mov	r4, r2
 800af7a:	f7ff ffdb 	bl	800af34 <__mcmp>
 800af7e:	1e06      	subs	r6, r0, #0
 800af80:	d111      	bne.n	800afa6 <__mdiff+0x3a>
 800af82:	4631      	mov	r1, r6
 800af84:	4638      	mov	r0, r7
 800af86:	f7ff fd5b 	bl	800aa40 <_Balloc>
 800af8a:	4602      	mov	r2, r0
 800af8c:	b928      	cbnz	r0, 800af9a <__mdiff+0x2e>
 800af8e:	f240 2137 	movw	r1, #567	; 0x237
 800af92:	4b3a      	ldr	r3, [pc, #232]	; (800b07c <__mdiff+0x110>)
 800af94:	483a      	ldr	r0, [pc, #232]	; (800b080 <__mdiff+0x114>)
 800af96:	f000 faf7 	bl	800b588 <__assert_func>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800afa0:	4610      	mov	r0, r2
 800afa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa6:	bfa4      	itt	ge
 800afa8:	4623      	movge	r3, r4
 800afaa:	462c      	movge	r4, r5
 800afac:	4638      	mov	r0, r7
 800afae:	6861      	ldr	r1, [r4, #4]
 800afb0:	bfa6      	itte	ge
 800afb2:	461d      	movge	r5, r3
 800afb4:	2600      	movge	r6, #0
 800afb6:	2601      	movlt	r6, #1
 800afb8:	f7ff fd42 	bl	800aa40 <_Balloc>
 800afbc:	4602      	mov	r2, r0
 800afbe:	b918      	cbnz	r0, 800afc8 <__mdiff+0x5c>
 800afc0:	f240 2145 	movw	r1, #581	; 0x245
 800afc4:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <__mdiff+0x110>)
 800afc6:	e7e5      	b.n	800af94 <__mdiff+0x28>
 800afc8:	f102 0814 	add.w	r8, r2, #20
 800afcc:	46c2      	mov	sl, r8
 800afce:	f04f 0c00 	mov.w	ip, #0
 800afd2:	6927      	ldr	r7, [r4, #16]
 800afd4:	60c6      	str	r6, [r0, #12]
 800afd6:	692e      	ldr	r6, [r5, #16]
 800afd8:	f104 0014 	add.w	r0, r4, #20
 800afdc:	f105 0914 	add.w	r9, r5, #20
 800afe0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800afe4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afe8:	3410      	adds	r4, #16
 800afea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800afee:	f859 3b04 	ldr.w	r3, [r9], #4
 800aff2:	fa1f f18b 	uxth.w	r1, fp
 800aff6:	4461      	add	r1, ip
 800aff8:	fa1f fc83 	uxth.w	ip, r3
 800affc:	0c1b      	lsrs	r3, r3, #16
 800affe:	eba1 010c 	sub.w	r1, r1, ip
 800b002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b006:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b00a:	b289      	uxth	r1, r1
 800b00c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800b010:	454e      	cmp	r6, r9
 800b012:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b016:	f84a 1b04 	str.w	r1, [sl], #4
 800b01a:	d8e6      	bhi.n	800afea <__mdiff+0x7e>
 800b01c:	1b73      	subs	r3, r6, r5
 800b01e:	3b15      	subs	r3, #21
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	3515      	adds	r5, #21
 800b026:	3304      	adds	r3, #4
 800b028:	42ae      	cmp	r6, r5
 800b02a:	bf38      	it	cc
 800b02c:	2304      	movcc	r3, #4
 800b02e:	4418      	add	r0, r3
 800b030:	4443      	add	r3, r8
 800b032:	461e      	mov	r6, r3
 800b034:	4605      	mov	r5, r0
 800b036:	4575      	cmp	r5, lr
 800b038:	d30e      	bcc.n	800b058 <__mdiff+0xec>
 800b03a:	f10e 0103 	add.w	r1, lr, #3
 800b03e:	1a09      	subs	r1, r1, r0
 800b040:	f021 0103 	bic.w	r1, r1, #3
 800b044:	3803      	subs	r0, #3
 800b046:	4586      	cmp	lr, r0
 800b048:	bf38      	it	cc
 800b04a:	2100      	movcc	r1, #0
 800b04c:	440b      	add	r3, r1
 800b04e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b052:	b189      	cbz	r1, 800b078 <__mdiff+0x10c>
 800b054:	6117      	str	r7, [r2, #16]
 800b056:	e7a3      	b.n	800afa0 <__mdiff+0x34>
 800b058:	f855 8b04 	ldr.w	r8, [r5], #4
 800b05c:	fa1f f188 	uxth.w	r1, r8
 800b060:	4461      	add	r1, ip
 800b062:	140c      	asrs	r4, r1, #16
 800b064:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b068:	b289      	uxth	r1, r1
 800b06a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b06e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b072:	f846 1b04 	str.w	r1, [r6], #4
 800b076:	e7de      	b.n	800b036 <__mdiff+0xca>
 800b078:	3f01      	subs	r7, #1
 800b07a:	e7e8      	b.n	800b04e <__mdiff+0xe2>
 800b07c:	0800bd3e 	.word	0x0800bd3e
 800b080:	0800bd4f 	.word	0x0800bd4f

0800b084 <__d2b>:
 800b084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b086:	2101      	movs	r1, #1
 800b088:	4617      	mov	r7, r2
 800b08a:	461c      	mov	r4, r3
 800b08c:	9e08      	ldr	r6, [sp, #32]
 800b08e:	f7ff fcd7 	bl	800aa40 <_Balloc>
 800b092:	4605      	mov	r5, r0
 800b094:	b930      	cbnz	r0, 800b0a4 <__d2b+0x20>
 800b096:	4602      	mov	r2, r0
 800b098:	f240 310f 	movw	r1, #783	; 0x30f
 800b09c:	4b22      	ldr	r3, [pc, #136]	; (800b128 <__d2b+0xa4>)
 800b09e:	4823      	ldr	r0, [pc, #140]	; (800b12c <__d2b+0xa8>)
 800b0a0:	f000 fa72 	bl	800b588 <__assert_func>
 800b0a4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b0a8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b0ac:	bb24      	cbnz	r4, 800b0f8 <__d2b+0x74>
 800b0ae:	2f00      	cmp	r7, #0
 800b0b0:	9301      	str	r3, [sp, #4]
 800b0b2:	d026      	beq.n	800b102 <__d2b+0x7e>
 800b0b4:	4668      	mov	r0, sp
 800b0b6:	9700      	str	r7, [sp, #0]
 800b0b8:	f7ff fd8a 	bl	800abd0 <__lo0bits>
 800b0bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0c0:	b1e8      	cbz	r0, 800b0fe <__d2b+0x7a>
 800b0c2:	f1c0 0320 	rsb	r3, r0, #32
 800b0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ca:	430b      	orrs	r3, r1
 800b0cc:	40c2      	lsrs	r2, r0
 800b0ce:	616b      	str	r3, [r5, #20]
 800b0d0:	9201      	str	r2, [sp, #4]
 800b0d2:	9b01      	ldr	r3, [sp, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	bf14      	ite	ne
 800b0d8:	2102      	movne	r1, #2
 800b0da:	2101      	moveq	r1, #1
 800b0dc:	61ab      	str	r3, [r5, #24]
 800b0de:	6129      	str	r1, [r5, #16]
 800b0e0:	b1bc      	cbz	r4, 800b112 <__d2b+0x8e>
 800b0e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0e6:	4404      	add	r4, r0
 800b0e8:	6034      	str	r4, [r6, #0]
 800b0ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f0:	6018      	str	r0, [r3, #0]
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	b003      	add	sp, #12
 800b0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0fc:	e7d7      	b.n	800b0ae <__d2b+0x2a>
 800b0fe:	6169      	str	r1, [r5, #20]
 800b100:	e7e7      	b.n	800b0d2 <__d2b+0x4e>
 800b102:	a801      	add	r0, sp, #4
 800b104:	f7ff fd64 	bl	800abd0 <__lo0bits>
 800b108:	9b01      	ldr	r3, [sp, #4]
 800b10a:	2101      	movs	r1, #1
 800b10c:	616b      	str	r3, [r5, #20]
 800b10e:	3020      	adds	r0, #32
 800b110:	e7e5      	b.n	800b0de <__d2b+0x5a>
 800b112:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b116:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b11a:	6030      	str	r0, [r6, #0]
 800b11c:	6918      	ldr	r0, [r3, #16]
 800b11e:	f7ff fd37 	bl	800ab90 <__hi0bits>
 800b122:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b126:	e7e2      	b.n	800b0ee <__d2b+0x6a>
 800b128:	0800bd3e 	.word	0x0800bd3e
 800b12c:	0800bd4f 	.word	0x0800bd4f

0800b130 <__ssputs_r>:
 800b130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b134:	461f      	mov	r7, r3
 800b136:	688e      	ldr	r6, [r1, #8]
 800b138:	4682      	mov	sl, r0
 800b13a:	42be      	cmp	r6, r7
 800b13c:	460c      	mov	r4, r1
 800b13e:	4690      	mov	r8, r2
 800b140:	680b      	ldr	r3, [r1, #0]
 800b142:	d82c      	bhi.n	800b19e <__ssputs_r+0x6e>
 800b144:	898a      	ldrh	r2, [r1, #12]
 800b146:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b14a:	d026      	beq.n	800b19a <__ssputs_r+0x6a>
 800b14c:	6965      	ldr	r5, [r4, #20]
 800b14e:	6909      	ldr	r1, [r1, #16]
 800b150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b154:	eba3 0901 	sub.w	r9, r3, r1
 800b158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b15c:	1c7b      	adds	r3, r7, #1
 800b15e:	444b      	add	r3, r9
 800b160:	106d      	asrs	r5, r5, #1
 800b162:	429d      	cmp	r5, r3
 800b164:	bf38      	it	cc
 800b166:	461d      	movcc	r5, r3
 800b168:	0553      	lsls	r3, r2, #21
 800b16a:	d527      	bpl.n	800b1bc <__ssputs_r+0x8c>
 800b16c:	4629      	mov	r1, r5
 800b16e:	f7ff fbdb 	bl	800a928 <_malloc_r>
 800b172:	4606      	mov	r6, r0
 800b174:	b360      	cbz	r0, 800b1d0 <__ssputs_r+0xa0>
 800b176:	464a      	mov	r2, r9
 800b178:	6921      	ldr	r1, [r4, #16]
 800b17a:	f7fe fcea 	bl	8009b52 <memcpy>
 800b17e:	89a3      	ldrh	r3, [r4, #12]
 800b180:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	6126      	str	r6, [r4, #16]
 800b18c:	444e      	add	r6, r9
 800b18e:	6026      	str	r6, [r4, #0]
 800b190:	463e      	mov	r6, r7
 800b192:	6165      	str	r5, [r4, #20]
 800b194:	eba5 0509 	sub.w	r5, r5, r9
 800b198:	60a5      	str	r5, [r4, #8]
 800b19a:	42be      	cmp	r6, r7
 800b19c:	d900      	bls.n	800b1a0 <__ssputs_r+0x70>
 800b19e:	463e      	mov	r6, r7
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	4641      	mov	r1, r8
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	f000 f9c5 	bl	800b534 <memmove>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	1b9b      	subs	r3, r3, r6
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	4433      	add	r3, r6
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1bc:	462a      	mov	r2, r5
 800b1be:	f000 fa27 	bl	800b610 <_realloc_r>
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	d1e0      	bne.n	800b18a <__ssputs_r+0x5a>
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	6921      	ldr	r1, [r4, #16]
 800b1cc:	f7ff fb3c 	bl	800a848 <_free_r>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	f8ca 3000 	str.w	r3, [sl]
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1e0:	81a3      	strh	r3, [r4, #12]
 800b1e2:	e7e9      	b.n	800b1b8 <__ssputs_r+0x88>

0800b1e4 <_svfiprintf_r>:
 800b1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e8:	4698      	mov	r8, r3
 800b1ea:	898b      	ldrh	r3, [r1, #12]
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	061b      	lsls	r3, r3, #24
 800b1f0:	460d      	mov	r5, r1
 800b1f2:	4614      	mov	r4, r2
 800b1f4:	b09d      	sub	sp, #116	; 0x74
 800b1f6:	d50e      	bpl.n	800b216 <_svfiprintf_r+0x32>
 800b1f8:	690b      	ldr	r3, [r1, #16]
 800b1fa:	b963      	cbnz	r3, 800b216 <_svfiprintf_r+0x32>
 800b1fc:	2140      	movs	r1, #64	; 0x40
 800b1fe:	f7ff fb93 	bl	800a928 <_malloc_r>
 800b202:	6028      	str	r0, [r5, #0]
 800b204:	6128      	str	r0, [r5, #16]
 800b206:	b920      	cbnz	r0, 800b212 <_svfiprintf_r+0x2e>
 800b208:	230c      	movs	r3, #12
 800b20a:	603b      	str	r3, [r7, #0]
 800b20c:	f04f 30ff 	mov.w	r0, #4294967295
 800b210:	e0d0      	b.n	800b3b4 <_svfiprintf_r+0x1d0>
 800b212:	2340      	movs	r3, #64	; 0x40
 800b214:	616b      	str	r3, [r5, #20]
 800b216:	2300      	movs	r3, #0
 800b218:	9309      	str	r3, [sp, #36]	; 0x24
 800b21a:	2320      	movs	r3, #32
 800b21c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b220:	2330      	movs	r3, #48	; 0x30
 800b222:	f04f 0901 	mov.w	r9, #1
 800b226:	f8cd 800c 	str.w	r8, [sp, #12]
 800b22a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b3cc <_svfiprintf_r+0x1e8>
 800b22e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b232:	4623      	mov	r3, r4
 800b234:	469a      	mov	sl, r3
 800b236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b23a:	b10a      	cbz	r2, 800b240 <_svfiprintf_r+0x5c>
 800b23c:	2a25      	cmp	r2, #37	; 0x25
 800b23e:	d1f9      	bne.n	800b234 <_svfiprintf_r+0x50>
 800b240:	ebba 0b04 	subs.w	fp, sl, r4
 800b244:	d00b      	beq.n	800b25e <_svfiprintf_r+0x7a>
 800b246:	465b      	mov	r3, fp
 800b248:	4622      	mov	r2, r4
 800b24a:	4629      	mov	r1, r5
 800b24c:	4638      	mov	r0, r7
 800b24e:	f7ff ff6f 	bl	800b130 <__ssputs_r>
 800b252:	3001      	adds	r0, #1
 800b254:	f000 80a9 	beq.w	800b3aa <_svfiprintf_r+0x1c6>
 800b258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b25a:	445a      	add	r2, fp
 800b25c:	9209      	str	r2, [sp, #36]	; 0x24
 800b25e:	f89a 3000 	ldrb.w	r3, [sl]
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80a1 	beq.w	800b3aa <_svfiprintf_r+0x1c6>
 800b268:	2300      	movs	r3, #0
 800b26a:	f04f 32ff 	mov.w	r2, #4294967295
 800b26e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b272:	f10a 0a01 	add.w	sl, sl, #1
 800b276:	9304      	str	r3, [sp, #16]
 800b278:	9307      	str	r3, [sp, #28]
 800b27a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b27e:	931a      	str	r3, [sp, #104]	; 0x68
 800b280:	4654      	mov	r4, sl
 800b282:	2205      	movs	r2, #5
 800b284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b288:	4850      	ldr	r0, [pc, #320]	; (800b3cc <_svfiprintf_r+0x1e8>)
 800b28a:	f7fe fc54 	bl	8009b36 <memchr>
 800b28e:	9a04      	ldr	r2, [sp, #16]
 800b290:	b9d8      	cbnz	r0, 800b2ca <_svfiprintf_r+0xe6>
 800b292:	06d0      	lsls	r0, r2, #27
 800b294:	bf44      	itt	mi
 800b296:	2320      	movmi	r3, #32
 800b298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b29c:	0711      	lsls	r1, r2, #28
 800b29e:	bf44      	itt	mi
 800b2a0:	232b      	movmi	r3, #43	; 0x2b
 800b2a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b2aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b2ac:	d015      	beq.n	800b2da <_svfiprintf_r+0xf6>
 800b2ae:	4654      	mov	r4, sl
 800b2b0:	2000      	movs	r0, #0
 800b2b2:	f04f 0c0a 	mov.w	ip, #10
 800b2b6:	9a07      	ldr	r2, [sp, #28]
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2be:	3b30      	subs	r3, #48	; 0x30
 800b2c0:	2b09      	cmp	r3, #9
 800b2c2:	d94d      	bls.n	800b360 <_svfiprintf_r+0x17c>
 800b2c4:	b1b0      	cbz	r0, 800b2f4 <_svfiprintf_r+0x110>
 800b2c6:	9207      	str	r2, [sp, #28]
 800b2c8:	e014      	b.n	800b2f4 <_svfiprintf_r+0x110>
 800b2ca:	eba0 0308 	sub.w	r3, r0, r8
 800b2ce:	fa09 f303 	lsl.w	r3, r9, r3
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	46a2      	mov	sl, r4
 800b2d6:	9304      	str	r3, [sp, #16]
 800b2d8:	e7d2      	b.n	800b280 <_svfiprintf_r+0x9c>
 800b2da:	9b03      	ldr	r3, [sp, #12]
 800b2dc:	1d19      	adds	r1, r3, #4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	9103      	str	r1, [sp, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bfbb      	ittet	lt
 800b2e6:	425b      	neglt	r3, r3
 800b2e8:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ec:	9307      	strge	r3, [sp, #28]
 800b2ee:	9307      	strlt	r3, [sp, #28]
 800b2f0:	bfb8      	it	lt
 800b2f2:	9204      	strlt	r2, [sp, #16]
 800b2f4:	7823      	ldrb	r3, [r4, #0]
 800b2f6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2f8:	d10c      	bne.n	800b314 <_svfiprintf_r+0x130>
 800b2fa:	7863      	ldrb	r3, [r4, #1]
 800b2fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2fe:	d134      	bne.n	800b36a <_svfiprintf_r+0x186>
 800b300:	9b03      	ldr	r3, [sp, #12]
 800b302:	3402      	adds	r4, #2
 800b304:	1d1a      	adds	r2, r3, #4
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	9203      	str	r2, [sp, #12]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	bfb8      	it	lt
 800b30e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b312:	9305      	str	r3, [sp, #20]
 800b314:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b3d0 <_svfiprintf_r+0x1ec>
 800b318:	2203      	movs	r2, #3
 800b31a:	4650      	mov	r0, sl
 800b31c:	7821      	ldrb	r1, [r4, #0]
 800b31e:	f7fe fc0a 	bl	8009b36 <memchr>
 800b322:	b138      	cbz	r0, 800b334 <_svfiprintf_r+0x150>
 800b324:	2240      	movs	r2, #64	; 0x40
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	eba0 000a 	sub.w	r0, r0, sl
 800b32c:	4082      	lsls	r2, r0
 800b32e:	4313      	orrs	r3, r2
 800b330:	3401      	adds	r4, #1
 800b332:	9304      	str	r3, [sp, #16]
 800b334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b338:	2206      	movs	r2, #6
 800b33a:	4826      	ldr	r0, [pc, #152]	; (800b3d4 <_svfiprintf_r+0x1f0>)
 800b33c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b340:	f7fe fbf9 	bl	8009b36 <memchr>
 800b344:	2800      	cmp	r0, #0
 800b346:	d038      	beq.n	800b3ba <_svfiprintf_r+0x1d6>
 800b348:	4b23      	ldr	r3, [pc, #140]	; (800b3d8 <_svfiprintf_r+0x1f4>)
 800b34a:	bb1b      	cbnz	r3, 800b394 <_svfiprintf_r+0x1b0>
 800b34c:	9b03      	ldr	r3, [sp, #12]
 800b34e:	3307      	adds	r3, #7
 800b350:	f023 0307 	bic.w	r3, r3, #7
 800b354:	3308      	adds	r3, #8
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b35a:	4433      	add	r3, r6
 800b35c:	9309      	str	r3, [sp, #36]	; 0x24
 800b35e:	e768      	b.n	800b232 <_svfiprintf_r+0x4e>
 800b360:	460c      	mov	r4, r1
 800b362:	2001      	movs	r0, #1
 800b364:	fb0c 3202 	mla	r2, ip, r2, r3
 800b368:	e7a6      	b.n	800b2b8 <_svfiprintf_r+0xd4>
 800b36a:	2300      	movs	r3, #0
 800b36c:	f04f 0c0a 	mov.w	ip, #10
 800b370:	4619      	mov	r1, r3
 800b372:	3401      	adds	r4, #1
 800b374:	9305      	str	r3, [sp, #20]
 800b376:	4620      	mov	r0, r4
 800b378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b37c:	3a30      	subs	r2, #48	; 0x30
 800b37e:	2a09      	cmp	r2, #9
 800b380:	d903      	bls.n	800b38a <_svfiprintf_r+0x1a6>
 800b382:	2b00      	cmp	r3, #0
 800b384:	d0c6      	beq.n	800b314 <_svfiprintf_r+0x130>
 800b386:	9105      	str	r1, [sp, #20]
 800b388:	e7c4      	b.n	800b314 <_svfiprintf_r+0x130>
 800b38a:	4604      	mov	r4, r0
 800b38c:	2301      	movs	r3, #1
 800b38e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b392:	e7f0      	b.n	800b376 <_svfiprintf_r+0x192>
 800b394:	ab03      	add	r3, sp, #12
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	462a      	mov	r2, r5
 800b39a:	4638      	mov	r0, r7
 800b39c:	4b0f      	ldr	r3, [pc, #60]	; (800b3dc <_svfiprintf_r+0x1f8>)
 800b39e:	a904      	add	r1, sp, #16
 800b3a0:	f7fd fe50 	bl	8009044 <_printf_float>
 800b3a4:	1c42      	adds	r2, r0, #1
 800b3a6:	4606      	mov	r6, r0
 800b3a8:	d1d6      	bne.n	800b358 <_svfiprintf_r+0x174>
 800b3aa:	89ab      	ldrh	r3, [r5, #12]
 800b3ac:	065b      	lsls	r3, r3, #25
 800b3ae:	f53f af2d 	bmi.w	800b20c <_svfiprintf_r+0x28>
 800b3b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3b4:	b01d      	add	sp, #116	; 0x74
 800b3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ba:	ab03      	add	r3, sp, #12
 800b3bc:	9300      	str	r3, [sp, #0]
 800b3be:	462a      	mov	r2, r5
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	4b06      	ldr	r3, [pc, #24]	; (800b3dc <_svfiprintf_r+0x1f8>)
 800b3c4:	a904      	add	r1, sp, #16
 800b3c6:	f7fe f8dd 	bl	8009584 <_printf_i>
 800b3ca:	e7eb      	b.n	800b3a4 <_svfiprintf_r+0x1c0>
 800b3cc:	0800bea4 	.word	0x0800bea4
 800b3d0:	0800beaa 	.word	0x0800beaa
 800b3d4:	0800beae 	.word	0x0800beae
 800b3d8:	08009045 	.word	0x08009045
 800b3dc:	0800b131 	.word	0x0800b131

0800b3e0 <__sflush_r>:
 800b3e0:	898a      	ldrh	r2, [r1, #12]
 800b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	0710      	lsls	r0, r2, #28
 800b3e8:	460c      	mov	r4, r1
 800b3ea:	d457      	bmi.n	800b49c <__sflush_r+0xbc>
 800b3ec:	684b      	ldr	r3, [r1, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	dc04      	bgt.n	800b3fc <__sflush_r+0x1c>
 800b3f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	dc01      	bgt.n	800b3fc <__sflush_r+0x1c>
 800b3f8:	2000      	movs	r0, #0
 800b3fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3fe:	2e00      	cmp	r6, #0
 800b400:	d0fa      	beq.n	800b3f8 <__sflush_r+0x18>
 800b402:	2300      	movs	r3, #0
 800b404:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b408:	682f      	ldr	r7, [r5, #0]
 800b40a:	6a21      	ldr	r1, [r4, #32]
 800b40c:	602b      	str	r3, [r5, #0]
 800b40e:	d032      	beq.n	800b476 <__sflush_r+0x96>
 800b410:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	075a      	lsls	r2, r3, #29
 800b416:	d505      	bpl.n	800b424 <__sflush_r+0x44>
 800b418:	6863      	ldr	r3, [r4, #4]
 800b41a:	1ac0      	subs	r0, r0, r3
 800b41c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b41e:	b10b      	cbz	r3, 800b424 <__sflush_r+0x44>
 800b420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b422:	1ac0      	subs	r0, r0, r3
 800b424:	2300      	movs	r3, #0
 800b426:	4602      	mov	r2, r0
 800b428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b42a:	4628      	mov	r0, r5
 800b42c:	6a21      	ldr	r1, [r4, #32]
 800b42e:	47b0      	blx	r6
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	d106      	bne.n	800b444 <__sflush_r+0x64>
 800b436:	6829      	ldr	r1, [r5, #0]
 800b438:	291d      	cmp	r1, #29
 800b43a:	d82b      	bhi.n	800b494 <__sflush_r+0xb4>
 800b43c:	4a28      	ldr	r2, [pc, #160]	; (800b4e0 <__sflush_r+0x100>)
 800b43e:	410a      	asrs	r2, r1
 800b440:	07d6      	lsls	r6, r2, #31
 800b442:	d427      	bmi.n	800b494 <__sflush_r+0xb4>
 800b444:	2200      	movs	r2, #0
 800b446:	6062      	str	r2, [r4, #4]
 800b448:	6922      	ldr	r2, [r4, #16]
 800b44a:	04d9      	lsls	r1, r3, #19
 800b44c:	6022      	str	r2, [r4, #0]
 800b44e:	d504      	bpl.n	800b45a <__sflush_r+0x7a>
 800b450:	1c42      	adds	r2, r0, #1
 800b452:	d101      	bne.n	800b458 <__sflush_r+0x78>
 800b454:	682b      	ldr	r3, [r5, #0]
 800b456:	b903      	cbnz	r3, 800b45a <__sflush_r+0x7a>
 800b458:	6560      	str	r0, [r4, #84]	; 0x54
 800b45a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b45c:	602f      	str	r7, [r5, #0]
 800b45e:	2900      	cmp	r1, #0
 800b460:	d0ca      	beq.n	800b3f8 <__sflush_r+0x18>
 800b462:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b466:	4299      	cmp	r1, r3
 800b468:	d002      	beq.n	800b470 <__sflush_r+0x90>
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7ff f9ec 	bl	800a848 <_free_r>
 800b470:	2000      	movs	r0, #0
 800b472:	6360      	str	r0, [r4, #52]	; 0x34
 800b474:	e7c1      	b.n	800b3fa <__sflush_r+0x1a>
 800b476:	2301      	movs	r3, #1
 800b478:	4628      	mov	r0, r5
 800b47a:	47b0      	blx	r6
 800b47c:	1c41      	adds	r1, r0, #1
 800b47e:	d1c8      	bne.n	800b412 <__sflush_r+0x32>
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d0c5      	beq.n	800b412 <__sflush_r+0x32>
 800b486:	2b1d      	cmp	r3, #29
 800b488:	d001      	beq.n	800b48e <__sflush_r+0xae>
 800b48a:	2b16      	cmp	r3, #22
 800b48c:	d101      	bne.n	800b492 <__sflush_r+0xb2>
 800b48e:	602f      	str	r7, [r5, #0]
 800b490:	e7b2      	b.n	800b3f8 <__sflush_r+0x18>
 800b492:	89a3      	ldrh	r3, [r4, #12]
 800b494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	e7ae      	b.n	800b3fa <__sflush_r+0x1a>
 800b49c:	690f      	ldr	r7, [r1, #16]
 800b49e:	2f00      	cmp	r7, #0
 800b4a0:	d0aa      	beq.n	800b3f8 <__sflush_r+0x18>
 800b4a2:	0793      	lsls	r3, r2, #30
 800b4a4:	bf18      	it	ne
 800b4a6:	2300      	movne	r3, #0
 800b4a8:	680e      	ldr	r6, [r1, #0]
 800b4aa:	bf08      	it	eq
 800b4ac:	694b      	ldreq	r3, [r1, #20]
 800b4ae:	1bf6      	subs	r6, r6, r7
 800b4b0:	600f      	str	r7, [r1, #0]
 800b4b2:	608b      	str	r3, [r1, #8]
 800b4b4:	2e00      	cmp	r6, #0
 800b4b6:	dd9f      	ble.n	800b3f8 <__sflush_r+0x18>
 800b4b8:	4633      	mov	r3, r6
 800b4ba:	463a      	mov	r2, r7
 800b4bc:	4628      	mov	r0, r5
 800b4be:	6a21      	ldr	r1, [r4, #32]
 800b4c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b4c4:	47e0      	blx	ip
 800b4c6:	2800      	cmp	r0, #0
 800b4c8:	dc06      	bgt.n	800b4d8 <__sflush_r+0xf8>
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d4:	81a3      	strh	r3, [r4, #12]
 800b4d6:	e790      	b.n	800b3fa <__sflush_r+0x1a>
 800b4d8:	4407      	add	r7, r0
 800b4da:	1a36      	subs	r6, r6, r0
 800b4dc:	e7ea      	b.n	800b4b4 <__sflush_r+0xd4>
 800b4de:	bf00      	nop
 800b4e0:	dfbffffe 	.word	0xdfbffffe

0800b4e4 <_fflush_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	690b      	ldr	r3, [r1, #16]
 800b4e8:	4605      	mov	r5, r0
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	b913      	cbnz	r3, 800b4f4 <_fflush_r+0x10>
 800b4ee:	2500      	movs	r5, #0
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	b118      	cbz	r0, 800b4fe <_fflush_r+0x1a>
 800b4f6:	6a03      	ldr	r3, [r0, #32]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <_fflush_r+0x1a>
 800b4fa:	f7fe f9f1 	bl	80098e0 <__sinit>
 800b4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d0f3      	beq.n	800b4ee <_fflush_r+0xa>
 800b506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b508:	07d0      	lsls	r0, r2, #31
 800b50a:	d404      	bmi.n	800b516 <_fflush_r+0x32>
 800b50c:	0599      	lsls	r1, r3, #22
 800b50e:	d402      	bmi.n	800b516 <_fflush_r+0x32>
 800b510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b512:	f7fe fb0e 	bl	8009b32 <__retarget_lock_acquire_recursive>
 800b516:	4628      	mov	r0, r5
 800b518:	4621      	mov	r1, r4
 800b51a:	f7ff ff61 	bl	800b3e0 <__sflush_r>
 800b51e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b520:	4605      	mov	r5, r0
 800b522:	07da      	lsls	r2, r3, #31
 800b524:	d4e4      	bmi.n	800b4f0 <_fflush_r+0xc>
 800b526:	89a3      	ldrh	r3, [r4, #12]
 800b528:	059b      	lsls	r3, r3, #22
 800b52a:	d4e1      	bmi.n	800b4f0 <_fflush_r+0xc>
 800b52c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b52e:	f7fe fb01 	bl	8009b34 <__retarget_lock_release_recursive>
 800b532:	e7dd      	b.n	800b4f0 <_fflush_r+0xc>

0800b534 <memmove>:
 800b534:	4288      	cmp	r0, r1
 800b536:	b510      	push	{r4, lr}
 800b538:	eb01 0402 	add.w	r4, r1, r2
 800b53c:	d902      	bls.n	800b544 <memmove+0x10>
 800b53e:	4284      	cmp	r4, r0
 800b540:	4623      	mov	r3, r4
 800b542:	d807      	bhi.n	800b554 <memmove+0x20>
 800b544:	1e43      	subs	r3, r0, #1
 800b546:	42a1      	cmp	r1, r4
 800b548:	d008      	beq.n	800b55c <memmove+0x28>
 800b54a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b54e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b552:	e7f8      	b.n	800b546 <memmove+0x12>
 800b554:	4601      	mov	r1, r0
 800b556:	4402      	add	r2, r0
 800b558:	428a      	cmp	r2, r1
 800b55a:	d100      	bne.n	800b55e <memmove+0x2a>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b566:	e7f7      	b.n	800b558 <memmove+0x24>

0800b568 <_sbrk_r>:
 800b568:	b538      	push	{r3, r4, r5, lr}
 800b56a:	2300      	movs	r3, #0
 800b56c:	4d05      	ldr	r5, [pc, #20]	; (800b584 <_sbrk_r+0x1c>)
 800b56e:	4604      	mov	r4, r0
 800b570:	4608      	mov	r0, r1
 800b572:	602b      	str	r3, [r5, #0]
 800b574:	f7f5 fe20 	bl	80011b8 <_sbrk>
 800b578:	1c43      	adds	r3, r0, #1
 800b57a:	d102      	bne.n	800b582 <_sbrk_r+0x1a>
 800b57c:	682b      	ldr	r3, [r5, #0]
 800b57e:	b103      	cbz	r3, 800b582 <_sbrk_r+0x1a>
 800b580:	6023      	str	r3, [r4, #0]
 800b582:	bd38      	pop	{r3, r4, r5, pc}
 800b584:	2000054c 	.word	0x2000054c

0800b588 <__assert_func>:
 800b588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b58a:	4614      	mov	r4, r2
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <__assert_func+0x2c>)
 800b590:	4605      	mov	r5, r0
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	68d8      	ldr	r0, [r3, #12]
 800b596:	b14c      	cbz	r4, 800b5ac <__assert_func+0x24>
 800b598:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <__assert_func+0x30>)
 800b59a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b59e:	9100      	str	r1, [sp, #0]
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	4906      	ldr	r1, [pc, #24]	; (800b5bc <__assert_func+0x34>)
 800b5a4:	f000 f870 	bl	800b688 <fiprintf>
 800b5a8:	f000 f880 	bl	800b6ac <abort>
 800b5ac:	4b04      	ldr	r3, [pc, #16]	; (800b5c0 <__assert_func+0x38>)
 800b5ae:	461c      	mov	r4, r3
 800b5b0:	e7f3      	b.n	800b59a <__assert_func+0x12>
 800b5b2:	bf00      	nop
 800b5b4:	20000094 	.word	0x20000094
 800b5b8:	0800bebf 	.word	0x0800bebf
 800b5bc:	0800becc 	.word	0x0800becc
 800b5c0:	0800befa 	.word	0x0800befa

0800b5c4 <_calloc_r>:
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	fba1 5402 	umull	r5, r4, r1, r2
 800b5ca:	b934      	cbnz	r4, 800b5da <_calloc_r+0x16>
 800b5cc:	4629      	mov	r1, r5
 800b5ce:	f7ff f9ab 	bl	800a928 <_malloc_r>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	b928      	cbnz	r0, 800b5e2 <_calloc_r+0x1e>
 800b5d6:	4630      	mov	r0, r6
 800b5d8:	bd70      	pop	{r4, r5, r6, pc}
 800b5da:	220c      	movs	r2, #12
 800b5dc:	2600      	movs	r6, #0
 800b5de:	6002      	str	r2, [r0, #0]
 800b5e0:	e7f9      	b.n	800b5d6 <_calloc_r+0x12>
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	f7fe fa14 	bl	8009a12 <memset>
 800b5ea:	e7f4      	b.n	800b5d6 <_calloc_r+0x12>

0800b5ec <__ascii_mbtowc>:
 800b5ec:	b082      	sub	sp, #8
 800b5ee:	b901      	cbnz	r1, 800b5f2 <__ascii_mbtowc+0x6>
 800b5f0:	a901      	add	r1, sp, #4
 800b5f2:	b142      	cbz	r2, 800b606 <__ascii_mbtowc+0x1a>
 800b5f4:	b14b      	cbz	r3, 800b60a <__ascii_mbtowc+0x1e>
 800b5f6:	7813      	ldrb	r3, [r2, #0]
 800b5f8:	600b      	str	r3, [r1, #0]
 800b5fa:	7812      	ldrb	r2, [r2, #0]
 800b5fc:	1e10      	subs	r0, r2, #0
 800b5fe:	bf18      	it	ne
 800b600:	2001      	movne	r0, #1
 800b602:	b002      	add	sp, #8
 800b604:	4770      	bx	lr
 800b606:	4610      	mov	r0, r2
 800b608:	e7fb      	b.n	800b602 <__ascii_mbtowc+0x16>
 800b60a:	f06f 0001 	mvn.w	r0, #1
 800b60e:	e7f8      	b.n	800b602 <__ascii_mbtowc+0x16>

0800b610 <_realloc_r>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	4680      	mov	r8, r0
 800b616:	4614      	mov	r4, r2
 800b618:	460e      	mov	r6, r1
 800b61a:	b921      	cbnz	r1, 800b626 <_realloc_r+0x16>
 800b61c:	4611      	mov	r1, r2
 800b61e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b622:	f7ff b981 	b.w	800a928 <_malloc_r>
 800b626:	b92a      	cbnz	r2, 800b634 <_realloc_r+0x24>
 800b628:	f7ff f90e 	bl	800a848 <_free_r>
 800b62c:	4625      	mov	r5, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b634:	f000 f841 	bl	800b6ba <_malloc_usable_size_r>
 800b638:	4284      	cmp	r4, r0
 800b63a:	4607      	mov	r7, r0
 800b63c:	d802      	bhi.n	800b644 <_realloc_r+0x34>
 800b63e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b642:	d812      	bhi.n	800b66a <_realloc_r+0x5a>
 800b644:	4621      	mov	r1, r4
 800b646:	4640      	mov	r0, r8
 800b648:	f7ff f96e 	bl	800a928 <_malloc_r>
 800b64c:	4605      	mov	r5, r0
 800b64e:	2800      	cmp	r0, #0
 800b650:	d0ed      	beq.n	800b62e <_realloc_r+0x1e>
 800b652:	42bc      	cmp	r4, r7
 800b654:	4622      	mov	r2, r4
 800b656:	4631      	mov	r1, r6
 800b658:	bf28      	it	cs
 800b65a:	463a      	movcs	r2, r7
 800b65c:	f7fe fa79 	bl	8009b52 <memcpy>
 800b660:	4631      	mov	r1, r6
 800b662:	4640      	mov	r0, r8
 800b664:	f7ff f8f0 	bl	800a848 <_free_r>
 800b668:	e7e1      	b.n	800b62e <_realloc_r+0x1e>
 800b66a:	4635      	mov	r5, r6
 800b66c:	e7df      	b.n	800b62e <_realloc_r+0x1e>

0800b66e <__ascii_wctomb>:
 800b66e:	4603      	mov	r3, r0
 800b670:	4608      	mov	r0, r1
 800b672:	b141      	cbz	r1, 800b686 <__ascii_wctomb+0x18>
 800b674:	2aff      	cmp	r2, #255	; 0xff
 800b676:	d904      	bls.n	800b682 <__ascii_wctomb+0x14>
 800b678:	228a      	movs	r2, #138	; 0x8a
 800b67a:	f04f 30ff 	mov.w	r0, #4294967295
 800b67e:	601a      	str	r2, [r3, #0]
 800b680:	4770      	bx	lr
 800b682:	2001      	movs	r0, #1
 800b684:	700a      	strb	r2, [r1, #0]
 800b686:	4770      	bx	lr

0800b688 <fiprintf>:
 800b688:	b40e      	push	{r1, r2, r3}
 800b68a:	b503      	push	{r0, r1, lr}
 800b68c:	4601      	mov	r1, r0
 800b68e:	ab03      	add	r3, sp, #12
 800b690:	4805      	ldr	r0, [pc, #20]	; (800b6a8 <fiprintf+0x20>)
 800b692:	f853 2b04 	ldr.w	r2, [r3], #4
 800b696:	6800      	ldr	r0, [r0, #0]
 800b698:	9301      	str	r3, [sp, #4]
 800b69a:	f000 f83d 	bl	800b718 <_vfiprintf_r>
 800b69e:	b002      	add	sp, #8
 800b6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a4:	b003      	add	sp, #12
 800b6a6:	4770      	bx	lr
 800b6a8:	20000094 	.word	0x20000094

0800b6ac <abort>:
 800b6ac:	2006      	movs	r0, #6
 800b6ae:	b508      	push	{r3, lr}
 800b6b0:	f000 fa0a 	bl	800bac8 <raise>
 800b6b4:	2001      	movs	r0, #1
 800b6b6:	f7f5 fd0b 	bl	80010d0 <_exit>

0800b6ba <_malloc_usable_size_r>:
 800b6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6be:	1f18      	subs	r0, r3, #4
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bfbc      	itt	lt
 800b6c4:	580b      	ldrlt	r3, [r1, r0]
 800b6c6:	18c0      	addlt	r0, r0, r3
 800b6c8:	4770      	bx	lr

0800b6ca <__sfputc_r>:
 800b6ca:	6893      	ldr	r3, [r2, #8]
 800b6cc:	b410      	push	{r4}
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	6093      	str	r3, [r2, #8]
 800b6d4:	da07      	bge.n	800b6e6 <__sfputc_r+0x1c>
 800b6d6:	6994      	ldr	r4, [r2, #24]
 800b6d8:	42a3      	cmp	r3, r4
 800b6da:	db01      	blt.n	800b6e0 <__sfputc_r+0x16>
 800b6dc:	290a      	cmp	r1, #10
 800b6de:	d102      	bne.n	800b6e6 <__sfputc_r+0x1c>
 800b6e0:	bc10      	pop	{r4}
 800b6e2:	f000 b933 	b.w	800b94c <__swbuf_r>
 800b6e6:	6813      	ldr	r3, [r2, #0]
 800b6e8:	1c58      	adds	r0, r3, #1
 800b6ea:	6010      	str	r0, [r2, #0]
 800b6ec:	7019      	strb	r1, [r3, #0]
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	bc10      	pop	{r4}
 800b6f2:	4770      	bx	lr

0800b6f4 <__sfputs_r>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4614      	mov	r4, r2
 800b6fc:	18d5      	adds	r5, r2, r3
 800b6fe:	42ac      	cmp	r4, r5
 800b700:	d101      	bne.n	800b706 <__sfputs_r+0x12>
 800b702:	2000      	movs	r0, #0
 800b704:	e007      	b.n	800b716 <__sfputs_r+0x22>
 800b706:	463a      	mov	r2, r7
 800b708:	4630      	mov	r0, r6
 800b70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70e:	f7ff ffdc 	bl	800b6ca <__sfputc_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d1f3      	bne.n	800b6fe <__sfputs_r+0xa>
 800b716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b718 <_vfiprintf_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	460d      	mov	r5, r1
 800b71e:	4614      	mov	r4, r2
 800b720:	4698      	mov	r8, r3
 800b722:	4606      	mov	r6, r0
 800b724:	b09d      	sub	sp, #116	; 0x74
 800b726:	b118      	cbz	r0, 800b730 <_vfiprintf_r+0x18>
 800b728:	6a03      	ldr	r3, [r0, #32]
 800b72a:	b90b      	cbnz	r3, 800b730 <_vfiprintf_r+0x18>
 800b72c:	f7fe f8d8 	bl	80098e0 <__sinit>
 800b730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	d405      	bmi.n	800b742 <_vfiprintf_r+0x2a>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	059a      	lsls	r2, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_vfiprintf_r+0x2a>
 800b73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b73e:	f7fe f9f8 	bl	8009b32 <__retarget_lock_acquire_recursive>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	071b      	lsls	r3, r3, #28
 800b746:	d501      	bpl.n	800b74c <_vfiprintf_r+0x34>
 800b748:	692b      	ldr	r3, [r5, #16]
 800b74a:	b99b      	cbnz	r3, 800b774 <_vfiprintf_r+0x5c>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f93a 	bl	800b9c8 <__swsetup_r>
 800b754:	b170      	cbz	r0, 800b774 <_vfiprintf_r+0x5c>
 800b756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b758:	07dc      	lsls	r4, r3, #31
 800b75a:	d504      	bpl.n	800b766 <_vfiprintf_r+0x4e>
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	b01d      	add	sp, #116	; 0x74
 800b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b766:	89ab      	ldrh	r3, [r5, #12]
 800b768:	0598      	lsls	r0, r3, #22
 800b76a:	d4f7      	bmi.n	800b75c <_vfiprintf_r+0x44>
 800b76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b76e:	f7fe f9e1 	bl	8009b34 <__retarget_lock_release_recursive>
 800b772:	e7f3      	b.n	800b75c <_vfiprintf_r+0x44>
 800b774:	2300      	movs	r3, #0
 800b776:	9309      	str	r3, [sp, #36]	; 0x24
 800b778:	2320      	movs	r3, #32
 800b77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77e:	2330      	movs	r3, #48	; 0x30
 800b780:	f04f 0901 	mov.w	r9, #1
 800b784:	f8cd 800c 	str.w	r8, [sp, #12]
 800b788:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b938 <_vfiprintf_r+0x220>
 800b78c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b790:	4623      	mov	r3, r4
 800b792:	469a      	mov	sl, r3
 800b794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b798:	b10a      	cbz	r2, 800b79e <_vfiprintf_r+0x86>
 800b79a:	2a25      	cmp	r2, #37	; 0x25
 800b79c:	d1f9      	bne.n	800b792 <_vfiprintf_r+0x7a>
 800b79e:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a2:	d00b      	beq.n	800b7bc <_vfiprintf_r+0xa4>
 800b7a4:	465b      	mov	r3, fp
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ffa2 	bl	800b6f4 <__sfputs_r>
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	f000 80a9 	beq.w	800b908 <_vfiprintf_r+0x1f0>
 800b7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b8:	445a      	add	r2, fp
 800b7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 80a1 	beq.w	800b908 <_vfiprintf_r+0x1f0>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d0:	f10a 0a01 	add.w	sl, sl, #1
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7de:	4654      	mov	r4, sl
 800b7e0:	2205      	movs	r2, #5
 800b7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e6:	4854      	ldr	r0, [pc, #336]	; (800b938 <_vfiprintf_r+0x220>)
 800b7e8:	f7fe f9a5 	bl	8009b36 <memchr>
 800b7ec:	9a04      	ldr	r2, [sp, #16]
 800b7ee:	b9d8      	cbnz	r0, 800b828 <_vfiprintf_r+0x110>
 800b7f0:	06d1      	lsls	r1, r2, #27
 800b7f2:	bf44      	itt	mi
 800b7f4:	2320      	movmi	r3, #32
 800b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7fa:	0713      	lsls	r3, r2, #28
 800b7fc:	bf44      	itt	mi
 800b7fe:	232b      	movmi	r3, #43	; 0x2b
 800b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b804:	f89a 3000 	ldrb.w	r3, [sl]
 800b808:	2b2a      	cmp	r3, #42	; 0x2a
 800b80a:	d015      	beq.n	800b838 <_vfiprintf_r+0x120>
 800b80c:	4654      	mov	r4, sl
 800b80e:	2000      	movs	r0, #0
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	9a07      	ldr	r2, [sp, #28]
 800b816:	4621      	mov	r1, r4
 800b818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81c:	3b30      	subs	r3, #48	; 0x30
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d94d      	bls.n	800b8be <_vfiprintf_r+0x1a6>
 800b822:	b1b0      	cbz	r0, 800b852 <_vfiprintf_r+0x13a>
 800b824:	9207      	str	r2, [sp, #28]
 800b826:	e014      	b.n	800b852 <_vfiprintf_r+0x13a>
 800b828:	eba0 0308 	sub.w	r3, r0, r8
 800b82c:	fa09 f303 	lsl.w	r3, r9, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	46a2      	mov	sl, r4
 800b834:	9304      	str	r3, [sp, #16]
 800b836:	e7d2      	b.n	800b7de <_vfiprintf_r+0xc6>
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	1d19      	adds	r1, r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	9103      	str	r1, [sp, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	bfbb      	ittet	lt
 800b844:	425b      	neglt	r3, r3
 800b846:	f042 0202 	orrlt.w	r2, r2, #2
 800b84a:	9307      	strge	r3, [sp, #28]
 800b84c:	9307      	strlt	r3, [sp, #28]
 800b84e:	bfb8      	it	lt
 800b850:	9204      	strlt	r2, [sp, #16]
 800b852:	7823      	ldrb	r3, [r4, #0]
 800b854:	2b2e      	cmp	r3, #46	; 0x2e
 800b856:	d10c      	bne.n	800b872 <_vfiprintf_r+0x15a>
 800b858:	7863      	ldrb	r3, [r4, #1]
 800b85a:	2b2a      	cmp	r3, #42	; 0x2a
 800b85c:	d134      	bne.n	800b8c8 <_vfiprintf_r+0x1b0>
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	3402      	adds	r4, #2
 800b862:	1d1a      	adds	r2, r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	9203      	str	r2, [sp, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	bfb8      	it	lt
 800b86c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b93c <_vfiprintf_r+0x224>
 800b876:	2203      	movs	r2, #3
 800b878:	4650      	mov	r0, sl
 800b87a:	7821      	ldrb	r1, [r4, #0]
 800b87c:	f7fe f95b 	bl	8009b36 <memchr>
 800b880:	b138      	cbz	r0, 800b892 <_vfiprintf_r+0x17a>
 800b882:	2240      	movs	r2, #64	; 0x40
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	eba0 000a 	sub.w	r0, r0, sl
 800b88a:	4082      	lsls	r2, r0
 800b88c:	4313      	orrs	r3, r2
 800b88e:	3401      	adds	r4, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	2206      	movs	r2, #6
 800b898:	4829      	ldr	r0, [pc, #164]	; (800b940 <_vfiprintf_r+0x228>)
 800b89a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89e:	f7fe f94a 	bl	8009b36 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d03f      	beq.n	800b926 <_vfiprintf_r+0x20e>
 800b8a6:	4b27      	ldr	r3, [pc, #156]	; (800b944 <_vfiprintf_r+0x22c>)
 800b8a8:	bb1b      	cbnz	r3, 800b8f2 <_vfiprintf_r+0x1da>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	443b      	add	r3, r7
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e768      	b.n	800b790 <_vfiprintf_r+0x78>
 800b8be:	460c      	mov	r4, r1
 800b8c0:	2001      	movs	r0, #1
 800b8c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c6:	e7a6      	b.n	800b816 <_vfiprintf_r+0xfe>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f04f 0c0a 	mov.w	ip, #10
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	3401      	adds	r4, #1
 800b8d2:	9305      	str	r3, [sp, #20]
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d903      	bls.n	800b8e8 <_vfiprintf_r+0x1d0>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0c6      	beq.n	800b872 <_vfiprintf_r+0x15a>
 800b8e4:	9105      	str	r1, [sp, #20]
 800b8e6:	e7c4      	b.n	800b872 <_vfiprintf_r+0x15a>
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8f0:	e7f0      	b.n	800b8d4 <_vfiprintf_r+0x1bc>
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	4b13      	ldr	r3, [pc, #76]	; (800b948 <_vfiprintf_r+0x230>)
 800b8fc:	a904      	add	r1, sp, #16
 800b8fe:	f7fd fba1 	bl	8009044 <_printf_float>
 800b902:	4607      	mov	r7, r0
 800b904:	1c78      	adds	r0, r7, #1
 800b906:	d1d6      	bne.n	800b8b6 <_vfiprintf_r+0x19e>
 800b908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d405      	bmi.n	800b91a <_vfiprintf_r+0x202>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	059a      	lsls	r2, r3, #22
 800b912:	d402      	bmi.n	800b91a <_vfiprintf_r+0x202>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f7fe f90d 	bl	8009b34 <__retarget_lock_release_recursive>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	065b      	lsls	r3, r3, #25
 800b91e:	f53f af1d 	bmi.w	800b75c <_vfiprintf_r+0x44>
 800b922:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b924:	e71c      	b.n	800b760 <_vfiprintf_r+0x48>
 800b926:	ab03      	add	r3, sp, #12
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	462a      	mov	r2, r5
 800b92c:	4630      	mov	r0, r6
 800b92e:	4b06      	ldr	r3, [pc, #24]	; (800b948 <_vfiprintf_r+0x230>)
 800b930:	a904      	add	r1, sp, #16
 800b932:	f7fd fe27 	bl	8009584 <_printf_i>
 800b936:	e7e4      	b.n	800b902 <_vfiprintf_r+0x1ea>
 800b938:	0800bea4 	.word	0x0800bea4
 800b93c:	0800beaa 	.word	0x0800beaa
 800b940:	0800beae 	.word	0x0800beae
 800b944:	08009045 	.word	0x08009045
 800b948:	0800b6f5 	.word	0x0800b6f5

0800b94c <__swbuf_r>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	460e      	mov	r6, r1
 800b950:	4614      	mov	r4, r2
 800b952:	4605      	mov	r5, r0
 800b954:	b118      	cbz	r0, 800b95e <__swbuf_r+0x12>
 800b956:	6a03      	ldr	r3, [r0, #32]
 800b958:	b90b      	cbnz	r3, 800b95e <__swbuf_r+0x12>
 800b95a:	f7fd ffc1 	bl	80098e0 <__sinit>
 800b95e:	69a3      	ldr	r3, [r4, #24]
 800b960:	60a3      	str	r3, [r4, #8]
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	071a      	lsls	r2, r3, #28
 800b966:	d525      	bpl.n	800b9b4 <__swbuf_r+0x68>
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	b31b      	cbz	r3, 800b9b4 <__swbuf_r+0x68>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	6922      	ldr	r2, [r4, #16]
 800b970:	b2f6      	uxtb	r6, r6
 800b972:	1a98      	subs	r0, r3, r2
 800b974:	6963      	ldr	r3, [r4, #20]
 800b976:	4637      	mov	r7, r6
 800b978:	4283      	cmp	r3, r0
 800b97a:	dc04      	bgt.n	800b986 <__swbuf_r+0x3a>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f7ff fdb0 	bl	800b4e4 <_fflush_r>
 800b984:	b9e0      	cbnz	r0, 800b9c0 <__swbuf_r+0x74>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	3b01      	subs	r3, #1
 800b98a:	60a3      	str	r3, [r4, #8]
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	6022      	str	r2, [r4, #0]
 800b992:	701e      	strb	r6, [r3, #0]
 800b994:	6962      	ldr	r2, [r4, #20]
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	429a      	cmp	r2, r3
 800b99a:	d004      	beq.n	800b9a6 <__swbuf_r+0x5a>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	07db      	lsls	r3, r3, #31
 800b9a0:	d506      	bpl.n	800b9b0 <__swbuf_r+0x64>
 800b9a2:	2e0a      	cmp	r6, #10
 800b9a4:	d104      	bne.n	800b9b0 <__swbuf_r+0x64>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f7ff fd9b 	bl	800b4e4 <_fflush_r>
 800b9ae:	b938      	cbnz	r0, 800b9c0 <__swbuf_r+0x74>
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f806 	bl	800b9c8 <__swsetup_r>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d0d5      	beq.n	800b96c <__swbuf_r+0x20>
 800b9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9c4:	e7f4      	b.n	800b9b0 <__swbuf_r+0x64>
	...

0800b9c8 <__swsetup_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <__swsetup_r+0xac>)
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	b118      	cbz	r0, 800b9dc <__swsetup_r+0x14>
 800b9d4:	6a03      	ldr	r3, [r0, #32]
 800b9d6:	b90b      	cbnz	r3, 800b9dc <__swsetup_r+0x14>
 800b9d8:	f7fd ff82 	bl	80098e0 <__sinit>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9e2:	0718      	lsls	r0, r3, #28
 800b9e4:	d422      	bmi.n	800ba2c <__swsetup_r+0x64>
 800b9e6:	06d9      	lsls	r1, r3, #27
 800b9e8:	d407      	bmi.n	800b9fa <__swsetup_r+0x32>
 800b9ea:	2309      	movs	r3, #9
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f6:	81a3      	strh	r3, [r4, #12]
 800b9f8:	e034      	b.n	800ba64 <__swsetup_r+0x9c>
 800b9fa:	0758      	lsls	r0, r3, #29
 800b9fc:	d512      	bpl.n	800ba24 <__swsetup_r+0x5c>
 800b9fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba00:	b141      	cbz	r1, 800ba14 <__swsetup_r+0x4c>
 800ba02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d002      	beq.n	800ba10 <__swsetup_r+0x48>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f7fe ff1c 	bl	800a848 <_free_r>
 800ba10:	2300      	movs	r3, #0
 800ba12:	6363      	str	r3, [r4, #52]	; 0x34
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6063      	str	r3, [r4, #4]
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f043 0308 	orr.w	r3, r3, #8
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	b94b      	cbnz	r3, 800ba44 <__swsetup_r+0x7c>
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba3a:	d003      	beq.n	800ba44 <__swsetup_r+0x7c>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 f883 	bl	800bb4a <__smakebuf_r>
 800ba44:	89a0      	ldrh	r0, [r4, #12]
 800ba46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba4a:	f010 0301 	ands.w	r3, r0, #1
 800ba4e:	d00a      	beq.n	800ba66 <__swsetup_r+0x9e>
 800ba50:	2300      	movs	r3, #0
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	6963      	ldr	r3, [r4, #20]
 800ba56:	425b      	negs	r3, r3
 800ba58:	61a3      	str	r3, [r4, #24]
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	b943      	cbnz	r3, 800ba70 <__swsetup_r+0xa8>
 800ba5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba62:	d1c4      	bne.n	800b9ee <__swsetup_r+0x26>
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	0781      	lsls	r1, r0, #30
 800ba68:	bf58      	it	pl
 800ba6a:	6963      	ldrpl	r3, [r4, #20]
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	e7f4      	b.n	800ba5a <__swsetup_r+0x92>
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7f7      	b.n	800ba64 <__swsetup_r+0x9c>
 800ba74:	20000094 	.word	0x20000094

0800ba78 <_raise_r>:
 800ba78:	291f      	cmp	r1, #31
 800ba7a:	b538      	push	{r3, r4, r5, lr}
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	d904      	bls.n	800ba8c <_raise_r+0x14>
 800ba82:	2316      	movs	r3, #22
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba8e:	b112      	cbz	r2, 800ba96 <_raise_r+0x1e>
 800ba90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba94:	b94b      	cbnz	r3, 800baaa <_raise_r+0x32>
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f830 	bl	800bafc <_getpid_r>
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	4601      	mov	r1, r0
 800baa0:	4620      	mov	r0, r4
 800baa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa6:	f000 b817 	b.w	800bad8 <_kill_r>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d00a      	beq.n	800bac4 <_raise_r+0x4c>
 800baae:	1c59      	adds	r1, r3, #1
 800bab0:	d103      	bne.n	800baba <_raise_r+0x42>
 800bab2:	2316      	movs	r3, #22
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	2001      	movs	r0, #1
 800bab8:	e7e7      	b.n	800ba8a <_raise_r+0x12>
 800baba:	2400      	movs	r4, #0
 800babc:	4628      	mov	r0, r5
 800babe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bac2:	4798      	blx	r3
 800bac4:	2000      	movs	r0, #0
 800bac6:	e7e0      	b.n	800ba8a <_raise_r+0x12>

0800bac8 <raise>:
 800bac8:	4b02      	ldr	r3, [pc, #8]	; (800bad4 <raise+0xc>)
 800baca:	4601      	mov	r1, r0
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	f7ff bfd3 	b.w	800ba78 <_raise_r>
 800bad2:	bf00      	nop
 800bad4:	20000094 	.word	0x20000094

0800bad8 <_kill_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	2300      	movs	r3, #0
 800badc:	4d06      	ldr	r5, [pc, #24]	; (800baf8 <_kill_r+0x20>)
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f5 fae3 	bl	80010b0 <_kill>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_kill_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_kill_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	2000054c 	.word	0x2000054c

0800bafc <_getpid_r>:
 800bafc:	f7f5 bad1 	b.w	80010a2 <_getpid>

0800bb00 <__swhatbuf_r>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	460c      	mov	r4, r1
 800bb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb08:	4615      	mov	r5, r2
 800bb0a:	2900      	cmp	r1, #0
 800bb0c:	461e      	mov	r6, r3
 800bb0e:	b096      	sub	sp, #88	; 0x58
 800bb10:	da0c      	bge.n	800bb2c <__swhatbuf_r+0x2c>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	2100      	movs	r1, #0
 800bb16:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb1a:	bf0c      	ite	eq
 800bb1c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb20:	2340      	movne	r3, #64	; 0x40
 800bb22:	2000      	movs	r0, #0
 800bb24:	6031      	str	r1, [r6, #0]
 800bb26:	602b      	str	r3, [r5, #0]
 800bb28:	b016      	add	sp, #88	; 0x58
 800bb2a:	bd70      	pop	{r4, r5, r6, pc}
 800bb2c:	466a      	mov	r2, sp
 800bb2e:	f000 f849 	bl	800bbc4 <_fstat_r>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	dbed      	blt.n	800bb12 <__swhatbuf_r+0x12>
 800bb36:	9901      	ldr	r1, [sp, #4]
 800bb38:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb3c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb40:	4259      	negs	r1, r3
 800bb42:	4159      	adcs	r1, r3
 800bb44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb48:	e7eb      	b.n	800bb22 <__swhatbuf_r+0x22>

0800bb4a <__smakebuf_r>:
 800bb4a:	898b      	ldrh	r3, [r1, #12]
 800bb4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb4e:	079d      	lsls	r5, r3, #30
 800bb50:	4606      	mov	r6, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	d507      	bpl.n	800bb66 <__smakebuf_r+0x1c>
 800bb56:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	6123      	str	r3, [r4, #16]
 800bb5e:	2301      	movs	r3, #1
 800bb60:	6163      	str	r3, [r4, #20]
 800bb62:	b002      	add	sp, #8
 800bb64:	bd70      	pop	{r4, r5, r6, pc}
 800bb66:	466a      	mov	r2, sp
 800bb68:	ab01      	add	r3, sp, #4
 800bb6a:	f7ff ffc9 	bl	800bb00 <__swhatbuf_r>
 800bb6e:	9900      	ldr	r1, [sp, #0]
 800bb70:	4605      	mov	r5, r0
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7fe fed8 	bl	800a928 <_malloc_r>
 800bb78:	b948      	cbnz	r0, 800bb8e <__smakebuf_r+0x44>
 800bb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb7e:	059a      	lsls	r2, r3, #22
 800bb80:	d4ef      	bmi.n	800bb62 <__smakebuf_r+0x18>
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	f043 0302 	orr.w	r3, r3, #2
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	e7e3      	b.n	800bb56 <__smakebuf_r+0xc>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	6020      	str	r0, [r4, #0]
 800bb92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb96:	81a3      	strh	r3, [r4, #12]
 800bb98:	9b00      	ldr	r3, [sp, #0]
 800bb9a:	6120      	str	r0, [r4, #16]
 800bb9c:	6163      	str	r3, [r4, #20]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	b15b      	cbz	r3, 800bbba <__smakebuf_r+0x70>
 800bba2:	4630      	mov	r0, r6
 800bba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba8:	f000 f81e 	bl	800bbe8 <_isatty_r>
 800bbac:	b128      	cbz	r0, 800bbba <__smakebuf_r+0x70>
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f023 0303 	bic.w	r3, r3, #3
 800bbb4:	f043 0301 	orr.w	r3, r3, #1
 800bbb8:	81a3      	strh	r3, [r4, #12]
 800bbba:	89a3      	ldrh	r3, [r4, #12]
 800bbbc:	431d      	orrs	r5, r3
 800bbbe:	81a5      	strh	r5, [r4, #12]
 800bbc0:	e7cf      	b.n	800bb62 <__smakebuf_r+0x18>
	...

0800bbc4 <_fstat_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	4d06      	ldr	r5, [pc, #24]	; (800bbe4 <_fstat_r+0x20>)
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f7f5 facb 	bl	800116c <_fstat>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	d102      	bne.n	800bbe0 <_fstat_r+0x1c>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	b103      	cbz	r3, 800bbe0 <_fstat_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	2000054c 	.word	0x2000054c

0800bbe8 <_isatty_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	2300      	movs	r3, #0
 800bbec:	4d05      	ldr	r5, [pc, #20]	; (800bc04 <_isatty_r+0x1c>)
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f5 fac9 	bl	800118a <_isatty>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_isatty_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_isatty_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	2000054c 	.word	0x2000054c

0800bc08 <_init>:
 800bc08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0a:	bf00      	nop
 800bc0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc0e:	bc08      	pop	{r3}
 800bc10:	469e      	mov	lr, r3
 800bc12:	4770      	bx	lr

0800bc14 <_fini>:
 800bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc16:	bf00      	nop
 800bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1a:	bc08      	pop	{r3}
 800bc1c:	469e      	mov	lr, r3
 800bc1e:	4770      	bx	lr
