
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800bc00  0800bc00  0001bc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfdc  0800bfdc  00020204  2**0
                  CONTENTS
  4 .ARM          00000000  0800bfdc  0800bfdc  00020204  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bfdc  0800bfdc  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfdc  0800bfdc  0001bfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfe0  0800bfe0  0001bfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800bfe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000034c  20000204  0800c1e8  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  0800c1e8  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002022d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000226da  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbc  00000000  00000000  0004294a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00045608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f09  00000000  00000000  00046978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dcf6  00000000  00000000  00047881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c98  00000000  00000000  00065577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a922f  00000000  00000000  0007d20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006448  00000000  00000000  00126440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0012c888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000204 	.word	0x20000204
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bbe8 	.word	0x0800bbe8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000208 	.word	0x20000208
 800014c:	0800bbe8 	.word	0x0800bbe8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	f5ad 6df4 	sub.w	sp, sp, #1952	; 0x7a0
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	  uint8_t buff[50];
	  VL53L1_RangingMeasurementData_t RangingData;
	  VL53L1_Dev_t  vl53l1_l; // center module
	  VL53L1_Dev_t  vl53l1_r;
	  VL53L1_DEV    Dev = &vl53l1_l;
 8000a90:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8000a94:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c

	  uint8_t ToFSensor = 0; // left = 0, right = 1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
	  uint8_t newI2C = 0x52;
 8000a9e:	2352      	movs	r3, #82	; 0x52
 8000aa0:	f887 3798 	strb.w	r3, [r7, #1944]	; 0x798
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa4:	f000 fc82 	bl	80013ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa8:	f000 f91e 	bl	8000ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aac:	f000 f9f2 	bl	8000e94 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ab0:	f000 f998 	bl	8000de4 <MX_I2C1_Init>
  MX_CAN_Init();
 8000ab4:	f000 f95e 	bl	8000d74 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000ab8:	f000 f9c2 	bl	8000e40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  for (ToFSensor=0;ToFSensor<2;ToFSensor++){
 8000abc:	2300      	movs	r3, #0
 8000abe:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
 8000ac2:	e085      	b.n	8000bd0 <main+0x148>
  		switch(ToFSensor){
 8000ac4:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <main+0x4a>
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d017      	beq.n	8000b00 <main+0x78>
 8000ad0:	e02c      	b.n	8000b2c <main+0xa4>
  			case 0:
  				HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad8:	487c      	ldr	r0, [pc, #496]	; (8000ccc <main+0x244>)
 8000ada:	f001 f895 	bl	8001c08 <HAL_GPIO_WritePin>
  				HAL_Delay(2); // 2ms reset time
 8000ade:	2002      	movs	r0, #2
 8000ae0:	f000 fcc6 	bl	8001470 <HAL_Delay>
  				HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aea:	4878      	ldr	r0, [pc, #480]	; (8000ccc <main+0x244>)
 8000aec:	f001 f88c 	bl	8001c08 <HAL_GPIO_WritePin>
  	    	  	HAL_Delay(2);
 8000af0:	2002      	movs	r0, #2
 8000af2:	f000 fcbd 	bl	8001470 <HAL_Delay>
  				Dev=&vl53l1_l;
 8000af6:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8000afa:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
  				break;
 8000afe:	e015      	b.n	8000b2c <main+0xa4>
  			case 1:
  				HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b06:	4872      	ldr	r0, [pc, #456]	; (8000cd0 <main+0x248>)
 8000b08:	f001 f87e 	bl	8001c08 <HAL_GPIO_WritePin>
  				HAL_Delay(2); // 2ms reset time
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 fcaf 	bl	8001470 <HAL_Delay>
  				HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b18:	486d      	ldr	r0, [pc, #436]	; (8000cd0 <main+0x248>)
 8000b1a:	f001 f875 	bl	8001c08 <HAL_GPIO_WritePin>
  				HAL_Delay(2);
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f000 fca6 	bl	8001470 <HAL_Delay>
  				Dev=&vl53l1_r;
 8000b24:	463b      	mov	r3, r7
 8000b26:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
  				break;
 8000b2a:	bf00      	nop
  }

	  Dev->I2cHandle = &hi2c1;
 8000b2c:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8000b30:	4a68      	ldr	r2, [pc, #416]	; (8000cd4 <main+0x24c>)
 8000b32:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	  Dev->I2cDevAddr = 0x52;
 8000b36:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8000b3a:	2252      	movs	r2, #82	; 0x52
 8000b3c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	  Dev->comms_type = 1;
 8000b40:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8000b44:	2201      	movs	r2, #1
 8000b46:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399
	  newI2C = Dev->I2cDevAddr + (ToFSensor+1)*2;
 8000b4a:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8000b4e:	f893 2398 	ldrb.w	r2, [r3, #920]	; 0x398
 8000b52:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4413      	add	r3, r2
 8000b60:	f887 3798 	strb.w	r3, [r7, #1944]	; 0x798
	  VL53L1_SetDeviceAddress(Dev, newI2C);
 8000b64:	f897 3798 	ldrb.w	r3, [r7, #1944]	; 0x798
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000b6e:	f002 fe77 	bl	8003860 <VL53L1_SetDeviceAddress>
	  Dev->I2cDevAddr=newI2C;
 8000b72:	f8d7 379c 	ldr.w	r3, [r7, #1948]	; 0x79c
 8000b76:	f897 2798 	ldrb.w	r2, [r7, #1944]	; 0x798
 8000b7a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
      HAL_Delay(2);
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f000 fc76 	bl	8001470 <HAL_Delay>
    /*** VL53L1X Initialization ***/
      VL53L1_WaitDeviceBooted( Dev );
 8000b84:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000b88:	f002 fee8 	bl	800395c <VL53L1_WaitDeviceBooted>
      VL53L1_DataInit( Dev );
 8000b8c:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000b90:	f002 fe8c 	bl	80038ac <VL53L1_DataInit>
      VL53L1_StaticInit( Dev );
 8000b94:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000b98:	f002 fec1 	bl	800391e <VL53L1_StaticInit>
      VL53L1_SetDistanceMode( Dev, VL53L1_DISTANCEMODE_LONG );
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000ba2:	f003 f809 	bl	8003bb8 <VL53L1_SetDistanceMode>
      VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev, 50000 );
 8000ba6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000baa:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000bae:	f003 f879 	bl	8003ca4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
      VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev, 500 );
 8000bb2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000bb6:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000bba:	f003 f9fd 	bl	8003fb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
      VL53L1_StartMeasurement( Dev );
 8000bbe:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000bc2:	f003 fb37 	bl	8004234 <VL53L1_StartMeasurement>
  for (ToFSensor=0;ToFSensor<2;ToFSensor++){
 8000bc6:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
 8000bd0:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	f67f af75 	bls.w	8000ac4 <main+0x3c>
  }
    HAL_CAN_Start(&hcan);
 8000bda:	483f      	ldr	r0, [pc, #252]	; (8000cd8 <main+0x250>)
 8000bdc:	f000 fd67 	bl	80016ae <HAL_CAN_Start>
    TxHeader.DLC = 8;
 8000be0:	4b3e      	ldr	r3, [pc, #248]	; (8000cdc <main+0x254>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	611a      	str	r2, [r3, #16]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for (ToFSensor=0;ToFSensor<2;ToFSensor++){
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
 8000bec:	e04a      	b.n	8000c84 <main+0x1fc>
		  switch(ToFSensor){
 8000bee:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <main+0x174>
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d020      	beq.n	8000c3c <main+0x1b4>
 8000bfa:	e03e      	b.n	8000c7a <main+0x1f2>
		    	case 0:
		    		Dev=&vl53l1_l;
 8000bfc:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 8000c00:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
		    		VL53L1_StartMeasurement(Dev);
 8000c04:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c08:	f003 fb14 	bl	8004234 <VL53L1_StartMeasurement>
		    		VL53L1_WaitMeasurementDataReady( Dev );
 8000c0c:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c10:	f003 fb92 	bl	8004338 <VL53L1_WaitMeasurementDataReady>
		    		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8000c14:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c1e:	f003 fd45 	bl	80046ac <VL53L1_GetRangingMeasurementData>
		    		rangeLeft = RangingData.RangeMilliMeter;
 8000c22:	f9b7 3760 	ldrsh.w	r3, [r7, #1888]	; 0x760
 8000c26:	f887 379a 	strb.w	r3, [r7, #1946]	; 0x79a
		    		//	  	HAL_CAN_AddTxMessage(&hcan, &TxHeader, buff, &MailBox);
		    	    HAL_Delay(1000);
 8000c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2e:	f000 fc1f 	bl	8001470 <HAL_Delay>
		    	    VL53L1_ClearInterruptAndStartMeasurement( Dev );
 8000c32:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c36:	f003 fb69 	bl	800430c <VL53L1_ClearInterruptAndStartMeasurement>
		    		break;
 8000c3a:	e01e      	b.n	8000c7a <main+0x1f2>
		    	case 1:

		    		Dev=&vl53l1_r;
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
		    		VL53L1_StartMeasurement(Dev);
 8000c42:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c46:	f003 faf5 	bl	8004234 <VL53L1_StartMeasurement>
		    		VL53L1_WaitMeasurementDataReady( Dev );
 8000c4a:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c4e:	f003 fb73 	bl	8004338 <VL53L1_WaitMeasurementDataReady>
		    		VL53L1_GetRangingMeasurementData( Dev, &RangingData );
 8000c52:	f507 63e9 	add.w	r3, r7, #1864	; 0x748
 8000c56:	4619      	mov	r1, r3
 8000c58:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c5c:	f003 fd26 	bl	80046ac <VL53L1_GetRangingMeasurementData>
		    		rangeRight = RangingData.RangeMilliMeter;
 8000c60:	f9b7 3760 	ldrsh.w	r3, [r7, #1888]	; 0x760
 8000c64:	f887 3799 	strb.w	r3, [r7, #1945]	; 0x799
		    		//	  	HAL_CAN_AddTxMessage(&hcan, &TxHeader, buff, &MailBox);
		    		HAL_Delay(1000);
 8000c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6c:	f000 fc00 	bl	8001470 <HAL_Delay>
		    		VL53L1_ClearInterruptAndStartMeasurement( Dev );
 8000c70:	f8d7 079c 	ldr.w	r0, [r7, #1948]	; 0x79c
 8000c74:	f003 fb4a 	bl	800430c <VL53L1_ClearInterruptAndStartMeasurement>
		    		break;
 8000c78:	bf00      	nop
	  for (ToFSensor=0;ToFSensor<2;ToFSensor++){
 8000c7a:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000c7e:	3301      	adds	r3, #1
 8000c80:	f887 379b 	strb.w	r3, [r7, #1947]	; 0x79b
 8000c84:	f897 379b 	ldrb.w	r3, [r7, #1947]	; 0x79b
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d9b0      	bls.n	8000bee <main+0x166>
	  	}
	  }
		memset(buff,0,sizeof(buff)); //clear buffer
 8000c8c:	f207 7364 	addw	r3, r7, #1892	; 0x764
 8000c90:	2232      	movs	r2, #50	; 0x32
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f008 feac 	bl	80099f2 <memset>
		sprintf( (char*)buff, "L%dR%d ",rangeLeft,rangeRight );
 8000c9a:	f897 279a 	ldrb.w	r2, [r7, #1946]	; 0x79a
 8000c9e:	f897 3799 	ldrb.w	r3, [r7, #1945]	; 0x799
 8000ca2:	f207 7064 	addw	r0, r7, #1892	; 0x764
 8000ca6:	490e      	ldr	r1, [pc, #56]	; (8000ce0 <main+0x258>)
 8000ca8:	f008 fe40 	bl	800992c <siprintf>
		HAL_UART_Transmit(&huart1, buff, strlen((char*)buff ), 500);
 8000cac:	f207 7364 	addw	r3, r7, #1892	; 0x764
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fa4d 	bl	8000150 <strlen>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	f207 7164 	addw	r1, r7, #1892	; 0x764
 8000cbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cc2:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <main+0x25c>)
 8000cc4:	f002 fc4c 	bl	8003560 <HAL_UART_Transmit>
	  for (ToFSensor=0;ToFSensor<2;ToFSensor++){
 8000cc8:	e78d      	b.n	8000be6 <main+0x15e>
 8000cca:	bf00      	nop
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	20000260 	.word	0x20000260
 8000cd8:	20000238 	.word	0x20000238
 8000cdc:	20000220 	.word	0x20000220
 8000ce0:	0800bc00 	.word	0x0800bc00
 8000ce4:	200002b4 	.word	0x200002b4

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cee:	f107 0318 	add.w	r3, r7, #24
 8000cf2:	2228      	movs	r2, #40	; 0x28
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f008 fe7b 	bl	80099f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d26:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0318 	add.w	r3, r7, #24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ffb5 	bl	8002ca0 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d3c:	f000 f924 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d56:	1d3b      	adds	r3, r7, #4
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 fa22 	bl	80031a4 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d66:	f000 f90f 	bl	8000f88 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3740      	adds	r7, #64	; 0x40
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d7a:	4a19      	ldr	r2, [pc, #100]	; (8000de0 <MX_CAN_Init+0x6c>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000d7e:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000d90:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_14TQ;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d94:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8000d98:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_CAN_Init+0x68>)
 8000d9c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000da0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_CAN_Init+0x68>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_CAN_Init+0x68>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_CAN_Init+0x68>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_CAN_Init+0x68>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_CAN_Init+0x68>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_CAN_Init+0x68>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_CAN_Init+0x68>)
 8000dc8:	f000 fb76 	bl	80014b8 <HAL_CAN_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000dd2:	f000 f8d9 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000238 	.word	0x20000238
 8000de0:	40006400 	.word	0x40006400

08000de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <MX_I2C1_Init+0x54>)
 8000dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df0:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x58>)
 8000df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e14:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_I2C1_Init+0x50>)
 8000e22:	f000 ff09 	bl	8001c38 <HAL_I2C_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e2c:	f000 f8ac 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000260 	.word	0x20000260
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	000186a0 	.word	0x000186a0

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART1_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e78:	f002 fb22 	bl	80034c0 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f881 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200002b4 	.word	0x200002b4
 8000e90:	40013800 	.word	0x40013800

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0310 	add.w	r3, r7, #16
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea8:	4b34      	ldr	r3, [pc, #208]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a33      	ldr	r2, [pc, #204]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000eae:	f043 0310 	orr.w	r3, r3, #16
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b31      	ldr	r3, [pc, #196]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ec6:	f043 0320 	orr.w	r3, r3, #32
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0320 	and.w	r3, r3, #32
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ede:	f043 0304 	orr.w	r3, r3, #4
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000ef6:	f043 0308 	orr.w	r3, r3, #8
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <MX_GPIO_Init+0xe8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0e:	481c      	ldr	r0, [pc, #112]	; (8000f80 <MX_GPIO_Init+0xec>)
 8000f10:	f000 fe7a 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut0_GPIO_Port, XShut0_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	4819      	ldr	r0, [pc, #100]	; (8000f80 <MX_GPIO_Init+0xec>)
 8000f1c:	f000 fe74 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XShut1_GPIO_Port, XShut1_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f26:	4817      	ldr	r0, [pc, #92]	; (8000f84 <MX_GPIO_Init+0xf0>)
 8000f28:	f000 fe6e 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f32:	4814      	ldr	r0, [pc, #80]	; (8000f84 <MX_GPIO_Init+0xf0>)
 8000f34:	f000 fe68 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 XShut0_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|XShut0_Pin;
 8000f38:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480b      	ldr	r0, [pc, #44]	; (8000f80 <MX_GPIO_Init+0xec>)
 8000f52:	f000 fcd5 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : XShut1_Pin PB9 */
  GPIO_InitStruct.Pin = XShut1_Pin|GPIO_PIN_9;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_GPIO_Init+0xf0>)
 8000f70:	f000 fcc6 	bl	8001900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40010c00 	.word	0x40010c00

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_MspInit+0x40>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <HAL_CAN_MspInit+0x8c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d131      	bne.n	800105c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <HAL_CAN_MspInit+0x90>)
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <HAL_CAN_MspInit+0x90>)
 8000ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001002:	61d3      	str	r3, [r2, #28]
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_CAN_MspInit+0x90>)
 8001006:	69db      	ldr	r3, [r3, #28]
 8001008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_CAN_MspInit+0x90>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <HAL_CAN_MspInit+0x90>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_CAN_MspInit+0x90>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <HAL_CAN_MspInit+0x94>)
 800103e:	f000 fc5f 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_CAN_MspInit+0x94>)
 8001058:	f000 fc52 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3720      	adds	r7, #32
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40006400 	.word	0x40006400
 8001068:	40021000 	.word	0x40021000
 800106c:	40010800 	.word	0x40010800

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <HAL_I2C_MspInit+0x70>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d123      	bne.n	80010d8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 8001096:	f043 0308 	orr.w	r3, r3, #8
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0308 	and.w	r3, r3, #8
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010a8:	23c0      	movs	r3, #192	; 0xc0
 80010aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ac:	2312      	movs	r3, #18
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b0:	2303      	movs	r3, #3
 80010b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4619      	mov	r1, r3
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_I2C_MspInit+0x78>)
 80010bc:	f000 fc20 	bl	8001900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 80010c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ca:	61d3      	str	r3, [r2, #28]
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_I2C_MspInit+0x74>)
 80010ce:	69db      	ldr	r3, [r3, #28]
 80010d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40005400 	.word	0x40005400
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010c00 	.word	0x40010c00

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_UART_MspInit+0x8c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d131      	bne.n	8001170 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0x90>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a1a      	ldr	r2, [pc, #104]	; (800117c <HAL_UART_MspInit+0x90>)
 8001112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x90>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x90>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <HAL_UART_MspInit+0x90>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_UART_MspInit+0x90>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4619      	mov	r1, r3
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <HAL_UART_MspInit+0x94>)
 8001152:	f000 fbd5 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800115a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4619      	mov	r1, r3
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <HAL_UART_MspInit+0x94>)
 800116c:	f000 fbc8 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001170:	bf00      	nop
 8001172:	3720      	adds	r7, #32
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ca:	f000 f935 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  return 1;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <_kill>:

int _kill(int pid, int sig)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011ea:	f008 fc67 	bl	8009abc <__errno>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2216      	movs	r2, #22
 80011f2:	601a      	str	r2, [r3, #0]
  return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_exit>:

void _exit (int status)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001208:	f04f 31ff 	mov.w	r1, #4294967295
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ffe7 	bl	80011e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001212:	e7fe      	b.n	8001212 <_exit+0x12>

08001214 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	e00a      	b.n	800123c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001226:	f3af 8000 	nop.w
 800122a:	4601      	mov	r1, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1c5a      	adds	r2, r3, #1
 8001230:	60ba      	str	r2, [r7, #8]
 8001232:	b2ca      	uxtb	r2, r1
 8001234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3301      	adds	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbf0      	blt.n	8001226 <_read+0x12>
  }

  return len;
 8001244:	687b      	ldr	r3, [r7, #4]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	e009      	b.n	8001274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	1c5a      	adds	r2, r3, #1
 8001264:	60ba      	str	r2, [r7, #8]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	3301      	adds	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	dbf1      	blt.n	8001260 <_write+0x12>
  }
  return len;
 800127c:	687b      	ldr	r3, [r7, #4]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_close>:

int _close(int file)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ac:	605a      	str	r2, [r3, #4]
  return 0;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_isatty>:

int _isatty(int file)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c2:	2301      	movs	r3, #1
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
	...

080012e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <_sbrk+0x5c>)
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <_sbrk+0x60>)
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d102      	bne.n	800130a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <_sbrk+0x64>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <_sbrk+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	d207      	bcs.n	8001328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001318:	f008 fbd0 	bl	8009abc <__errno>
 800131c:	4603      	mov	r3, r0
 800131e:	220c      	movs	r2, #12
 8001320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	e009      	b.n	800133c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132e:	4b07      	ldr	r3, [pc, #28]	; (800134c <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <_sbrk+0x64>)
 8001338:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20005000 	.word	0x20005000
 8001348:	00000400 	.word	0x00000400
 800134c:	200002fc 	.word	0x200002fc
 8001350:	20000550 	.word	0x20000550

08001354 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001360:	f7ff fff8 	bl	8001354 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001366:	490c      	ldr	r1, [pc, #48]	; (8001398 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001368:	4a0c      	ldr	r2, [pc, #48]	; (800139c <LoopFillZerobss+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800136c:	e002      	b.n	8001374 <LoopCopyDataInit>

0800136e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001372:	3304      	adds	r3, #4

08001374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001378:	d3f9      	bcc.n	800136e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800137c:	4c09      	ldr	r4, [pc, #36]	; (80013a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001380:	e001      	b.n	8001386 <LoopFillZerobss>

08001382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001384:	3204      	adds	r2, #4

08001386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001388:	d3fb      	bcc.n	8001382 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800138a:	f008 fb9d 	bl	8009ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800138e:	f7ff fb7b 	bl	8000a88 <main>
  bx lr
 8001392:	4770      	bx	lr
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800139c:	0800bfe4 	.word	0x0800bfe4
  ldr r2, =_sbss
 80013a0:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 80013a4:	20000550 	.word	0x20000550

080013a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_2_IRQHandler>
	...

080013ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x28>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x28>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 fa6b 	bl	8001898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fde4 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 fa75 	bl	80018e6 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 fa4b 	bl	80018ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000000 	.word	0x20000000
 8001430:	20000008 	.word	0x20000008
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_IncTick+0x1c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x20>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a03      	ldr	r2, [pc, #12]	; (8001458 <HAL_IncTick+0x20>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	20000008 	.word	0x20000008
 8001458:	20000300 	.word	0x20000300

0800145c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return uwTick;
 8001460:	4b02      	ldr	r3, [pc, #8]	; (800146c <HAL_GetTick+0x10>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	20000300 	.word	0x20000300

08001470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001478:	f7ff fff0 	bl	800145c <HAL_GetTick>
 800147c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d005      	beq.n	8001496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <HAL_Delay+0x44>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	461a      	mov	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4413      	add	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001496:	bf00      	nop
 8001498:	f7ff ffe0 	bl	800145c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d8f7      	bhi.n	8001498 <HAL_Delay+0x28>
  {
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008

080014b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e0ed      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fd7e 	bl	8000fd8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014ec:	f7ff ffb6 	bl	800145c <HAL_GetTick>
 80014f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014f2:	e012      	b.n	800151a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014f4:	f7ff ffb2 	bl	800145c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b0a      	cmp	r3, #10
 8001500:	d90b      	bls.n	800151a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2205      	movs	r2, #5
 8001512:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0c5      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0e5      	beq.n	80014f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0202 	bic.w	r2, r2, #2
 8001536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff ff90 	bl	800145c <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800153e:	e012      	b.n	8001566 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001540:	f7ff ff8c 	bl	800145c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b0a      	cmp	r3, #10
 800154c:	d90b      	bls.n	8001566 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2205      	movs	r2, #5
 800155e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e09f      	b.n	80016a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e5      	bne.n	8001540 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7e1b      	ldrb	r3, [r3, #24]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d108      	bne.n	800158e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800159c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d108      	bne.n	80015b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e9b      	ldrb	r3, [r3, #26]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0220 	orr.w	r2, r2, #32
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e007      	b.n	80015f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 0220 	bic.w	r2, r2, #32
 80015f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7edb      	ldrb	r3, [r3, #27]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d108      	bne.n	800160c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0210 	bic.w	r2, r2, #16
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	e007      	b.n	800161c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0210 	orr.w	r2, r2, #16
 800161a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	7f1b      	ldrb	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0208 	orr.w	r2, r2, #8
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e007      	b.n	8001646 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0208 	bic.w	r2, r2, #8
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7f5b      	ldrb	r3, [r3, #29]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d108      	bne.n	8001660 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f042 0204 	orr.w	r2, r2, #4
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	e007      	b.n	8001670 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0204 	bic.w	r2, r2, #4
 800166e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	431a      	orrs	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	431a      	orrs	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	ea42 0103 	orr.w	r1, r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	1e5a      	subs	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d12e      	bne.n	8001720 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2202      	movs	r2, #2
 80016c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 0201 	bic.w	r2, r2, #1
 80016d8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016da:	f7ff febf 	bl	800145c <HAL_GetTick>
 80016de:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e0:	e012      	b.n	8001708 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e2:	f7ff febb 	bl	800145c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d90b      	bls.n	8001708 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2205      	movs	r2, #5
 8001700:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e012      	b.n	800172e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e5      	bne.n	80016e2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	e006      	b.n	800172e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001754:	4013      	ands	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800176a:	4a04      	ldr	r2, [pc, #16]	; (800177c <__NVIC_SetPriorityGrouping+0x44>)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	60d3      	str	r3, [r2, #12]
}
 8001770:	bf00      	nop
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <__NVIC_GetPriorityGrouping+0x18>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	f003 0307 	and.w	r3, r3, #7
}
 800178e:	4618      	mov	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	db0a      	blt.n	80017c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	490c      	ldr	r1, [pc, #48]	; (80017e8 <__NVIC_SetPriority+0x4c>)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	440b      	add	r3, r1
 80017c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c4:	e00a      	b.n	80017dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	4908      	ldr	r1, [pc, #32]	; (80017ec <__NVIC_SetPriority+0x50>)
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	f003 030f 	and.w	r3, r3, #15
 80017d2:	3b04      	subs	r3, #4
 80017d4:	0112      	lsls	r2, r2, #4
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	440b      	add	r3, r1
 80017da:	761a      	strb	r2, [r3, #24]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000e100 	.word	0xe000e100
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	; 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f1c3 0307 	rsb	r3, r3, #7
 800180a:	2b04      	cmp	r3, #4
 800180c:	bf28      	it	cs
 800180e:	2304      	movcs	r3, #4
 8001810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3304      	adds	r3, #4
 8001816:	2b06      	cmp	r3, #6
 8001818:	d902      	bls.n	8001820 <NVIC_EncodePriority+0x30>
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3b03      	subs	r3, #3
 800181e:	e000      	b.n	8001822 <NVIC_EncodePriority+0x32>
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	f04f 32ff 	mov.w	r2, #4294967295
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	401a      	ands	r2, r3
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001838:	f04f 31ff 	mov.w	r1, #4294967295
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	fa01 f303 	lsl.w	r3, r1, r3
 8001842:	43d9      	mvns	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001848:	4313      	orrs	r3, r2
         );
}
 800184a:	4618      	mov	r0, r3
 800184c:	3724      	adds	r7, #36	; 0x24
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001864:	d301      	bcc.n	800186a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001866:	2301      	movs	r3, #1
 8001868:	e00f      	b.n	800188a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800186a:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <SysTick_Config+0x40>)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001872:	210f      	movs	r1, #15
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	f7ff ff90 	bl	800179c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <SysTick_Config+0x40>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SysTick_Config+0x40>)
 8001884:	2207      	movs	r2, #7
 8001886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	e000e010 	.word	0xe000e010

08001898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ff49 	bl	8001738 <__NVIC_SetPriorityGrouping>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	4603      	mov	r3, r0
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c0:	f7ff ff5e 	bl	8001780 <__NVIC_GetPriorityGrouping>
 80018c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	6978      	ldr	r0, [r7, #20]
 80018cc:	f7ff ff90 	bl	80017f0 <NVIC_EncodePriority>
 80018d0:	4602      	mov	r2, r0
 80018d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff ff5f 	bl	800179c <__NVIC_SetPriority>
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff ffb0 	bl	8001854 <SysTick_Config>
 80018f4:	4603      	mov	r3, r0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b08b      	sub	sp, #44	; 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	e169      	b.n	8001be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001914:	2201      	movs	r2, #1
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8158 	bne.w	8001be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a9a      	ldr	r2, [pc, #616]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d05e      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800193c:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d875      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001942:	4a98      	ldr	r2, [pc, #608]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d058      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001948:	4a96      	ldr	r2, [pc, #600]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d86f      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800194e:	4a96      	ldr	r2, [pc, #600]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d052      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001954:	4a94      	ldr	r2, [pc, #592]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d869      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800195a:	4a94      	ldr	r2, [pc, #592]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d04c      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d863      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001966:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d046      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800196c:	4a90      	ldr	r2, [pc, #576]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d85d      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d82a      	bhi.n	80019cc <HAL_GPIO_Init+0xcc>
 8001976:	2b12      	cmp	r3, #18
 8001978:	d859      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <HAL_GPIO_Init+0x80>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019d5 	.word	0x080019d5
 8001988:	080019e7 	.word	0x080019e7
 800198c:	08001a29 	.word	0x08001a29
 8001990:	08001a2f 	.word	0x08001a2f
 8001994:	08001a2f 	.word	0x08001a2f
 8001998:	08001a2f 	.word	0x08001a2f
 800199c:	08001a2f 	.word	0x08001a2f
 80019a0:	08001a2f 	.word	0x08001a2f
 80019a4:	08001a2f 	.word	0x08001a2f
 80019a8:	08001a2f 	.word	0x08001a2f
 80019ac:	08001a2f 	.word	0x08001a2f
 80019b0:	08001a2f 	.word	0x08001a2f
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a2f 	.word	0x08001a2f
 80019bc:	08001a2f 	.word	0x08001a2f
 80019c0:	08001a2f 	.word	0x08001a2f
 80019c4:	080019dd 	.word	0x080019dd
 80019c8:	080019f1 	.word	0x080019f1
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_GPIO_Init+0x2b4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d2:	e02c      	b.n	8001a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e029      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e024      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3308      	adds	r3, #8
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e01f      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	330c      	adds	r3, #12
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e01a      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a02:	2304      	movs	r3, #4
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e013      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	611a      	str	r2, [r3, #16]
          break;
 8001a1a:	e009      	b.n	8001a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	615a      	str	r2, [r3, #20]
          break;
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          break;
 8001a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d801      	bhi.n	8001a3a <HAL_GPIO_Init+0x13a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	e001      	b.n	8001a3e <HAL_GPIO_Init+0x13e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d802      	bhi.n	8001a4c <HAL_GPIO_Init+0x14c>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x152>
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3b08      	subs	r3, #8
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	210f      	movs	r1, #15
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80b1 	beq.w	8001be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <HAL_GPIO_Init+0x1ec>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00d      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <HAL_GPIO_Init+0x2c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x2cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	492f      	ldr	r1, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4928      	ldr	r1, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	4922      	ldr	r1, [pc, #136]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	491e      	ldr	r1, [pc, #120]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4914      	ldr	r1, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d021      	beq.n	8001bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e021      	b.n	8001be2 <HAL_GPIO_Init+0x2e2>
 8001b9e:	bf00      	nop
 8001ba0:	10320000 	.word	0x10320000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10220000 	.word	0x10220000
 8001bac:	10210000 	.word	0x10210000
 8001bb0:	10120000 	.word	0x10120000
 8001bb4:	10110000 	.word	0x10110000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40011400 	.word	0x40011400
 8001bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae8e 	bne.w	8001914 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e12b      	b.n	8001ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fa06 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c9c:	f001 fbca 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 8001ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a81      	ldr	r2, [pc, #516]	; (8001eac <HAL_I2C_Init+0x274>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d807      	bhi.n	8001cbc <HAL_I2C_Init+0x84>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a80      	ldr	r2, [pc, #512]	; (8001eb0 <HAL_I2C_Init+0x278>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bf94      	ite	ls
 8001cb4:	2301      	movls	r3, #1
 8001cb6:	2300      	movhi	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e006      	b.n	8001cca <HAL_I2C_Init+0x92>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a7d      	ldr	r2, [pc, #500]	; (8001eb4 <HAL_I2C_Init+0x27c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0e7      	b.n	8001ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4a78      	ldr	r2, [pc, #480]	; (8001eb8 <HAL_I2C_Init+0x280>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0c9b      	lsrs	r3, r3, #18
 8001cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_I2C_Init+0x274>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d802      	bhi.n	8001d0c <HAL_I2C_Init+0xd4>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	e009      	b.n	8001d20 <HAL_I2C_Init+0xe8>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_I2C_Init+0x284>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	3301      	adds	r3, #1
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	495c      	ldr	r1, [pc, #368]	; (8001eac <HAL_I2C_Init+0x274>)
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	d819      	bhi.n	8001d74 <HAL_I2C_Init+0x13c>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e59      	subs	r1, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d54:	400b      	ands	r3, r1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_I2C_Init+0x138>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1e59      	subs	r1, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	e051      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e04f      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_I2C_Init+0x168>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e012      	b.n	8001dc6 <HAL_I2C_Init+0x18e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	0099      	lsls	r1, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Init+0x196>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e022      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10e      	bne.n	8001df4 <HAL_I2C_Init+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1e58      	subs	r0, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	440b      	add	r3, r1
 8001de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df2:	e00f      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	0099      	lsls	r1, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6911      	ldr	r1, [r2, #16]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	000186a0 	.word	0x000186a0
 8001eb0:	001e847f 	.word	0x001e847f
 8001eb4:	003d08ff 	.word	0x003d08ff
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	817b      	strh	r3, [r7, #10]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff fac2 	bl	800145c <HAL_GetTick>
 8001ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	f040 80e0 	bne.w	80020a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2319      	movs	r3, #25
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4970      	ldr	r1, [pc, #448]	; (80020b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fc9e 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0d3      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_I2C_Master_Transmit+0x50>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0cc      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d007      	beq.n	8001f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a50      	ldr	r2, [pc, #320]	; (80020b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fb08 	bl	8002594 <I2C_MasterRequestWrite>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e08d      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fa4:	e066      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	6a39      	ldr	r1, [r7, #32]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fd5c 	bl	8002a68 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d107      	bne.n	8001fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06b      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d11b      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x188>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d017      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fd53 	bl	8002af8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e01a      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d194      	bne.n	8001fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	00100002 	.word	0x00100002
 80020b8:	ffff0000 	.word	0xffff0000

080020bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
 80020cc:	4613      	mov	r3, r2
 80020ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff f9c2 	bl	800145c <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f040 824b 	bne.w	800257e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2319      	movs	r3, #25
 80020ee:	2201      	movs	r2, #1
 80020f0:	497f      	ldr	r1, [pc, #508]	; (80022f0 <HAL_I2C_Master_Receive+0x234>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fb9e 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	e23e      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2C_Master_Receive+0x54>
 800210c:	2302      	movs	r3, #2
 800210e:	e237      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d007      	beq.n	8002136 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002144:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2222      	movs	r2, #34	; 0x22
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2210      	movs	r2, #16
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	893a      	ldrh	r2, [r7, #8]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_I2C_Master_Receive+0x238>)
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002178:	8979      	ldrh	r1, [r7, #10]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa8a 	bl	8002698 <I2C_MasterRequestRead>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1f8      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e1cc      	b.n	8002558 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11e      	bne.n	8002204 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d6:	b672      	cpsid	i
}
 80021d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002200:	b662      	cpsie	i
}
 8002202:	e035      	b.n	8002270 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b02      	cmp	r3, #2
 800220a:	d11e      	bne.n	800224a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002246:	b662      	cpsie	i
}
 8002248:	e012      	b.n	8002270 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002270:	e172      	b.n	8002558 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b03      	cmp	r3, #3
 8002278:	f200 811f 	bhi.w	80024ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b01      	cmp	r3, #1
 8002282:	d123      	bne.n	80022cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fc7d 	bl	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e173      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ca:	e145      	b.n	8002558 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d152      	bne.n	800237a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	2200      	movs	r2, #0
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <HAL_I2C_Master_Receive+0x23c>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 faa8 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e148      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
 80022ee:	bf00      	nop
 80022f0:	00100002 	.word	0x00100002
 80022f4:	ffff0000 	.word	0xffff0000
 80022f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002342:	b662      	cpsie	i
}
 8002344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002378:	e0ee      	b.n	8002558 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	2200      	movs	r2, #0
 8002382:	4981      	ldr	r1, [pc, #516]	; (8002588 <HAL_I2C_Master_Receive+0x4cc>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fa55 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0f5      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023da:	4b6c      	ldr	r3, [pc, #432]	; (800258c <HAL_I2C_Master_Receive+0x4d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	4a6b      	ldr	r2, [pc, #428]	; (8002590 <HAL_I2C_Master_Receive+0x4d4>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a1a      	lsrs	r2, r3, #8
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00da      	lsls	r2, r3, #3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002422:	b662      	cpsie	i
}
 8002424:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0a6      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d1d9      	bne.n	80023f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002482:	b662      	cpsie	i
}
 8002484:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b8:	e04e      	b.n	8002558 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fb62 	bl	8002b88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e058      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d124      	bne.n	8002558 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002512:	2b03      	cmp	r3, #3
 8002514:	d107      	bne.n	8002526 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002524:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	2b00      	cmp	r3, #0
 800255e:	f47f ae88 	bne.w	8002272 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800257a:	2300      	movs	r3, #0
 800257c:	e000      	b.n	8002580 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800257e:	2302      	movs	r3, #2
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	3728      	adds	r7, #40	; 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	00010004 	.word	0x00010004
 800258c:	20000000 	.word	0x20000000
 8002590:	14f8b589 	.word	0x14f8b589

08002594 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	460b      	mov	r3, r1
 80025a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d006      	beq.n	80025be <I2C_MasterRequestWrite+0x2a>
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d003      	beq.n	80025be <I2C_MasterRequestWrite+0x2a>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025bc:	d108      	bne.n	80025d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e00b      	b.n	80025e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	2b12      	cmp	r3, #18
 80025d6:	d107      	bne.n	80025e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f91d 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d103      	bne.n	8002618 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e035      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002624:	d108      	bne.n	8002638 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	461a      	mov	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002634:	611a      	str	r2, [r3, #16]
 8002636:	e01b      	b.n	8002670 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	11db      	asrs	r3, r3, #7
 800263c:	b2db      	uxtb	r3, r3
 800263e:	f003 0306 	and.w	r3, r3, #6
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f063 030f 	orn	r3, r3, #15
 8002648:	b2da      	uxtb	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <I2C_MasterRequestWrite+0xfc>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f966 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e010      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	4907      	ldr	r1, [pc, #28]	; (8002694 <I2C_MasterRequestWrite+0x100>)
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f956 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	00010008 	.word	0x00010008
 8002694:	00010002 	.word	0x00010002

08002698 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af02      	add	r7, sp, #8
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	460b      	mov	r3, r1
 80026a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d006      	beq.n	80026d2 <I2C_MasterRequestRead+0x3a>
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d003      	beq.n	80026d2 <I2C_MasterRequestRead+0x3a>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026d0:	d108      	bne.n	80026e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e00b      	b.n	80026fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e8:	2b11      	cmp	r3, #17
 80026ea:	d107      	bne.n	80026fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 f893 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002722:	d103      	bne.n	800272c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e079      	b.n	8002824 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002738:	d108      	bne.n	800274c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800273a:	897b      	ldrh	r3, [r7, #10]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	b2da      	uxtb	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	611a      	str	r2, [r3, #16]
 800274a:	e05f      	b.n	800280c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800274c:	897b      	ldrh	r3, [r7, #10]
 800274e:	11db      	asrs	r3, r3, #7
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f003 0306 	and.w	r3, r3, #6
 8002756:	b2db      	uxtb	r3, r3
 8002758:	f063 030f 	orn	r3, r3, #15
 800275c:	b2da      	uxtb	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	4930      	ldr	r1, [pc, #192]	; (800282c <I2C_MasterRequestRead+0x194>)
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f8dc 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e054      	b.n	8002824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800277a:	897b      	ldrh	r3, [r7, #10]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4929      	ldr	r1, [pc, #164]	; (8002830 <I2C_MasterRequestRead+0x198>)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f8cc 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e044      	b.n	8002824 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f831 	bl	8002834 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e017      	b.n	8002824 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027f4:	897b      	ldrh	r3, [r7, #10]
 80027f6:	11db      	asrs	r3, r3, #7
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f003 0306 	and.w	r3, r3, #6
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f063 030e 	orn	r3, r3, #14
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4907      	ldr	r1, [pc, #28]	; (8002830 <I2C_MasterRequestRead+0x198>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f888 	bl	8002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	00010008 	.word	0x00010008
 8002830:	00010002 	.word	0x00010002

08002834 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002844:	e048      	b.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284c:	d044      	beq.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800284e:	f7fe fe05 	bl	800145c <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d302      	bcc.n	8002864 <I2C_WaitOnFlagUntilTimeout+0x30>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d139      	bne.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b01      	cmp	r3, #1
 800286c:	d10d      	bne.n	800288a <I2C_WaitOnFlagUntilTimeout+0x56>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	43da      	mvns	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	4013      	ands	r3, r2
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	e00c      	b.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	43da      	mvns	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	4013      	ands	r3, r2
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	bf0c      	ite	eq
 800289c:	2301      	moveq	r3, #1
 800289e:	2300      	movne	r3, #0
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d116      	bne.n	80028d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	f043 0220 	orr.w	r2, r3, #32
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e023      	b.n	8002920 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	0c1b      	lsrs	r3, r3, #16
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d10d      	bne.n	80028fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	43da      	mvns	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	4013      	ands	r3, r2
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	bf0c      	ite	eq
 80028f4:	2301      	moveq	r3, #1
 80028f6:	2300      	movne	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	e00c      	b.n	8002918 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	43da      	mvns	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	4013      	ands	r3, r2
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	429a      	cmp	r2, r3
 800291c:	d093      	beq.n	8002846 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002936:	e071      	b.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002946:	d123      	bne.n	8002990 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002960:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e067      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d041      	beq.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002998:	f7fe fd60 	bl	800145c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d302      	bcc.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d136      	bne.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e00b      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d016      	beq.n	8002a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0220 	orr.w	r2, r3, #32
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e021      	b.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d10c      	bne.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	43da      	mvns	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	4013      	ands	r3, r2
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e00b      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f47f af6d 	bne.w	8002938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3710      	adds	r7, #16
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a74:	e034      	b.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f8e3 	bl	8002c42 <I2C_IsAcknowledgeFailed>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e034      	b.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d028      	beq.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fce5 	bl	800145c <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d11d      	bne.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aae:	2b80      	cmp	r3, #128	; 0x80
 8002ab0:	d016      	beq.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f043 0220 	orr.w	r2, r3, #32
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aea:	2b80      	cmp	r3, #128	; 0x80
 8002aec:	d1c3      	bne.n	8002a76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b04:	e034      	b.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f89b 	bl	8002c42 <I2C_IsAcknowledgeFailed>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e034      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d028      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1e:	f7fe fc9d 	bl	800145c <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d302      	bcc.n	8002b34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d016      	beq.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e007      	b.n	8002b80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d1c3      	bne.n	8002b06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b94:	e049      	b.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b10      	cmp	r3, #16
 8002ba2:	d119      	bne.n	8002bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0210 	mvn.w	r2, #16
 8002bac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e030      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd8:	f7fe fc40 	bl	800145c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d11d      	bne.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d016      	beq.n	8002c2a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e007      	b.n	8002c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d1ae      	bne.n	8002b96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d11b      	bne.n	8002c92 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c62:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e272      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8087 	beq.w	8002dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b92      	ldr	r3, [pc, #584]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d00c      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ccc:	4b8f      	ldr	r3, [pc, #572]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d112      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce4:	d10b      	bne.n	8002cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce6:	4b89      	ldr	r3, [pc, #548]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d06c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x12c>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d168      	bne.n	8002dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e24c      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d06:	d106      	bne.n	8002d16 <HAL_RCC_OscConfig+0x76>
 8002d08:	4b80      	ldr	r3, [pc, #512]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a7f      	ldr	r2, [pc, #508]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e02e      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x98>
 8002d1e:	4b7b      	ldr	r3, [pc, #492]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a7a      	ldr	r2, [pc, #488]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	4b78      	ldr	r3, [pc, #480]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a77      	ldr	r2, [pc, #476]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	e01d      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCC_OscConfig+0xbc>
 8002d42:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a71      	ldr	r2, [pc, #452]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a6e      	ldr	r2, [pc, #440]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e00b      	b.n	8002d74 <HAL_RCC_OscConfig+0xd4>
 8002d5c:	4b6b      	ldr	r3, [pc, #428]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a6a      	ldr	r2, [pc, #424]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
 8002d68:	4b68      	ldr	r3, [pc, #416]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a67      	ldr	r2, [pc, #412]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fb6e 	bl	800145c <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fb6a 	bl	800145c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e200      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d96:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0f0      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe4>
 8002da2:	e014      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da4:	f7fe fb5a 	bl	800145c <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dac:	f7fe fb56 	bl	800145c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b64      	cmp	r3, #100	; 0x64
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e1ec      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dbe:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x10c>
 8002dca:	e000      	b.n	8002dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d063      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b4c      	ldr	r3, [pc, #304]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002de6:	4b49      	ldr	r3, [pc, #292]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 030c 	and.w	r3, r3, #12
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d11c      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
 8002df2:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d116      	bne.n	8002e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfe:	4b43      	ldr	r3, [pc, #268]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d005      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e1c0      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	4939      	ldr	r1, [pc, #228]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	e03a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d020      	beq.n	8002e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e34:	4b36      	ldr	r3, [pc, #216]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fb0f 	bl	800145c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fb0b 	bl	800145c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1a1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e54:	4b2d      	ldr	r3, [pc, #180]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b2a      	ldr	r3, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	4927      	ldr	r1, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	600b      	str	r3, [r1, #0]
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <HAL_RCC_OscConfig+0x270>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7c:	f7fe faee 	bl	800145c <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e84:	f7fe faea 	bl	800145c <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e180      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1f0      	bne.n	8002e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d03a      	beq.n	8002f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d019      	beq.n	8002eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebc:	f7fe face 	bl	800145c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec4:	f7fe faca 	bl	800145c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e160      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0f0      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f000 face 	bl	8003484 <RCC_Delay>
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_RCC_OscConfig+0x274>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fab4 	bl	800145c <HAL_GetTick>
 8002ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef6:	e00f      	b.n	8002f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef8:	f7fe fab0 	bl	800145c <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d908      	bls.n	8002f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e146      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	42420000 	.word	0x42420000
 8002f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f18:	4b92      	ldr	r3, [pc, #584]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e9      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80a6 	beq.w	800307e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f36:	4b8b      	ldr	r3, [pc, #556]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10d      	bne.n	8002f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b88      	ldr	r3, [pc, #544]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4a87      	ldr	r2, [pc, #540]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	61d3      	str	r3, [r2, #28]
 8002f4e:	4b85      	ldr	r3, [pc, #532]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f6a:	4b7f      	ldr	r3, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7e      	ldr	r2, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fa71 	bl	800145c <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7fe fa6d 	bl	800145c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b64      	cmp	r3, #100	; 0x64
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e103      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f90:	4b75      	ldr	r3, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x4c8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x312>
 8002fa4:	4b6f      	ldr	r3, [pc, #444]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4a6e      	ldr	r2, [pc, #440]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6213      	str	r3, [r2, #32]
 8002fb0:	e02d      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10c      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x334>
 8002fba:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	6a1b      	ldr	r3, [r3, #32]
 8002fbe:	4a69      	ldr	r2, [pc, #420]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f023 0301 	bic.w	r3, r3, #1
 8002fc4:	6213      	str	r3, [r2, #32]
 8002fc6:	4b67      	ldr	r3, [pc, #412]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a66      	ldr	r2, [pc, #408]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	e01c      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d10c      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x356>
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	4a60      	ldr	r2, [pc, #384]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	f043 0304 	orr.w	r3, r3, #4
 8002fe6:	6213      	str	r3, [r2, #32]
 8002fe8:	4b5e      	ldr	r3, [pc, #376]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6213      	str	r3, [r2, #32]
 8002ff4:	e00b      	b.n	800300e <HAL_RCC_OscConfig+0x36e>
 8002ff6:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4a5a      	ldr	r2, [pc, #360]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	6213      	str	r3, [r2, #32]
 8003002:	4b58      	ldr	r3, [pc, #352]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	4a57      	ldr	r2, [pc, #348]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	f023 0304 	bic.w	r3, r3, #4
 800300c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d015      	beq.n	8003042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003016:	f7fe fa21 	bl	800145c <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe fa1d 	bl	800145c <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e0b1      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ee      	beq.n	800301e <HAL_RCC_OscConfig+0x37e>
 8003040:	e014      	b.n	800306c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003042:	f7fe fa0b 	bl	800145c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304a:	f7fe fa07 	bl	800145c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e09b      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003060:	4b40      	ldr	r3, [pc, #256]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ee      	bne.n	800304a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	4a3b      	ldr	r2, [pc, #236]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8087 	beq.w	8003196 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003088:	4b36      	ldr	r3, [pc, #216]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b08      	cmp	r3, #8
 8003092:	d061      	beq.n	8003158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	69db      	ldr	r3, [r3, #28]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d146      	bne.n	800312a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800309c:	4b33      	ldr	r3, [pc, #204]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe f9db 	bl	800145c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe f9d7 	bl	800145c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e06d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f0      	bne.n	80030aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d0:	d108      	bne.n	80030e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030d2:	4b24      	ldr	r3, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	4921      	ldr	r1, [pc, #132]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e4:	4b1f      	ldr	r3, [pc, #124]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a19      	ldr	r1, [r3, #32]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	430b      	orrs	r3, r1
 80030f6:	491b      	ldr	r1, [pc, #108]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030fc:	4b1b      	ldr	r3, [pc, #108]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003102:	f7fe f9ab 	bl	800145c <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe f9a7 	bl	800145c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e03d      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800311c:	4b11      	ldr	r3, [pc, #68]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x46a>
 8003128:	e035      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <HAL_RCC_OscConfig+0x4cc>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe f994 	bl	800145c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003138:	f7fe f990 	bl	800145c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e026      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0x498>
 8003156:	e01e      	b.n	8003196 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e019      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
 8003164:	40021000 	.word	0x40021000
 8003168:	40007000 	.word	0x40007000
 800316c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_OscConfig+0x500>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	429a      	cmp	r2, r3
 8003182:	d106      	bne.n	8003192 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000

080031a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0d0      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b8:	4b6a      	ldr	r3, [pc, #424]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d910      	bls.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c6:	4b67      	ldr	r3, [pc, #412]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f023 0207 	bic.w	r2, r3, #7
 80031ce:	4965      	ldr	r1, [pc, #404]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	4b63      	ldr	r3, [pc, #396]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e0b8      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d020      	beq.n	8003236 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003200:	4b59      	ldr	r3, [pc, #356]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003206:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800320a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0308 	and.w	r3, r3, #8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d005      	beq.n	8003224 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003218:	4b53      	ldr	r3, [pc, #332]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a52      	ldr	r2, [pc, #328]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003222:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003224:	4b50      	ldr	r3, [pc, #320]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	494d      	ldr	r1, [pc, #308]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	4313      	orrs	r3, r2
 8003234:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d040      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324a:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d115      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e07f      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d107      	bne.n	8003272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003262:	4b41      	ldr	r3, [pc, #260]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e073      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003272:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e06b      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003282:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f023 0203 	bic.w	r2, r3, #3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4936      	ldr	r1, [pc, #216]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	4313      	orrs	r3, r2
 8003292:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003294:	f7fe f8e2 	bl	800145c <HAL_GetTick>
 8003298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe f8de 	bl	800145c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e053      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032b2:	4b2d      	ldr	r3, [pc, #180]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	f003 020c 	and.w	r2, r3, #12
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d1eb      	bne.n	800329c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032c4:	4b27      	ldr	r3, [pc, #156]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d210      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 0207 	bic.w	r2, r3, #7
 80032da:	4922      	ldr	r1, [pc, #136]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b20      	ldr	r3, [pc, #128]	; (8003364 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e032      	b.n	800335a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4916      	ldr	r1, [pc, #88]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	4313      	orrs	r3, r2
 8003310:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800331e:	4b12      	ldr	r3, [pc, #72]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800332e:	4313      	orrs	r3, r2
 8003330:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003332:	f000 f821 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003336:	4602      	mov	r2, r0
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_RCC_ClockConfig+0x1c4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	490a      	ldr	r1, [pc, #40]	; (800336c <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	5ccb      	ldrb	r3, [r1, r3]
 8003346:	fa22 f303 	lsr.w	r3, r2, r3
 800334a:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1cc>)
 800334c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800334e:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1d0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7fe f840 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	0800bc44 	.word	0x0800bc44
 8003370:	20000000 	.word	0x20000000
 8003374:	20000004 	.word	0x20000004

08003378 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003392:	4b1e      	ldr	r3, [pc, #120]	; (800340c <HAL_RCC_GetSysClockFreq+0x94>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f003 030c 	and.w	r3, r3, #12
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d002      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x30>
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d003      	beq.n	80033ae <HAL_RCC_GetSysClockFreq+0x36>
 80033a6:	e027      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033aa:	613b      	str	r3, [r7, #16]
      break;
 80033ac:	e027      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	0c9b      	lsrs	r3, r3, #18
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_RCC_GetSysClockFreq+0x9c>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_RCC_GetSysClockFreq+0x94>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	0c5b      	lsrs	r3, r3, #17
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	4a11      	ldr	r2, [pc, #68]	; (8003418 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033da:	fb03 f202 	mul.w	r2, r3, r2
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	e004      	b.n	80033f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0c      	ldr	r2, [pc, #48]	; (800341c <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ec:	fb02 f303 	mul.w	r3, r2, r3
 80033f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	613b      	str	r3, [r7, #16]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <HAL_RCC_GetSysClockFreq+0x98>)
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fe:	693b      	ldr	r3, [r7, #16]
}
 8003400:	4618      	mov	r0, r3
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	bc80      	pop	{r7}
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	007a1200 	.word	0x007a1200
 8003414:	0800bc5c 	.word	0x0800bc5c
 8003418:	0800bc6c 	.word	0x0800bc6c
 800341c:	003d0900 	.word	0x003d0900

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b02      	ldr	r3, [pc, #8]	; (8003430 <HAL_RCC_GetHCLKFreq+0x10>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	20000000 	.word	0x20000000

08003434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003438:	f7ff fff2 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	4903      	ldr	r1, [pc, #12]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800344a:	5ccb      	ldrb	r3, [r1, r3]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003450:	4618      	mov	r0, r3
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40021000 	.word	0x40021000
 8003458:	0800bc54 	.word	0x0800bc54

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffde 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003464:	4602      	mov	r2, r0
 8003466:	4b05      	ldr	r3, [pc, #20]	; (800347c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	0adb      	lsrs	r3, r3, #11
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	4903      	ldr	r1, [pc, #12]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003472:	5ccb      	ldrb	r3, [r1, r3]
 8003474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003478:	4618      	mov	r0, r3
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000
 8003480:	0800bc54 	.word	0x0800bc54

08003484 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <RCC_Delay+0x34>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <RCC_Delay+0x38>)
 8003492:	fba2 2303 	umull	r2, r3, r2, r3
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	fb02 f303 	mul.w	r3, r2, r3
 800349e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034a0:	bf00      	nop
  }
  while (Delay --);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	60fa      	str	r2, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1f9      	bne.n	80034a0 <RCC_Delay+0x1c>
}
 80034ac:	bf00      	nop
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20000000 	.word	0x20000000
 80034bc:	10624dd3 	.word	0x10624dd3

080034c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e042      	b.n	8003558 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fe00 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	; 0x24
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003502:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f91d 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003518:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003528:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68da      	ldr	r2, [r3, #12]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003538:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	d16d      	bne.n	800365c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Transmit+0x2c>
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e066      	b.n	800365e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359e:	f7fd ff5d 	bl	800145c <HAL_GetTick>
 80035a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x6c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d4:	e02a      	b.n	800362c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f000 f840 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e036      	b.n	800365e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10b      	bne.n	800360e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003604:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	3302      	adds	r3, #2
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	e007      	b.n	800361e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	781a      	ldrb	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3301      	adds	r3, #1
 800361c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1cf      	bne.n	80035d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	9300      	str	r3, [sp, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2200      	movs	r2, #0
 800363e:	2140      	movs	r1, #64	; 0x40
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f810 	bl	8003666 <UART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e006      	b.n	800365e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3720      	adds	r7, #32
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b090      	sub	sp, #64	; 0x40
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003676:	e050      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367e:	d04c      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003680:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003682:	2b00      	cmp	r3, #0
 8003684:	d007      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0x30>
 8003686:	f7fd fee9 	bl	800145c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003692:	429a      	cmp	r2, r3
 8003694:	d241      	bcs.n	800371a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	330c      	adds	r3, #12
 800369c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	330c      	adds	r3, #12
 80036b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b6:	637a      	str	r2, [r7, #52]	; 0x34
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036be:	e841 2300 	strex	r3, r2, [r1]
 80036c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1e5      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3314      	adds	r3, #20
 80036d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	613b      	str	r3, [r7, #16]
   return(result);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036ea:	623a      	str	r2, [r7, #32]
 80036ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ee:	69f9      	ldr	r1, [r7, #28]
 80036f0:	6a3a      	ldr	r2, [r7, #32]
 80036f2:	e841 2300 	strex	r3, r2, [r1]
 80036f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1e5      	bne.n	80036ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	429a      	cmp	r2, r3
 8003728:	bf0c      	ite	eq
 800372a:	2301      	moveq	r3, #1
 800372c:	2300      	movne	r3, #0
 800372e:	b2db      	uxtb	r3, r3
 8003730:	461a      	mov	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	429a      	cmp	r2, r3
 8003736:	d09f      	beq.n	8003678 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3740      	adds	r7, #64	; 0x40
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800377e:	f023 030c 	bic.w	r3, r3, #12
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	430b      	orrs	r3, r1
 800378a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <UART_SetConfig+0x114>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d103      	bne.n	80037b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037ac:	f7ff fe56 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	e002      	b.n	80037ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7ff fe3e 	bl	8003434 <HAL_RCC_GetPCLK1Freq>
 80037b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	009a      	lsls	r2, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d0:	4a22      	ldr	r2, [pc, #136]	; (800385c <UART_SetConfig+0x118>)
 80037d2:	fba2 2303 	umull	r2, r3, r2, r3
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	0119      	lsls	r1, r3, #4
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	009a      	lsls	r2, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <UART_SetConfig+0x118>)
 80037f2:	fba3 0302 	umull	r0, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2064      	movs	r0, #100	; 0x64
 80037fa:	fb00 f303 	mul.w	r3, r0, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <UART_SetConfig+0x118>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003810:	4419      	add	r1, r3
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009a      	lsls	r2, r3, #2
 800381c:	441a      	add	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	fbb2 f2f3 	udiv	r2, r2, r3
 8003828:	4b0c      	ldr	r3, [pc, #48]	; (800385c <UART_SetConfig+0x118>)
 800382a:	fba3 0302 	umull	r0, r3, r3, r2
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	2064      	movs	r0, #100	; 0x64
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	3332      	adds	r3, #50	; 0x32
 800383c:	4a07      	ldr	r2, [pc, #28]	; (800385c <UART_SetConfig+0x118>)
 800383e:	fba2 2303 	umull	r2, r3, r2, r3
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	440a      	add	r2, r1
 800384e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003850:	bf00      	nop
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40013800 	.word	0x40013800
 800385c:	51eb851f 	.word	0x51eb851f

08003860 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800386c:	2300      	movs	r3, #0
 800386e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800387a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	b2db      	uxtb	r3, r3
 8003882:	461a      	mov	r2, r3
 8003884:	2101      	movs	r1, #1
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f005 f9b4 	bl	8008bf4 <VL53L1_WrByte>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	b2db      	uxtb	r3, r3
 8003896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80038a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80038b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80038c0:	2101      	movs	r1, #1
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f001 f856 	bl	8004974 <VL53L1_data_init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80038cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80038dc:	2300      	movs	r3, #0
 80038de:	73bb      	strb	r3, [r7, #14]
 80038e0:	e012      	b.n	8003908 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d112      	bne.n	8003910 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2201      	movs	r2, #1
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 fbcd 	bl	8004092 <VL53L1_SetLimitCheckEnable>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	4313      	orrs	r3, r2
 8003900:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	3301      	adds	r3, #1
 8003906:	73bb      	strb	r3, [r7, #14]
 8003908:	7bbb      	ldrb	r3, [r7, #14]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d9e9      	bls.n	80038e2 <VL53L1_DataInit+0x36>
 800390e:	e000      	b.n	8003912 <VL53L1_DataInit+0x66>
		else
			break;
 8003910:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003932:	2320      	movs	r3, #32
 8003934:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7bba      	ldrb	r2, [r7, #14]
 800393a:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 800393c:	2108      	movs	r1, #8
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f8f5 	bl	8003b2e <VL53L1_SetPresetMode>
 8003944:	4603      	mov	r3, r0
 8003946:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2208      	movs	r2, #8
 800394c:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8003950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8003968:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f005 f83b 	bl	80089e8 <VL53L1_poll_for_boot_completion>
 8003972:	4603      	mov	r3, r0
 8003974:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8003976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	603a      	str	r2, [r7, #0]
 800398e:	71fb      	strb	r3, [r7, #7]
 8003990:	460b      	mov	r3, r1
 8003992:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003994:	2300      	movs	r3, #0
 8003996:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8003998:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <ComputeDevicePresetMode+0xc0>)
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	4611      	mov	r1, r2
 80039a2:	8019      	strh	r1, [r3, #0]
 80039a4:	3302      	adds	r3, #2
 80039a6:	0c12      	lsrs	r2, r2, #16
 80039a8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80039aa:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <ComputeDevicePresetMode+0xc4>)
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	6812      	ldr	r2, [r2, #0]
 80039b2:	4611      	mov	r1, r2
 80039b4:	8019      	strh	r1, [r3, #0]
 80039b6:	3302      	adds	r3, #2
 80039b8:	0c12      	lsrs	r2, r2, #16
 80039ba:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80039bc:	4a23      	ldr	r2, [pc, #140]	; (8003a4c <ComputeDevicePresetMode+0xc8>)
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	4611      	mov	r1, r2
 80039c6:	8019      	strh	r1, [r3, #0]
 80039c8:	3302      	adds	r3, #2
 80039ca:	0c12      	lsrs	r2, r2, #16
 80039cc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80039d4:	79bb      	ldrb	r3, [r7, #6]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d002      	beq.n	80039e0 <ComputeDevicePresetMode+0x5c>
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d003      	beq.n	80039e6 <ComputeDevicePresetMode+0x62>
 80039de:	e005      	b.n	80039ec <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	75bb      	strb	r3, [r7, #22]
		break;
 80039e4:	e004      	b.n	80039f0 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	75bb      	strb	r3, [r7, #22]
		break;
 80039ea:	e001      	b.n	80039f0 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80039ec:	2302      	movs	r3, #2
 80039ee:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d015      	beq.n	8003a22 <ComputeDevicePresetMode+0x9e>
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	dc1b      	bgt.n	8003a32 <ComputeDevicePresetMode+0xae>
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d009      	beq.n	8003a12 <ComputeDevicePresetMode+0x8e>
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d117      	bne.n	8003a32 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8003a02:	7dbb      	ldrb	r3, [r7, #22]
 8003a04:	3318      	adds	r3, #24
 8003a06:	443b      	add	r3, r7
 8003a08:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	701a      	strb	r2, [r3, #0]
		break;
 8003a10:	e011      	b.n	8003a36 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8003a12:	7dbb      	ldrb	r3, [r7, #22]
 8003a14:	3318      	adds	r3, #24
 8003a16:	443b      	add	r3, r7
 8003a18:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	701a      	strb	r2, [r3, #0]
		break;
 8003a20:	e009      	b.n	8003a36 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8003a22:	7dbb      	ldrb	r3, [r7, #22]
 8003a24:	3318      	adds	r3, #24
 8003a26:	443b      	add	r3, r7
 8003a28:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	701a      	strb	r2, [r3, #0]
		break;
 8003a30:	e001      	b.n	8003a36 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003a32:	23f8      	movs	r3, #248	; 0xf8
 8003a34:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8003a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	0800bc34 	.word	0x0800bc34
 8003a48:	0800bc38 	.word	0x0800bc38
 8003a4c:	0800bc3c 	.word	0x0800bc3c

08003a50 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8003a50:	b5b0      	push	{r4, r5, r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607b      	str	r3, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	72fb      	strb	r3, [r7, #11]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003a78:	7afb      	ldrb	r3, [r7, #11]
 8003a7a:	2b03      	cmp	r3, #3
 8003a7c:	d002      	beq.n	8003a84 <SetPresetMode+0x34>
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d103      	bne.n	8003a8c <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8003a84:	2340      	movs	r3, #64	; 0x40
 8003a86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003a8a:	e002      	b.n	8003a92 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8003a8c:	2320      	movs	r3, #32
 8003a8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8003a92:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8003a96:	7ab9      	ldrb	r1, [r7, #10]
 8003a98:	7afb      	ldrb	r3, [r7, #11]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7ff ff72 	bl	8003984 <ComputeDevicePresetMode>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003aa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d112      	bne.n	8003ad4 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8003aae:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003ab2:	f107 001c 	add.w	r0, r7, #28
 8003ab6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	9301      	str	r3, [sp, #4]
 8003ac0:	f107 0318 	add.w	r3, r7, #24
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f001 fa0f 	bl	8004eec <VL53L1_get_preset_mode_timing_cfg>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8003ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d112      	bne.n	8003b02 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8003adc:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003ae0:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8003ae2:	69fd      	ldr	r5, [r7, #28]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	9102      	str	r1, [sp, #8]
 8003aec:	9201      	str	r2, [sp, #4]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	462b      	mov	r3, r5
 8003af2:	4622      	mov	r2, r4
 8003af4:	4601      	mov	r1, r0
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f001 faa2 	bl	8005040 <VL53L1_set_preset_mode>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003b10:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8003b12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	7afa      	ldrb	r2, [r7, #11]
 8003b1e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8003b22:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3728      	adds	r7, #40	; 0x28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bdb0      	pop	{r4, r5, r7, pc}

08003b2e <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b084      	sub	sp, #16
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f003 fd92 	bl	800766c <VL53L1_low_power_auto_data_init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8003b4c:	7bba      	ldrb	r2, [r7, #14]
 8003b4e:	78f9      	ldrb	r1, [r7, #3]
 8003b50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff7b 	bl	8003a50 <SetPresetMode>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8003b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d117      	bne.n	8003b96 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8003b66:	78fb      	ldrb	r3, [r7, #3]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d005      	beq.n	8003b78 <VL53L1_SetPresetMode+0x4a>
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d002      	beq.n	8003b78 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d107      	bne.n	8003b88 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b78:	f24a 0128 	movw	r1, #41000	; 0xa028
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f891 	bl	8003ca4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b82:	4603      	mov	r3, r0
 8003b84:	73fb      	strb	r3, [r7, #15]
 8003b86:	e006      	b.n	8003b96 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8003b88:	f248 2135 	movw	r1, #33333	; 0x8235
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f889 	bl	8003ca4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8003b92:	4603      	mov	r3, r0
 8003b94:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8003b9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fa08 	bl	8003fb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003bda:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d008      	beq.n	8003bf4 <VL53L1_SetDistanceMode+0x3c>
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d005      	beq.n	8003bf4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d002      	beq.n	8003bf4 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8003bee:	f06f 0303 	mvn.w	r3, #3
 8003bf2:	e052      	b.n	8003c9a <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8003bf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8003bfc:	f107 0308 	add.w	r3, r7, #8
 8003c00:	4619      	mov	r1, r3
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f001 f91c 	bl	8004e40 <VL53L1_get_user_zone>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8003c12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8003c1a:	f107 0314 	add.w	r3, r7, #20
 8003c1e:	f107 0210 	add.w	r2, r7, #16
 8003c22:	f107 010c 	add.w	r1, r7, #12
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f001 f846 	bl	8004cb8 <VL53L1_get_timeouts_us>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8003c30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	7fb9      	ldrb	r1, [r7, #30]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff ff06 	bl	8003a50 <SetPresetMode>
 8003c44:	4603      	mov	r3, r0
 8003c46:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8003c48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d103      	bne.n	8003c58 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	78fa      	ldrb	r2, [r7, #3]
 8003c54:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003c58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ffee 	bl	8004c48 <VL53L1_set_timeouts_us>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8003c70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d102      	bne.n	8003c7e <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003c7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8003c86:	f107 0308 	add.w	r3, r7, #8
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f001 f8b4 	bl	8004dfa <VL53L1_set_user_zone>
 8003c92:	4603      	mov	r3, r0
 8003c94:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8003c96:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3720      	adds	r7, #32
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8003cc8:	4b64      	ldr	r3, [pc, #400]	; (8003e5c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 8003cca:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d902      	bls.n	8003cda <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8003cd4:	23fc      	movs	r3, #252	; 0xfc
 8003cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8003cda:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003ce2:	f107 031a 	add.w	r3, r7, #26
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2105      	movs	r1, #5
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa8a 	bl	8004204 <VL53L1_GetSequenceStepEnable>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8003cf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d109      	bne.n	8003d12 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003cfe:	f107 0319 	add.w	r3, r7, #25
 8003d02:	461a      	mov	r2, r3
 8003d04:	2106      	movs	r1, #6
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fa7c 	bl	8004204 <VL53L1_GetSequenceStepEnable>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8003d12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8003d1a:	f107 0314 	add.w	r3, r7, #20
 8003d1e:	f107 0210 	add.w	r2, r7, #16
 8003d22:	f107 010c 	add.w	r1, r7, #12
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 ffc6 	bl	8004cb8 <VL53L1_get_timeouts_us>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8003d32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 8081 	bne.w	8003e3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003d42:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8003d4c:	7efb      	ldrb	r3, [r7, #27]
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d026      	beq.n	8003da0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	dc43      	bgt.n	8003dde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8003d56:	2b03      	cmp	r3, #3
 8003d58:	d00f      	beq.n	8003d7a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d13f      	bne.n	8003dde <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d5e:	7ebb      	ldrb	r3, [r7, #26]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d002      	beq.n	8003d6a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8003d64:	7e7b      	ldrb	r3, [r7, #25]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d103      	bne.n	8003d72 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8003d6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d6e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8003d70:	e038      	b.n	8003de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8003d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d76:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003d78:	e034      	b.n	8003de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003d80:	7ebb      	ldrb	r3, [r7, #26]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d002      	beq.n	8003d8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8003d86:	7e7b      	ldrb	r3, [r7, #25]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d103      	bne.n	8003d94 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8003d8c:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	e002      	b.n	8003d9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8003d94:	f245 4360 	movw	r3, #21600	; 0x5460
 8003d98:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003d9e:	e021      	b.n	8003de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003da6:	23f5      	movs	r3, #245	; 0xf5
 8003da8:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8003daa:	f107 0308 	add.w	r3, r7, #8
 8003dae:	461a      	mov	r2, r3
 8003db0:	f248 0136 	movw	r1, #32822	; 0x8036
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 ffef 	bl	8005d98 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	dd07      	ble.n	8003dd0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	22f5      	movs	r2, #245	; 0xf5
 8003dc4:	fb02 f303 	mul.w	r3, r2, r3
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	4413      	add	r3, r2
 8003dce:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8003ddc:	e002      	b.n	8003de4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003dde:	23f8      	movs	r3, #248	; 0xf8
 8003de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d803      	bhi.n	8003df4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8003dec:	23fc      	movs	r3, #252	; 0xfc
 8003dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003df2:	e003      	b.n	8003dfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8003dfa:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8003dfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11c      	bne.n	8003e3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d203      	bcs.n	8003e14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8003e0c:	23fc      	movs	r3, #252	; 0xfc
 8003e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003e12:	e00d      	b.n	8003e30 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 ff0f 	bl	8004c48 <VL53L1_set_timeouts_us>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8003e30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8003e3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003e4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3730      	adds	r7, #48	; 0x30
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	00086470 	.word	0x00086470
 8003e60:	00989680 	.word	0x00989680

08003e64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b08c      	sub	sp, #48	; 0x30
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8003e92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003e9a:	f107 031b 	add.w	r3, r7, #27
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2105      	movs	r1, #5
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f9ae 	bl	8004204 <VL53L1_GetSequenceStepEnable>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003eae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8003eb6:	f107 031a 	add.w	r3, r7, #26
 8003eba:	461a      	mov	r2, r3
 8003ebc:	2106      	movs	r1, #6
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a0 	bl	8004204 <VL53L1_GetSequenceStepEnable>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8003eca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10b      	bne.n	8003eea <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8003ed2:	f107 0310 	add.w	r3, r7, #16
 8003ed6:	f107 0214 	add.w	r2, r7, #20
 8003eda:	f107 010c 	add.w	r1, r7, #12
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 feea 	bl	8004cb8 <VL53L1_get_timeouts_us>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8003eea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d155      	bne.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
		PresetMode = VL53L1DevDataGet(Dev,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8003ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8003efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d02a      	beq.n	8003f5a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	dc47      	bgt.n	8003f98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d012      	beq.n	8003f32 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d143      	bne.n	8003f98 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003f10:	7efb      	ldrb	r3, [r7, #27]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d002      	beq.n	8003f1c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8003f16:	7ebb      	ldrb	r3, [r7, #26]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d105      	bne.n	8003f28 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f22:	3308      	adds	r3, #8
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8003f26:	e03a      	b.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f30:	e035      	b.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8003f32:	7efb      	ldrb	r3, [r7, #27]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d002      	beq.n	8003f3e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8003f38:	7ebb      	ldrb	r3, [r7, #26]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d106      	bne.n	8003f4c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8003f44:	3334      	adds	r3, #52	; 0x34
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8003f4a:	e028      	b.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8003f52:	3330      	adds	r3, #48	; 0x30
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f58:	e021      	b.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8003f5a:	23f5      	movs	r3, #245	; 0xf5
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8003f5e:	f107 0308 	add.w	r3, r7, #8
 8003f62:	461a      	mov	r2, r3
 8003f64:	f248 0136 	movw	r1, #32822	; 0x8036
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f001 ff15 	bl	8005d98 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	dd07      	ble.n	8003f84 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	22f5      	movs	r2, #245	; 0xf5
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f80:	4413      	add	r3, r2
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8003f8a:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	4413      	add	r3, r2
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8003f96:	e002      	b.n	8003f9e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13a>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8003f98:	23f8      	movs	r3, #248	; 0xf8
 8003f9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8003f9e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x148>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003faa:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8003fac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3730      	adds	r7, #48	; 0x30
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	019b      	lsls	r3, r3, #6
 8003fce:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	099b      	lsrs	r3, r3, #6
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	4413      	add	r3, r2
 8003fda:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 fde5 	bl	8004bae <VL53L1_set_inter_measurement_period_ms>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8003fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	10624dd3 	.word	0x10624dd3

08003ff8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	4619      	mov	r1, r3
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fdf6 	bl	8004bfe <VL53L1_get_inter_measurement_period_ms>
 8004012:	4603      	mov	r3, r0
 8004014:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	019b      	lsls	r3, r3, #6
 800401c:	4907      	ldr	r1, [pc, #28]	; (800403c <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800401e:	fba1 1303 	umull	r1, r3, r1, r3
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800402e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	10624dd3 	.word	0x10624dd3

08004040 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	460b      	mov	r3, r1
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004052:	897b      	ldrh	r3, [r7, #10]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <SetLimitValue+0x1e>
 8004058:	2b01      	cmp	r3, #1
 800405a:	d009      	beq.n	8004070 <SetLimitValue+0x30>
 800405c:	e011      	b.n	8004082 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	0b9b      	lsrs	r3, r3, #14
 8004062:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8004064:	8abb      	ldrh	r3, [r7, #20]
 8004066:	4619      	mov	r1, r3
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f001 f974 	bl	8005356 <VL53L1_set_lite_sigma_threshold>
		break;
 800406e:	e00a      	b.n	8004086 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	0a5b      	lsrs	r3, r3, #9
 8004074:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8004076:	8abb      	ldrh	r3, [r7, #20]
 8004078:	4619      	mov	r1, r3
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f001 f995 	bl	80053aa <VL53L1_set_lite_min_count_rate>
		break;
 8004080:	e001      	b.n	8004086 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004082:	23fc      	movs	r3, #252	; 0xfc
 8004084:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3718      	adds	r7, #24
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
 800409e:	4613      	mov	r3, r2
 80040a0:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d902      	bls.n	80040b6 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80040b0:	23fc      	movs	r3, #252	; 0xfc
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e014      	b.n	80040e0 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80040b6:	787b      	ldrb	r3, [r7, #1]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	e006      	b.n	80040d0 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040c2:	887b      	ldrh	r3, [r7, #2]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	33e0      	adds	r3, #224	; 0xe0
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80040d0:	887b      	ldrh	r3, [r7, #2]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffb2 	bl	8004040 <SetLimitValue>
 80040dc:	4603      	mov	r3, r0
 80040de:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80040e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10c      	bne.n	8004102 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	bf14      	ite	ne
 80040ee:	2301      	movne	r3, #1
 80040f0:	2300      	moveq	r3, #0
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	887b      	ldrh	r3, [r7, #2]
 80040f6:	4611      	mov	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	460a      	mov	r2, r1
 80040fe:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800410e:	b480      	push	{r7}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	460b      	mov	r3, r1
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800411c:	2300      	movs	r3, #0
 800411e:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d905      	bls.n	8004132 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8004126:	23fc      	movs	r3, #252	; 0xfc
 8004128:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e008      	b.n	8004144 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004132:	897b      	ldrh	r3, [r7, #10]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 800413c:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	7dba      	ldrb	r2, [r7, #22]
 8004142:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004148:	4618      	mov	r0, r3
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	460b      	mov	r3, r1
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004160:	2300      	movs	r3, #0
 8004162:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004168:	897b      	ldrh	r3, [r7, #10]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <VL53L1_GetLimitCheckValue+0x22>
 800416e:	2b01      	cmp	r3, #1
 8004170:	d00c      	beq.n	800418c <VL53L1_GetLimitCheckValue+0x3a>
 8004172:	e017      	b.n	80041a4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8004174:	f107 0314 	add.w	r3, r7, #20
 8004178:	4619      	mov	r1, r3
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f001 f8d6 	bl	800532c <VL53L1_get_lite_sigma_threshold>
 8004180:	4603      	mov	r3, r0
 8004182:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8004184:	8abb      	ldrh	r3, [r7, #20]
 8004186:	039b      	lsls	r3, r3, #14
 8004188:	61bb      	str	r3, [r7, #24]
		break;
 800418a:	e00d      	b.n	80041a8 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800418c:	f107 0316 	add.w	r3, r7, #22
 8004190:	4619      	mov	r1, r3
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f001 f8f4 	bl	8005380 <VL53L1_get_lite_min_count_rate>
 8004198:	4603      	mov	r3, r0
 800419a:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800419c:	8afb      	ldrh	r3, [r7, #22]
 800419e:	025b      	lsls	r3, r3, #9
 80041a0:	61bb      	str	r3, [r7, #24]
		break;
 80041a2:	e001      	b.n	80041a8 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80041a4:	23fc      	movs	r3, #252	; 0xfc
 80041a6:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80041a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d123      	bne.n	80041f8 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d110      	bne.n	80041d8 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	33e0      	adds	r3, #224	; 0xe0
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80041d6:	e00f      	b.n	80041f8 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041de:	897b      	ldrh	r3, [r7, #10]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	33e0      	adds	r3, #224	; 0xe0
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	4413      	add	r3, r2
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80041f8:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	460b      	mov	r3, r1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8004216:	7afb      	ldrb	r3, [r7, #11]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4619      	mov	r1, r3
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fdb6 	bl	8004d8e <VL53L1_get_sequence_config_bit>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8004226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
 800423e:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	789b      	ldrb	r3, [r3, #2]
 8004244:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8004246:	7dbb      	ldrb	r3, [r7, #22]
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d002      	beq.n	8004252 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 fa69 	bl	8004724 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8004258:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 800425a:	7d7b      	ldrb	r3, [r7, #21]
 800425c:	2b63      	cmp	r3, #99	; 0x63
 800425e:	dc12      	bgt.n	8004286 <VL53L1_StartMeasurement+0x52>
 8004260:	2b62      	cmp	r3, #98	; 0x62
 8004262:	da0d      	bge.n	8004280 <VL53L1_StartMeasurement+0x4c>
 8004264:	2b05      	cmp	r3, #5
 8004266:	dc0e      	bgt.n	8004286 <VL53L1_StartMeasurement+0x52>
 8004268:	2b04      	cmp	r3, #4
 800426a:	da09      	bge.n	8004280 <VL53L1_StartMeasurement+0x4c>
 800426c:	2b02      	cmp	r3, #2
 800426e:	dc02      	bgt.n	8004276 <VL53L1_StartMeasurement+0x42>
 8004270:	2b00      	cmp	r3, #0
 8004272:	da05      	bge.n	8004280 <VL53L1_StartMeasurement+0x4c>
 8004274:	e007      	b.n	8004286 <VL53L1_StartMeasurement+0x52>
 8004276:	2b03      	cmp	r3, #3
 8004278:	d105      	bne.n	8004286 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
		break;
 800427e:	e004      	b.n	800428a <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8004280:	23f2      	movs	r3, #242	; 0xf2
 8004282:	75fb      	strb	r3, [r7, #23]
		break;
 8004284:	e001      	b.n	800428a <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8004286:	23fd      	movs	r3, #253	; 0xfd
 8004288:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 800428a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d11f      	bne.n	80042d2 <VL53L1_StartMeasurement+0x9e>
 8004292:	7dbb      	ldrb	r3, [r7, #22]
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d11c      	bne.n	80042d2 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fde0 	bl	8003e64 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80042a4:	4603      	mov	r3, r0
 80042a6:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <VL53L1_StartMeasurement+0xd4>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80042b4:	f107 030c 	add.w	r3, r7, #12
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff fe9c 	bl	8003ff8 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80042c0:	4603      	mov	r3, r0
 80042c2:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1d1a      	adds	r2, r3, #4
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d901      	bls.n	80042d2 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80042ce:	23fc      	movs	r3, #252	; 0xfc
 80042d0:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80042d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80042da:	7dbb      	ldrb	r3, [r7, #22]
 80042dc:	2206      	movs	r2, #6
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 f897 	bl	8005414 <VL53L1_init_and_start_range>
 80042e6:	4603      	mov	r3, r0
 80042e8:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80042ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2204      	movs	r2, #4
 80042f6:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80042fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3718      	adds	r7, #24
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	789b      	ldrb	r3, [r3, #2]
 800431c:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800431e:	7bbb      	ldrb	r3, [r7, #14]
 8004320:	4619      	mov	r1, r3
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f001 fc04 	bl	8005b30 <VL53L1_clear_interrupt_and_enable_next_range>
 8004328:	4603      	mov	r3, r0
 800432a:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 800432c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <VL53L1_WaitMeasurementDataReady>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_WaitMeasurementDataReady(VL53L1_DEV Dev)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]

	/* Note that the timeout is given by:
	* VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS defined in def.h
	*/

	Status = VL53L1_poll_for_range_completion(Dev,
 8004344:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f004 fb79 	bl	8008a40 <VL53L1_poll_for_range_completion>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8004352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8004360:	b480      	push	{r7}
 8004362:	b08d      	sub	sp, #52	; 0x34
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	603a      	str	r2, [r7, #0]
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	460b      	mov	r3, r1
 800436e:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8004370:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004374:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8004376:	231e      	movs	r3, #30
 8004378:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 800437a:	4b32      	ldr	r3, [pc, #200]	; (8004444 <ComputeRQL+0xe4>)
 800437c:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800437e:	4b32      	ldr	r3, [pc, #200]	; (8004448 <ComputeRQL+0xe8>)
 8004380:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8004382:	f641 139a 	movw	r3, #6554	; 0x199a
 8004386:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d103      	bne.n	8004396 <ComputeRQL+0x36>
		returnvalue = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004394:	e04f      	b.n	8004436 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8004396:	79bb      	ldrb	r3, [r7, #6]
 8004398:	2b07      	cmp	r3, #7
 800439a:	d103      	bne.n	80043a4 <ComputeRQL+0x44>
		returnvalue = 50;
 800439c:	2332      	movs	r3, #50	; 0x32
 800439e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80043a2:	e048      	b.n	8004436 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80043aa:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80043ae:	429a      	cmp	r2, r3
 80043b0:	dd03      	ble.n	80043ba <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80043b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b8:	e007      	b.n	80043ca <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80043c0:	461a      	mov	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d020      	beq.n	8004412 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80043d4:	461a      	mov	r2, r3
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	fb02 f303 	mul.w	r3, r2, r3
 80043dc:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80043de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4413      	add	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f0:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d804      	bhi.n	800440a <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	62bb      	str	r3, [r7, #40]	; 0x28
 8004408:	e006      	b.n	8004418 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800440a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800440e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004410:	e002      	b.n	8004418 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8004412:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	0c1b      	lsrs	r3, r3, #16
 800441c:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	2b32      	cmp	r3, #50	; 0x32
 8004422:	d905      	bls.n	8004430 <ComputeRQL+0xd0>
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	bf28      	it	cs
 800442a:	2364      	movcs	r3, #100	; 0x64
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e000      	b.n	8004432 <ComputeRQL+0xd2>
 8004430:	2332      	movs	r3, #50	; 0x32
 8004432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8004436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800443a:	4618      	mov	r0, r3
 800443c:	3734      	adds	r7, #52	; 0x34
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr
 8004444:	0075b333 	.word	0x0075b333
 8004448:	0030cccd 	.word	0x0030cccd

0800444c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	3b04      	subs	r3, #4
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d83d      	bhi.n	80044da <ConvertStatusLite+0x8e>
 800445e:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <ConvertStatusLite+0x18>)
 8004460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004464:	080044b7 	.word	0x080044b7
 8004468:	080044b1 	.word	0x080044b1
 800446c:	080044bd 	.word	0x080044bd
 8004470:	080044c3 	.word	0x080044c3
 8004474:	080044cf 	.word	0x080044cf
 8004478:	080044d5 	.word	0x080044d5
 800447c:	080044db 	.word	0x080044db
 8004480:	080044db 	.word	0x080044db
 8004484:	080044c9 	.word	0x080044c9
 8004488:	080044db 	.word	0x080044db
 800448c:	080044db 	.word	0x080044db
 8004490:	080044db 	.word	0x080044db
 8004494:	080044db 	.word	0x080044db
 8004498:	080044db 	.word	0x080044db
 800449c:	080044a5 	.word	0x080044a5
 80044a0:	080044ab 	.word	0x080044ab
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80044a4:	230a      	movs	r3, #10
 80044a6:	73fb      	strb	r3, [r7, #15]
		break;
 80044a8:	e019      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80044aa:	2306      	movs	r3, #6
 80044ac:	73fb      	strb	r3, [r7, #15]
		break;
 80044ae:	e016      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80044b0:	2304      	movs	r3, #4
 80044b2:	73fb      	strb	r3, [r7, #15]
		break;
 80044b4:	e013      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80044b6:	2302      	movs	r3, #2
 80044b8:	73fb      	strb	r3, [r7, #15]
		break;
 80044ba:	e010      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
		break;
 80044c0:	e00d      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80044c2:	2307      	movs	r3, #7
 80044c4:	73fb      	strb	r3, [r7, #15]
		break;
 80044c6:	e00a      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80044c8:	2309      	movs	r3, #9
 80044ca:	73fb      	strb	r3, [r7, #15]
		break;
 80044cc:	e007      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80044ce:	2303      	movs	r3, #3
 80044d0:	73fb      	strb	r3, [r7, #15]
		break;
 80044d2:	e004      	b.n	80044de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
		break;
 80044d8:	e001      	b.n	80044de <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80044da:	23ff      	movs	r3, #255	; 0xff
 80044dc:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08c      	sub	sp, #48	; 0x30
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	607b      	str	r3, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	72fb      	strb	r3, [r7, #11]
 80044fa:	4613      	mov	r3, r2
 80044fc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80044fe:	2300      	movs	r3, #0
 8004500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004512:	f003 031f 	and.w	r3, r3, #31
 8004516:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800451a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800451e:	7afb      	ldrb	r3, [r7, #11]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ff1c 	bl	8004360 <ComputeRQL>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004534:	025b      	lsls	r3, r3, #9
 8004536:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800453c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004542:	025b      	lsls	r3, r3, #9
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004558:	025b      	lsls	r3, r3, #9
 800455a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800455c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456e:	2200      	movs	r2, #0
 8004570:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8004572:	7abb      	ldrb	r3, [r7, #10]
 8004574:	2b11      	cmp	r3, #17
 8004576:	d009      	beq.n	800458c <SetSimpleData+0xa0>
 8004578:	2b11      	cmp	r3, #17
 800457a:	dc0f      	bgt.n	800459c <SetSimpleData+0xb0>
 800457c:	2b03      	cmp	r3, #3
 800457e:	dc02      	bgt.n	8004586 <SetSimpleData+0x9a>
 8004580:	2b00      	cmp	r3, #0
 8004582:	dc03      	bgt.n	800458c <SetSimpleData+0xa0>
 8004584:	e00a      	b.n	800459c <SetSimpleData+0xb0>
 8004586:	2b0d      	cmp	r3, #13
 8004588:	d004      	beq.n	8004594 <SetSimpleData+0xa8>
 800458a:	e007      	b.n	800459c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2205      	movs	r2, #5
 8004590:	76da      	strb	r2, [r3, #27]
		break;
 8004592:	e006      	b.n	80045a2 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8004594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004596:	220d      	movs	r2, #13
 8004598:	76da      	strb	r2, [r3, #27]
		break;
 800459a:	e002      	b.n	80045a2 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800459c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459e:	2200      	movs	r2, #0
 80045a0:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	7edb      	ldrb	r3, [r3, #27]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d108      	bne.n	80045bc <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80045aa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff ff4c 	bl	800444c <ConvertStatusLite>
 80045b4:	4603      	mov	r3, r0
 80045b6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a3a      	ldr	r2, [r7, #32]
 80045c8:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045d0:	025b      	lsls	r3, r3, #9
 80045d2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80045dc:	f107 0314 	add.w	r3, r7, #20
 80045e0:	461a      	mov	r2, r3
 80045e2:	2100      	movs	r1, #0
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f7ff fdb4 	bl	8004152 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80045ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045ee:	2b06      	cmp	r3, #6
 80045f0:	bf0c      	ite	eq
 80045f2:	2301      	moveq	r3, #1
 80045f4:	2300      	movne	r3, #0
 80045f6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80045f8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 80045fa:	f107 0319 	add.w	r3, r7, #25
 80045fe:	461a      	mov	r2, r3
 8004600:	2100      	movs	r1, #0
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff fd83 	bl	800410e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8004608:	7e7b      	ldrb	r3, [r7, #25]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d104      	bne.n	8004618 <SetSimpleData+0x12c>
 800460e:	7ffb      	ldrb	r3, [r7, #31]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <SetSimpleData+0x12c>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <SetSimpleData+0x12e>
 8004618:	2300      	movs	r3, #0
 800461a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	7fba      	ldrb	r2, [r7, #30]
 8004620:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8004624:	f107 0314 	add.w	r3, r7, #20
 8004628:	461a      	mov	r2, r3
 800462a:	2101      	movs	r1, #1
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff fd90 	bl	8004152 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8004632:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004636:	2b04      	cmp	r3, #4
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8004640:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8004642:	f107 0319 	add.w	r3, r7, #25
 8004646:	461a      	mov	r2, r3
 8004648:	2101      	movs	r1, #1
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f7ff fd5f 	bl	800410e <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8004650:	7e7b      	ldrb	r3, [r7, #25]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d104      	bne.n	8004660 <SetSimpleData+0x174>
 8004656:	7f7b      	ldrb	r3, [r7, #29]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <SetSimpleData+0x174>
 800465c:	2301      	movs	r3, #1
 800465e:	e000      	b.n	8004662 <SetSimpleData+0x176>
 8004660:	2300      	movs	r3, #0
 8004662:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	7fba      	ldrb	r2, [r7, #30]
 8004668:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800466c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466e:	8b1b      	ldrh	r3, [r3, #24]
 8004670:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	7edb      	ldrb	r3, [r3, #27]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d110      	bne.n	800469c <SetSimpleData+0x1b0>
 800467a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800467e:	2b00      	cmp	r3, #0
 8004680:	da0c      	bge.n	800469c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8004682:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004686:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <SetSimpleData+0x1bc>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	429a      	cmp	r2, r3
 800468c:	da03      	bge.n	8004696 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	220e      	movs	r2, #14
 8004692:	76da      	strb	r2, [r3, #27]
 8004694:	e002      	b.n	800469c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8004696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004698:	2200      	movs	r2, #0
 800469a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 800469c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3730      	adds	r7, #48	; 0x30
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	2000000c 	.word	0x2000000c

080046ac <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b0a8      	sub	sp, #160	; 0xa0
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80046c4:	221c      	movs	r2, #28
 80046c6:	21ff      	movs	r1, #255	; 0xff
 80046c8:	6838      	ldr	r0, [r7, #0]
 80046ca:	f005 f992 	bl	80099f2 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80046ce:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046d2:	2102      	movs	r1, #2
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f001 f9bb 	bl	8005a50 <VL53L1_get_device_results>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80046e0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d117      	bne.n	8004718 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80046e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046ec:	789a      	ldrb	r2, [r3, #2]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80046f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80046f6:	3304      	adds	r3, #4
 80046f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 80046fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004700:	78da      	ldrb	r2, [r3, #3]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800470a:	2101      	movs	r1, #1
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff feed 	bl	80044ec <SetSimpleData>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004718:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800471c:	4618      	mov	r0, r3
 800471e:	3798      	adds	r7, #152	; 0x98
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b0c6      	sub	sp, #280	; 0x118
 8004728:	af00      	add	r7, sp, #0
 800472a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800472e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004732:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004740:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10b      	bne.n	8004760 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8004748:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800474c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004750:	2200      	movs	r2, #0
 8004752:	2185      	movs	r1, #133	; 0x85
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	f004 fa4d 	bl	8008bf4 <VL53L1_WrByte>
 800475a:	4603      	mov	r3, r0
 800475c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8004760:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004764:	2b00      	cmp	r3, #0
 8004766:	d106      	bne.n	8004776 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8004768:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800476c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	f002 fd46 	bl	8007202 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8004776:	4b7e      	ldr	r3, [pc, #504]	; (8004970 <VL53L1_LoadPatch+0x24c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 800477e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004782:	2b03      	cmp	r3, #3
 8004784:	d81a      	bhi.n	80047bc <VL53L1_LoadPatch+0x98>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <VL53L1_LoadPatch+0x68>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047a5 	.word	0x080047a5
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047b5 	.word	0x080047b5
	case 0:
		patch_power = 0x00;
 800479c:	2300      	movs	r3, #0
 800479e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047a2:	e00e      	b.n	80047c2 <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80047a4:	2310      	movs	r3, #16
 80047a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047aa:	e00a      	b.n	80047c2 <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80047ac:	2320      	movs	r3, #32
 80047ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047b2:	e006      	b.n	80047c2 <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80047b4:	2340      	movs	r3, #64	; 0x40
 80047b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80047ba:	e002      	b.n	80047c2 <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80047c2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d134      	bne.n	8004834 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80047ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047d2:	2229      	movs	r2, #41	; 0x29
 80047d4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 80047d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047de:	22c9      	movs	r2, #201	; 0xc9
 80047e0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 80047e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047ea:	220e      	movs	r2, #14
 80047ec:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 80047ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80047f6:	2240      	movs	r2, #64	; 0x40
 80047f8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 80047fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80047fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004802:	2228      	movs	r2, #40	; 0x28
 8004804:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8004806:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800480a:	b2da      	uxtb	r2, r3
 800480c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004810:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004814:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8004816:	f107 020c 	add.w	r2, r7, #12
 800481a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800481e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004822:	2306      	movs	r3, #6
 8004824:	f240 4176 	movw	r1, #1142	; 0x476
 8004828:	6800      	ldr	r0, [r0, #0]
 800482a:	f004 f977 	bl	8008b1c <VL53L1_WriteMulti>
 800482e:	4603      	mov	r3, r0
 8004830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8004834:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004838:	2b00      	cmp	r3, #0
 800483a:	d132      	bne.n	80048a2 <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 800483c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004840:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004844:	2203      	movs	r2, #3
 8004846:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8004848:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800484c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004850:	226d      	movs	r2, #109	; 0x6d
 8004852:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8004854:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004858:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800485c:	2203      	movs	r2, #3
 800485e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8004860:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004864:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004868:	226f      	movs	r2, #111	; 0x6f
 800486a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800486c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004870:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004874:	2207      	movs	r2, #7
 8004876:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8004878:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800487c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004880:	2229      	movs	r2, #41	; 0x29
 8004882:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8004884:	f107 020c 	add.w	r2, r7, #12
 8004888:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800488c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8004890:	2306      	movs	r3, #6
 8004892:	f240 4196 	movw	r1, #1174	; 0x496
 8004896:	6800      	ldr	r0, [r0, #0]
 8004898:	f004 f940 	bl	8008b1c <VL53L1_WriteMulti>
 800489c:	4603      	mov	r3, r0
 800489e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80048a2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d11a      	bne.n	80048e0 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80048aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80048b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048be:	2207      	movs	r2, #7
 80048c0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80048c2:	f107 020c 	add.w	r2, r7, #12
 80048c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ca:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80048ce:	2302      	movs	r3, #2
 80048d0:	f240 4172 	movw	r1, #1138	; 0x472
 80048d4:	6800      	ldr	r0, [r0, #0]
 80048d6:	f004 f921 	bl	8008b1c <VL53L1_WriteMulti>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 80048e0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d11a      	bne.n	800491e <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 80048e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80048f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80048f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80048fc:	2207      	movs	r2, #7
 80048fe:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8004900:	f107 020c 	add.w	r2, r7, #12
 8004904:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004908:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800490c:	2302      	movs	r3, #2
 800490e:	f240 4174 	movw	r1, #1140	; 0x474
 8004912:	6800      	ldr	r0, [r0, #0]
 8004914:	f004 f902 	bl	8008b1c <VL53L1_WriteMulti>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800491e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8004926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800492a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800492e:	2201      	movs	r2, #1
 8004930:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8004934:	6818      	ldr	r0, [r3, #0]
 8004936:	f004 f95d 	bl	8008bf4 <VL53L1_WrByte>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8004940:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10b      	bne.n	8004960 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8004948:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800494c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004950:	2201      	movs	r2, #1
 8004952:	2185      	movs	r1, #133	; 0x85
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	f004 f94d 	bl	8008bf4 <VL53L1_WrByte>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8004960:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8004964:	4618      	mov	r0, r3
 8004966:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c

08004974 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8004974:	b5b0      	push	{r4, r5, r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af04      	add	r7, sp, #16
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004980:	2300      	movs	r3, #0
 8004982:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8004988:	2162      	movs	r1, #98	; 0x62
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f002 f8fd 	bl	8006b8a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	2200      	movs	r2, #0
 8004994:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2201      	movs	r2, #1
 800499a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2200      	movs	r2, #0
 80049a0:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2201      	movs	r2, #1
 80049a6:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2201      	movs	r2, #1
 80049ac:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049b4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80049bc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80049c4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2264      	movs	r2, #100	; 0x64
 80049ca:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80049d2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f240 72db 	movw	r2, #2011	; 0x7db
 80049e2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f002 f8b4 	bl	8006b54 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80049ec:	78fb      	ldrb	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <VL53L1_data_init+0x90>
 80049f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d104      	bne.n	8004a04 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f857 	bl	8004aae <VL53L1_read_p2p_data>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f001 fbe8 	bl	80061e0 <VL53L1_init_refspadchar_config_struct>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 fc03 	bl	8006226 <VL53L1_init_ssc_config_struct>
 8004a20:	4603      	mov	r3, r0
 8004a22:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f001 fc17 	bl	8006266 <VL53L1_init_xtalk_config_struct>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fc71 	bl	800632a <VL53L1_init_offset_cal_config_struct>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	33a4      	adds	r3, #164	; 0xa4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fc90 	bl	8006376 <VL53L1_init_tuning_parm_storage_struct>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8004a5a:	2120      	movs	r1, #32
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fcb9 	bl	80053d4 <VL53L1_set_vhv_loopbound>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8004a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d116      	bne.n	8004a9c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	7858      	ldrb	r0, [r3, #1]
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	8b1c      	ldrh	r4, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	689d      	ldr	r5, [r3, #8]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	6912      	ldr	r2, [r2, #16]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	6949      	ldr	r1, [r1, #20]
 8004a86:	9102      	str	r1, [sp, #8]
 8004a88:	9201      	str	r2, [sp, #4]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	462b      	mov	r3, r5
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4601      	mov	r1, r0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fad4 	bl	8005040 <VL53L1_set_preset_mode>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f002 fde5 	bl	800766c <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8004aa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bdb0      	pop	{r4, r5, r7, pc}

08004aae <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8004abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d108      	bne.n	8004ad8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f002 ff63 	bl	800799a <VL53L1_get_static_nvm_managed>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8004ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	3342      	adds	r3, #66	; 0x42
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f003 f895 	bl	8007c16 <VL53L1_get_customer_nvm_managed>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8004af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d115      	bne.n	8004b24 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8004afe:	4619      	mov	r1, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f003 ff46 	bl	8008992 <VL53L1_get_nvm_copy_data>
 8004b06:	4603      	mov	r3, r0
 8004b08:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8004b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d108      	bne.n	8004b24 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	33f0      	adds	r3, #240	; 0xf0
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f002 f993 	bl	8006e4a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8004b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d109      	bne.n	8004b40 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8004b32:	461a      	mov	r2, r3
 8004b34:	21de      	movs	r1, #222	; 0xde
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f004 f8ba 	bl	8008cb0 <VL53L1_RdWord>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	d204      	bcs.n	8004b56 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8004b52:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8004b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	339e      	adds	r3, #158	; 0x9e
 8004b62:	4619      	mov	r1, r3
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 f98d 	bl	8004e84 <VL53L1_get_mode_mitigation_roi>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d114      	bne.n	8004ba2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004bca:	23f1      	movs	r3, #241	; 0xf1
 8004bcc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8004bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004be2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8004bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bc80      	pop	{r7}
 8004bfc:	4770      	bx	lr

08004bfe <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b085      	sub	sp, #20
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c1a:	23f1      	movs	r3, #241	; 0xf1
 8004c1c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8004c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8004c32:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8004c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
 8004c54:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004c68:	23f1      	movs	r3, #241	; 0xf1
 8004c6a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8004c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11b      	bne.n	8004cac <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 8004c98:	9201      	str	r2, [sp, #4]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	68b8      	ldr	r0, [r7, #8]
 8004ca4:	f002 fc17 	bl	80074d6 <VL53L1_calc_timeout_register_values>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8004cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8004ce0:	23f1      	movs	r3, #241	; 0xf1
 8004ce2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8004ce4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d14a      	bne.n	8004d82 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f002 fa93 	bl	8007226 <VL53L1_calc_macro_period_us>
 8004d00:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f002 fb4a 	bl	80073a4 <VL53L1_calc_timeout_us>
 8004d10:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8004d1c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004d1e:	8a7b      	ldrh	r3, [r7, #18]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8004d2a:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004d2c:	4413      	add	r3, r2
 8004d2e:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d30:	8a7b      	ldrh	r3, [r7, #18]
 8004d32:	6979      	ldr	r1, [r7, #20]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f002 fb75 	bl	8007424 <VL53L1_calc_decoded_timeout_us>
 8004d3a:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8004d46:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8004d48:	8a7b      	ldrh	r3, [r7, #18]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8004d54:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8004d56:	4413      	add	r3, r2
 8004d58:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8004d5a:	8a7b      	ldrh	r3, [r7, #18]
 8004d5c:	6979      	ldr	r1, [r7, #20]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f002 fb60 	bl	8007424 <VL53L1_calc_decoded_timeout_us>
 8004d64:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8004d82:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b087      	sub	sp, #28
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	60f8      	str	r0, [r7, #12]
 8004d96:	460b      	mov	r3, r1
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8004da4:	2301      	movs	r3, #1
 8004da6:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8004da8:	7afb      	ldrb	r3, [r7, #11]
 8004daa:	2b07      	cmp	r3, #7
 8004dac:	d81c      	bhi.n	8004de8 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8004dae:	7afb      	ldrb	r3, [r7, #11]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8004db4:	7afb      	ldrb	r3, [r7, #11]
 8004db6:	2201      	movs	r2, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8004dc4:	7dbb      	ldrb	r3, [r7, #22]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8004dce:	7afb      	ldrb	r3, [r7, #11]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	7afb      	ldrb	r3, [r7, #11]
 8004ddc:	fa42 f303 	asr.w	r3, r2, r3
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	e001      	b.n	8004dec <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8004de8:	23fc      	movs	r3, #252	; 0xfc
 8004dea:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8004dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bc80      	pop	{r7}
 8004df8:	4770      	bx	lr

08004dfa <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	7858      	ldrb	r0, [r3, #1]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	7819      	ldrb	r1, [r3, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f002 fbd4 	bl	80075c8 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	7898      	ldrb	r0, [r3, #2]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	78d9      	ldrb	r1, [r3, #3]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f002 fc07 	bl	8007642 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f002 fcb8 	bl	80077d4 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	1c99      	adds	r1, r3, #2
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	3303      	adds	r3, #3
 8004e72:	461a      	mov	r2, r3
 8004e74:	f002 fbce 	bl	8007614 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8004e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8004ea8:	f107 020e 	add.w	r2, r7, #14
 8004eac:	f107 010d 	add.w	r1, r7, #13
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f002 fc8f 	bl	80077d4 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8004eb6:	7bba      	ldrb	r2, [r7, #14]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8004ebc:	7b7a      	ldrb	r2, [r7, #13]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8004ec8:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8004ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607a      	str	r2, [r7, #4]
 8004ef6:	603b      	str	r3, [r7, #0]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8004f04:	7afb      	ldrb	r3, [r7, #11]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	2b25      	cmp	r3, #37	; 0x25
 8004f0a:	f200 808e 	bhi.w	800502a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004fad 	.word	0x08004fad
 8004f18:	08004fad 	.word	0x08004fad
 8004f1c:	08004fad 	.word	0x08004fad
 8004f20:	08004fad 	.word	0x08004fad
 8004f24:	08004fad 	.word	0x08004fad
 8004f28:	08004fd7 	.word	0x08004fd7
 8004f2c:	08004fd7 	.word	0x08004fd7
 8004f30:	08004fd7 	.word	0x08004fd7
 8004f34:	0800502b 	.word	0x0800502b
 8004f38:	0800502b 	.word	0x0800502b
 8004f3c:	0800502b 	.word	0x0800502b
 8004f40:	0800502b 	.word	0x0800502b
 8004f44:	0800502b 	.word	0x0800502b
 8004f48:	0800502b 	.word	0x0800502b
 8004f4c:	0800502b 	.word	0x0800502b
 8004f50:	0800502b 	.word	0x0800502b
 8004f54:	08004fad 	.word	0x08004fad
 8004f58:	08004fd7 	.word	0x08004fd7
 8004f5c:	0800502b 	.word	0x0800502b
 8004f60:	0800502b 	.word	0x0800502b
 8004f64:	0800502b 	.word	0x0800502b
 8004f68:	0800502b 	.word	0x0800502b
 8004f6c:	0800502b 	.word	0x0800502b
 8004f70:	0800502b 	.word	0x0800502b
 8004f74:	0800502b 	.word	0x0800502b
 8004f78:	0800502b 	.word	0x0800502b
 8004f7c:	0800502b 	.word	0x0800502b
 8004f80:	0800502b 	.word	0x0800502b
 8004f84:	0800502b 	.word	0x0800502b
 8004f88:	0800502b 	.word	0x0800502b
 8004f8c:	0800502b 	.word	0x0800502b
 8004f90:	0800502b 	.word	0x0800502b
 8004f94:	0800502b 	.word	0x0800502b
 8004f98:	0800502b 	.word	0x0800502b
 8004f9c:	0800502b 	.word	0x0800502b
 8004fa0:	08005001 	.word	0x08005001
 8004fa4:	08005001 	.word	0x08005001
 8004fa8:	08005001 	.word	0x08005001
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	601a      	str	r2, [r3, #0]
	break;
 8004fd4:	e02c      	b.n	8005030 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	601a      	str	r2, [r3, #0]
	break;
 8004ffe:	e017      	b.n	8005030 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	601a      	str	r2, [r3, #0]
	break;
 8005028:	e002      	b.n	8005030 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800502a:	23fc      	movs	r3, #252	; 0xfc
 800502c:	75fb      	strb	r3, [r7, #23]
		break;
 800502e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8005030:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	371c      	adds	r7, #28
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop

08005040 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b092      	sub	sp, #72	; 0x48
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	460b      	mov	r3, r1
 800504c:	72fb      	strb	r3, [r7, #11]
 800504e:	4613      	mov	r3, r2
 8005050:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005052:	2300      	movs	r3, #0
 8005054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005062:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800507a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005082:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	33a4      	adds	r3, #164	; 0xa4
 8005088:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8005090:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8005092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005094:	7afa      	ldrb	r2, [r7, #11]
 8005096:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800509c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050a2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050a8:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 80050aa:	2103      	movs	r1, #3
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f001 fd6c 	bl	8006b8a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	2b25      	cmp	r3, #37	; 0x25
 80050b8:	f200 810c 	bhi.w	80052d4 <VL53L1_set_preset_mode+0x294>
 80050bc:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <VL53L1_set_preset_mode+0x84>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	0800515d 	.word	0x0800515d
 80050c8:	08005179 	.word	0x08005179
 80050cc:	08005195 	.word	0x08005195
 80050d0:	080051b1 	.word	0x080051b1
 80050d4:	080051cd 	.word	0x080051cd
 80050d8:	080051e9 	.word	0x080051e9
 80050dc:	08005205 	.word	0x08005205
 80050e0:	08005221 	.word	0x08005221
 80050e4:	080052d5 	.word	0x080052d5
 80050e8:	080052d5 	.word	0x080052d5
 80050ec:	080052d5 	.word	0x080052d5
 80050f0:	080052d5 	.word	0x080052d5
 80050f4:	080052d5 	.word	0x080052d5
 80050f8:	080052d5 	.word	0x080052d5
 80050fc:	080052d5 	.word	0x080052d5
 8005100:	080052d5 	.word	0x080052d5
 8005104:	0800523d 	.word	0x0800523d
 8005108:	08005259 	.word	0x08005259
 800510c:	080052d5 	.word	0x080052d5
 8005110:	080052d5 	.word	0x080052d5
 8005114:	080052d5 	.word	0x080052d5
 8005118:	080052d5 	.word	0x080052d5
 800511c:	080052d5 	.word	0x080052d5
 8005120:	080052d5 	.word	0x080052d5
 8005124:	080052d5 	.word	0x080052d5
 8005128:	080052d5 	.word	0x080052d5
 800512c:	080052d5 	.word	0x080052d5
 8005130:	080052d5 	.word	0x080052d5
 8005134:	080052d5 	.word	0x080052d5
 8005138:	080052d5 	.word	0x080052d5
 800513c:	080052d5 	.word	0x080052d5
 8005140:	080052d5 	.word	0x080052d5
 8005144:	080052d5 	.word	0x080052d5
 8005148:	080052d5 	.word	0x080052d5
 800514c:	080052d5 	.word	0x080052d5
 8005150:	08005275 	.word	0x08005275
 8005154:	08005295 	.word	0x08005295
 8005158:	080052b5 	.word	0x080052b5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516c:	f001 f991 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 8005170:	4603      	mov	r3, r0
 8005172:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005176:	e0b1      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	9301      	str	r3, [sp, #4]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	9300      	str	r3, [sp, #0]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005188:	f001 faa0 	bl	80066cc <VL53L1_preset_mode_standard_ranging_short_range>
 800518c:	4603      	mov	r3, r0
 800518e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005192:	e0a3      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051a4:	f001 fad3 	bl	800674e <VL53L1_preset_mode_standard_ranging_long_range>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ae:	e095      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	9301      	str	r3, [sp, #4]
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051c0:	f001 fb06 	bl	80067d0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051ca:	e087      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	9301      	str	r3, [sp, #4]
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051dc:	f001 fb1d 	bl	800681a <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80051e6:	e079      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051f8:	f001 fb34 	bl	8006864 <VL53L1_preset_mode_timed_ranging>
 80051fc:	4603      	mov	r3, r0
 80051fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005202:	e06b      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005212:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005214:	f001 fb60 	bl	80068d8 <VL53L1_preset_mode_timed_ranging_short_range>
 8005218:	4603      	mov	r3, r0
 800521a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800521e:	e05d      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005230:	f001 fb8c 	bl	800694c <VL53L1_preset_mode_timed_ranging_long_range>
 8005234:	4603      	mov	r3, r0
 8005236:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800523a:	e04f      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	9301      	str	r3, [sp, #4]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800524a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800524c:	f001 fc60 	bl	8006b10 <VL53L1_preset_mode_olt>
 8005250:	4603      	mov	r3, r0
 8005252:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005256:	e041      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	9301      	str	r3, [sp, #4]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005268:	f001 fc1c 	bl	8006aa4 <VL53L1_preset_mode_singleshot_ranging>
 800526c:	4603      	mov	r3, r0
 800526e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8005272:	e033      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005288:	f001 fbc0 	bl	8006a0c <VL53L1_preset_mode_low_power_auto_short_ranging>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8005292:	e023      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	9302      	str	r3, [sp, #8]
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	9301      	str	r3, [sp, #4]
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052a8:	f001 fb8a 	bl	80069c0 <VL53L1_preset_mode_low_power_auto_ranging>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80052b2:	e013      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	9302      	str	r3, [sp, #8]
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	9301      	str	r3, [sp, #4]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052c8:	f001 fbc6 	bl	8006a58 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80052cc:	4603      	mov	r3, r0
 80052ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80052d2:	e003      	b.n	80052dc <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80052d4:	23fc      	movs	r3, #252	; 0xfc
 80052d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80052da:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80052dc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d105      	bne.n	80052f0 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	893a      	ldrh	r2, [r7, #8]
 80052e8:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80052ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ec:	893a      	ldrh	r2, [r7, #8]
 80052ee:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80052f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d108      	bne.n	800530a <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 80052f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f7ff fca2 	bl	8004c48 <VL53L1_set_timeouts_us>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800530a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8005312:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f7ff fc4a 	bl	8004bae <VL53L1_set_inter_measurement_period_ms>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8005320:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005324:	4618      	mov	r0, r3
 8005326:	3738      	adds	r7, #56	; 0x38
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005336:	2300      	movs	r3, #0
 8005338:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8005348:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	460b      	mov	r3, r1
 8005360:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	887a      	ldrh	r2, [r7, #2]
 800536e:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8005372:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005376:	4618      	mov	r0, r3
 8005378:	3714      	adds	r7, #20
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800539c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053b6:	2300      	movs	r3, #0
 80053b8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	887a      	ldrh	r2, [r7, #2]
 80053c2:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80053c6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80053e0:	2300      	movs	r3, #0
 80053e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	78fb      	ldrb	r3, [r7, #3]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8005404:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	bc80      	pop	{r7}
 8005410:	4770      	bx	lr
	...

08005414 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b0d0      	sub	sp, #320	; 0x140
 8005418:	af00      	add	r7, sp, #0
 800541a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800541e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005422:	6018      	str	r0, [r3, #0]
 8005424:	4608      	mov	r0, r1
 8005426:	4611      	mov	r1, r2
 8005428:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800542c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 8005430:	4602      	mov	r2, r0
 8005432:	701a      	strb	r2, [r3, #0]
 8005434:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005438:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800543c:	460a      	mov	r2, r1
 800543e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005446:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800544a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8005454:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005458:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800545c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8005460:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005464:	3342      	adds	r3, #66	; 0x42
 8005466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800546a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800546e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005472:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8005476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800547a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800547e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8005482:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005486:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800548a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800548e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005492:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005496:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800549a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800549e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80054a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80054a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054aa:	332c      	adds	r3, #44	; 0x2c
 80054ac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80054b0:	f107 030c 	add.w	r3, r7, #12
 80054b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 80054d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80054d4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80054d8:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 80054dc:	7812      	ldrb	r2, [r2, #0]
 80054de:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e4:	791b      	ldrb	r3, [r3, #4]
 80054e6:	b25b      	sxtb	r3, r3
 80054e8:	f003 030f 	and.w	r3, r3, #15
 80054ec:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80054ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80054f2:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 80054f6:	f993 3000 	ldrsb.w	r3, [r3]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8005506:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800550a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800550e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005512:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8005516:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800551a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800551e:	2bff      	cmp	r3, #255	; 0xff
 8005520:	d104      	bne.n	800552c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8005522:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005526:	2200      	movs	r2, #0
 8005528:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800552c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005530:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005534:	2b01      	cmp	r3, #1
 8005536:	d139      	bne.n	80055ac <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005538:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800553c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8005540:	2b00      	cmp	r3, #0
 8005542:	d133      	bne.n	80055ac <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8005544:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005548:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800554c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005550:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8005554:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005558:	2220      	movs	r2, #32
 800555a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800555e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005562:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 8005566:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10c      	bne.n	8005588 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800556e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005572:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8005576:	b29b      	uxth	r3, r3
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	b29b      	uxth	r3, r3
 800557c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800557e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005582:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005586:	e004      	b.n	8005592 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8005588:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800558c:	2200      	movs	r2, #0
 800558e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8005592:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005596:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d805      	bhi.n	80055ac <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 80055a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055a4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055a8:	2205      	movs	r2, #5
 80055aa:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80055ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055b0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d113      	bne.n	80055e0 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80055b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055bc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d10d      	bne.n	80055e0 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 80055c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055c8:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 80055cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055d0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 80055d4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055d8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055dc:	2206      	movs	r2, #6
 80055de:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 80055e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80055e4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	2b05      	cmp	r3, #5
 80055ee:	d827      	bhi.n	8005640 <VL53L1_init_and_start_range+0x22c>
 80055f0:	a201      	add	r2, pc, #4	; (adr r2, 80055f8 <VL53L1_init_and_start_range+0x1e4>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	08005639 	.word	0x08005639
 80055fc:	08005631 	.word	0x08005631
 8005600:	08005629 	.word	0x08005629
 8005604:	08005621 	.word	0x08005621
 8005608:	08005619 	.word	0x08005619
 800560c:	08005611 	.word	0x08005611
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8005610:	2301      	movs	r3, #1
 8005612:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005616:	e017      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8005618:	230d      	movs	r3, #13
 800561a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800561e:	e013      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8005620:	2324      	movs	r3, #36	; 0x24
 8005622:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005626:	e00f      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8005628:	2344      	movs	r3, #68	; 0x44
 800562a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800562e:	e00b      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8005630:	235a      	movs	r3, #90	; 0x5a
 8005632:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005636:	e007      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8005638:	2371      	movs	r3, #113	; 0x71
 800563a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800563e:	e003      	b.n	8005648 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8005640:	2383      	movs	r3, #131	; 0x83
 8005642:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8005646:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8005648:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800564c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 8005650:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800565c:	2300      	movs	r3, #0
 800565e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8005662:	e00b      	b.n	800567c <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8005664:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005668:	1c5a      	adds	r2, r3, #1
 800566a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8005672:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8005676:	3301      	adds	r3, #1
 8005678:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800567c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8005680:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005684:	429a      	cmp	r2, r3
 8005686:	d3ed      	bcc.n	8005664 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8005688:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800568c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d917      	bls.n	80056c6 <VL53L1_init_and_start_range+0x2b2>
 8005696:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800569a:	2b00      	cmp	r3, #0
 800569c:	d113      	bne.n	80056c6 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800569e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056a2:	f1c3 0301 	rsb	r3, r3, #1
 80056a6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80056aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 80056ae:	f107 020c 	add.w	r2, r7, #12
 80056b2:	4413      	add	r3, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	210b      	movs	r1, #11
 80056b8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80056bc:	f002 f8b8 	bl	8007830 <VL53L1_i2c_encode_static_nvm_managed>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 80056c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80056ca:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d917      	bls.n	8005704 <VL53L1_init_and_start_range+0x2f0>
 80056d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d113      	bne.n	8005704 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80056dc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80056e0:	f1c3 030d 	rsb	r3, r3, #13
 80056e4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80056e8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 80056ec:	f107 020c 	add.w	r2, r7, #12
 80056f0:	4413      	add	r3, r2
 80056f2:	461a      	mov	r2, r3
 80056f4:	2117      	movs	r1, #23
 80056f6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80056fa:	f002 f975 	bl	80079e8 <VL53L1_i2c_encode_customer_nvm_managed>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8005704:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005708:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d917      	bls.n	8005742 <VL53L1_init_and_start_range+0x32e>
 8005712:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005716:	2b00      	cmp	r3, #0
 8005718:	d113      	bne.n	8005742 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800571a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800571e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 8005722:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005726:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800572a:	f107 020c 	add.w	r2, r7, #12
 800572e:	4413      	add	r3, r2
 8005730:	461a      	mov	r2, r3
 8005732:	2120      	movs	r1, #32
 8005734:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8005738:	f002 fa94 	bl	8007c64 <VL53L1_i2c_encode_static_config>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8005742:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005746:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b02      	cmp	r3, #2
 800574e:	d917      	bls.n	8005780 <VL53L1_init_and_start_range+0x36c>
 8005750:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005754:	2b00      	cmp	r3, #0
 8005756:	d113      	bne.n	8005780 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8005758:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800575c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8005760:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8005764:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 8005768:	f107 020c 	add.w	r2, r7, #12
 800576c:	4413      	add	r3, r2
 800576e:	461a      	mov	r2, r3
 8005770:	2116      	movs	r1, #22
 8005772:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8005776:	f002 fb58 	bl	8007e2a <VL53L1_i2c_encode_general_config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8005780:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005784:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d917      	bls.n	80057be <VL53L1_init_and_start_range+0x3aa>
 800578e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005792:	2b00      	cmp	r3, #0
 8005794:	d113      	bne.n	80057be <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8005796:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800579a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800579e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80057a2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 80057a6:	f107 020c 	add.w	r2, r7, #12
 80057aa:	4413      	add	r3, r2
 80057ac:	461a      	mov	r2, r3
 80057ae:	2117      	movs	r1, #23
 80057b0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 80057b4:	f002 fbbd 	bl	8007f32 <VL53L1_i2c_encode_timing_config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 80057be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80057c2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d036      	beq.n	800583a <VL53L1_init_and_start_range+0x426>
 80057cc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d132      	bne.n	800583a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80057d4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80057d8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 80057dc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 80057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057e4:	791b      	ldrb	r3, [r3, #4]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d017      	beq.n	800581e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 80057ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057f2:	789b      	ldrb	r3, [r3, #2]
 80057f4:	f043 0301 	orr.w	r3, r3, #1
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80057fe:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8005800:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005804:	789b      	ldrb	r3, [r3, #2]
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005810:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8005812:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005816:	789a      	ldrb	r2, [r3, #2]
 8005818:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800581c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800581e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8005822:	f107 020c 	add.w	r2, r7, #12
 8005826:	4413      	add	r3, r2
 8005828:	461a      	mov	r2, r3
 800582a:	2112      	movs	r1, #18
 800582c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 8005830:	f002 fc01 	bl	8008036 <VL53L1_i2c_encode_dynamic_config>
 8005834:	4603      	mov	r3, r0
 8005836:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800583a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800583e:	2b00      	cmp	r3, #0
 8005840:	d113      	bne.n	800586a <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8005842:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8005846:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800584a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800584e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 8005852:	f107 020c 	add.w	r2, r7, #12
 8005856:	4413      	add	r3, r2
 8005858:	461a      	mov	r2, r3
 800585a:	2105      	movs	r1, #5
 800585c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 8005860:	f002 fc6e 	bl	8008140 <VL53L1_i2c_encode_system_control>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800586a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10f      	bne.n	8005892 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8005872:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8005876:	f107 020c 	add.w	r2, r7, #12
 800587a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800587e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8005882:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 8005886:	6800      	ldr	r0, [r0, #0]
 8005888:	f003 f948 	bl	8008b1c <VL53L1_WriteMulti>
 800588c:	4603      	mov	r3, r0
 800588e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8005892:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800589a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800589e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058a2:	6818      	ldr	r0, [r3, #0]
 80058a4:	f001 f99a 	bl	8006bdc <VL53L1_update_ll_driver_rd_state>
 80058a8:	4603      	mov	r3, r0
 80058aa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 80058ae:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d109      	bne.n	80058ca <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 80058b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80058ba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	f001 fa5e 	bl	8006d80 <VL53L1_update_ll_driver_cfg_state>
 80058c4:	4603      	mov	r3, r0
 80058c6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 80058ca:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b0c8      	sub	sp, #288	; 0x120
 80058dc:	af00      	add	r7, sp, #0
 80058de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80058e6:	6018      	str	r0, [r3, #0]
 80058e8:	460a      	mov	r2, r1
 80058ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058ee:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80058f2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80058fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80058fe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8005908:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800590c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8005910:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8005914:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005918:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800591c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8005920:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005924:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8005928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800592c:	2388      	movs	r3, #136	; 0x88
 800592e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8005938:	2300      	movs	r3, #0
 800593a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800593e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8005942:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d008      	beq.n	800595e <VL53L1_get_measurement_results+0x86>
 800594c:	2b02      	cmp	r3, #2
 800594e:	d10d      	bne.n	800596c <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8005950:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005954:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8005958:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800595c:	e00a      	b.n	8005974 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800595e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8005962:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 8005966:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800596a:	e003      	b.n	8005974 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800596c:	232c      	movs	r3, #44	; 0x2c
 800596e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8005972:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005974:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10f      	bne.n	800599c <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800597c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 8005980:	f107 0208 	add.w	r2, r7, #8
 8005984:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 8005988:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800598c:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 8005990:	6800      	ldr	r0, [r0, #0]
 8005992:	f003 f8f9 	bl	8008b88 <VL53L1_ReadMulti>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800599c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059a0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d917      	bls.n	80059da <VL53L1_get_measurement_results+0x102>
 80059aa:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d113      	bne.n	80059da <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80059b2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80059b6:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 80059ba:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80059be:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 80059c2:	f107 0208 	add.w	r2, r7, #8
 80059c6:	4413      	add	r3, r2
 80059c8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80059cc:	4619      	mov	r1, r3
 80059ce:	2038      	movs	r0, #56	; 0x38
 80059d0:	f002 fd47 	bl	8008462 <VL53L1_i2c_decode_debug_results>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80059da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80059de:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d017      	beq.n	8005a18 <VL53L1_get_measurement_results+0x140>
 80059e8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d113      	bne.n	8005a18 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80059f0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80059f4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80059f8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80059fc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 8005a00:	f107 0208 	add.w	r2, r7, #8
 8005a04:	4413      	add	r3, r2
 8005a06:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	2021      	movs	r0, #33	; 0x21
 8005a0e:	f002 fcc7 	bl	80083a0 <VL53L1_i2c_decode_core_results>
 8005a12:	4603      	mov	r3, r0
 8005a14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8005a18:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d110      	bne.n	8005a42 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8005a26:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 8005a2a:	f107 0208 	add.w	r2, r7, #8
 8005a2e:	4413      	add	r3, r2
 8005a30:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005a34:	4619      	mov	r1, r3
 8005a36:	202c      	movs	r0, #44	; 0x2c
 8005a38:	f002 fbbc 	bl	80081b4 <VL53L1_i2c_decode_system_results>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8005a42:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b088      	sub	sp, #32
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 8005a6c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	f7ff ff2a 	bl	80058d8 <VL53L1_get_measurement_results>
 8005a84:	4603      	mov	r3, r0
 8005a86:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8005a88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10c      	bne.n	8005aaa <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8005a96:	4618      	mov	r0, r3
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f000 f85d 	bl	8005b64 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d11f      	bne.n	8005af4 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8005ab4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10e      	bne.n	8005ada <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f001 fe1b 	bl	8007702 <VL53L1_low_power_auto_setup_manual_calibration>
 8005acc:	4603      	mov	r3, r0
 8005ace:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 8005ad8:	e00c      	b.n	8005af4 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d103      	bne.n	8005af4 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8005b08:	2284      	movs	r2, #132	; 0x84
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f004 f810 	bl	8009b32 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8005b12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 f8e6 	bl	8006cec <VL53L1_check_ll_driver_rd_state>
 8005b20:	4603      	mov	r3, r0
 8005b22:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8005b24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3720      	adds	r7, #32
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d107      	bne.n	8005b58 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8005b48:	78fb      	ldrb	r3, [r7, #3]
 8005b4a:	2203      	movs	r2, #3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fc60 	bl	8005414 <VL53L1_init_and_start_range>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8005b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8005b76:	2300      	movs	r3, #0
 8005b78:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	78da      	ldrb	r2, [r3, #3]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	77fb      	strb	r3, [r7, #31]
 8005b90:	e0d0      	b.n	8005d34 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	7ffa      	ldrb	r2, [r7, #31]
 8005b96:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	78db      	ldrb	r3, [r3, #3]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	785b      	ldrb	r3, [r3, #1]
 8005baa:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8005bae:	2b09      	cmp	r3, #9
 8005bb0:	d104      	bne.n	8005bbc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	2213      	movs	r2, #19
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bba:	e007      	b.n	8005bcc <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	785b      	ldrb	r3, [r3, #1]
 8005bc0:	f003 031f 	and.w	r3, r3, #31
 8005bc4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d002      	beq.n	8005bd8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d05d      	beq.n	8005c92 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8005bd6:	e0a7      	b.n	8005d28 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	789b      	ldrb	r3, [r3, #2]
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	d104      	bne.n	8005bea <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	821a      	strh	r2, [r3, #16]
 8005be8:	e00c      	b.n	8005c04 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	789b      	ldrb	r3, [r3, #2]
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d104      	bne.n	8005bfc <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	821a      	strh	r2, [r3, #16]
 8005bfa:	e003      	b.n	8005c04 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	895b      	ldrh	r3, [r3, #10]
 8005c20:	015b      	lsls	r3, r3, #5
 8005c22:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c2a:	d302      	bcc.n	8005c32 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8005c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c30:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8005c46:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	fb02 f303 	mul.w	r3, r2, r3
 8005c50:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c58:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da01      	bge.n	8005c64 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8005c60:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005c64:	12db      	asrs	r3, r3, #11
 8005c66:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	b21a      	sxth	r2, r3
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	621a      	str	r2, [r3, #32]

			break;
 8005c90:	e04a      	b.n	8005d28 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ca8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	8bdb      	ldrh	r3, [r3, #30]
 8005cb6:	015b      	lsls	r3, r3, #5
 8005cb8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc0:	d302      	bcc.n	8005cc8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8005cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005cc6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8005cdc:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cee:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	da01      	bge.n	8005cfa <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8005cf6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8005cfa:	12db      	asrs	r3, r3, #11
 8005cfc:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	b21a      	sxth	r2, r3
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	621a      	str	r2, [r3, #32]

			break;
 8005d26:	bf00      	nop
		}

		pdata++;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	3340      	adds	r3, #64	; 0x40
 8005d2c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	3301      	adds	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	7ffb      	ldrb	r3, [r7, #31]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f67f af2b 	bls.w	8005b92 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	f003 031f 	and.w	r3, r3, #31
 8005d4a:	2b11      	cmp	r3, #17
 8005d4c:	bf8c      	ite	hi
 8005d4e:	2201      	movhi	r2, #1
 8005d50:	2200      	movls	r2, #0
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	d117      	bne.n	8005d88 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8005d58:	4a0e      	ldr	r2, [pc, #56]	; (8005d94 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8005d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	785b      	ldrb	r3, [r3, #1]
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8005d86:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8005d88:	bf00      	nop
 8005d8a:	3724      	adds	r7, #36	; 0x24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bc80      	pop	{r7}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	0002200e 	.word	0x0002200e

08005d98 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	460b      	mov	r3, r1
 8005da2:	607a      	str	r2, [r7, #4]
 8005da4:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005db4:	2b38      	cmp	r3, #56	; 0x38
 8005db6:	f200 8204 	bhi.w	80061c2 <VL53L1_get_tuning_parm+0x42a>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <VL53L1_get_tuning_parm+0x28>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005ea5 	.word	0x08005ea5
 8005dc4:	08005eb3 	.word	0x08005eb3
 8005dc8:	08005ec1 	.word	0x08005ec1
 8005dcc:	08005ecf 	.word	0x08005ecf
 8005dd0:	08005edd 	.word	0x08005edd
 8005dd4:	08005eeb 	.word	0x08005eeb
 8005dd8:	08005ef9 	.word	0x08005ef9
 8005ddc:	08005f07 	.word	0x08005f07
 8005de0:	08005f15 	.word	0x08005f15
 8005de4:	08005f23 	.word	0x08005f23
 8005de8:	08005f31 	.word	0x08005f31
 8005dec:	08005f3f 	.word	0x08005f3f
 8005df0:	08005f4d 	.word	0x08005f4d
 8005df4:	08005f5b 	.word	0x08005f5b
 8005df8:	08005f69 	.word	0x08005f69
 8005dfc:	08005f77 	.word	0x08005f77
 8005e00:	08005f85 	.word	0x08005f85
 8005e04:	08005f93 	.word	0x08005f93
 8005e08:	08005fa1 	.word	0x08005fa1
 8005e0c:	08005faf 	.word	0x08005faf
 8005e10:	08005fbd 	.word	0x08005fbd
 8005e14:	08005fcb 	.word	0x08005fcb
 8005e18:	08005fd9 	.word	0x08005fd9
 8005e1c:	08005fe7 	.word	0x08005fe7
 8005e20:	08005ff5 	.word	0x08005ff5
 8005e24:	08006003 	.word	0x08006003
 8005e28:	08006011 	.word	0x08006011
 8005e2c:	0800601f 	.word	0x0800601f
 8005e30:	0800602d 	.word	0x0800602d
 8005e34:	0800603b 	.word	0x0800603b
 8005e38:	08006049 	.word	0x08006049
 8005e3c:	08006057 	.word	0x08006057
 8005e40:	08006065 	.word	0x08006065
 8005e44:	08006073 	.word	0x08006073
 8005e48:	08006081 	.word	0x08006081
 8005e4c:	0800608f 	.word	0x0800608f
 8005e50:	0800609d 	.word	0x0800609d
 8005e54:	080060ab 	.word	0x080060ab
 8005e58:	080060b9 	.word	0x080060b9
 8005e5c:	080060c7 	.word	0x080060c7
 8005e60:	080060d5 	.word	0x080060d5
 8005e64:	080060e3 	.word	0x080060e3
 8005e68:	080060f1 	.word	0x080060f1
 8005e6c:	080060ff 	.word	0x080060ff
 8005e70:	0800610d 	.word	0x0800610d
 8005e74:	0800611b 	.word	0x0800611b
 8005e78:	08006129 	.word	0x08006129
 8005e7c:	08006137 	.word	0x08006137
 8005e80:	08006145 	.word	0x08006145
 8005e84:	08006153 	.word	0x08006153
 8005e88:	08006161 	.word	0x08006161
 8005e8c:	0800616f 	.word	0x0800616f
 8005e90:	0800617d 	.word	0x0800617d
 8005e94:	0800618b 	.word	0x0800618b
 8005e98:	08006199 	.word	0x08006199
 8005e9c:	080061a7 	.word	0x080061a7
 8005ea0:	080061b5 	.word	0x080061b5

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8005eaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	601a      	str	r2, [r3, #0]
	break;
 8005eb0:	e18e      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8005eb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
	break;
 8005ebe:	e187      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8005ec6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]
	break;
 8005ecc:	e180      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8005ed4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
	break;
 8005eda:	e179      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ee2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	601a      	str	r2, [r3, #0]
	break;
 8005ee8:	e172      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8005ef0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	601a      	str	r2, [r3, #0]
	break;
 8005ef6:	e16b      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8005efe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	601a      	str	r2, [r3, #0]
	break;
 8005f04:	e164      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8005f0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	601a      	str	r2, [r3, #0]
	break;
 8005f12:	e15d      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8005f1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	601a      	str	r2, [r3, #0]
	break;
 8005f20:	e156      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8005f28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	601a      	str	r2, [r3, #0]
	break;
 8005f2e:	e14f      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8005f36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
	break;
 8005f3c:	e148      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8005f44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	601a      	str	r2, [r3, #0]
	break;
 8005f4a:	e141      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8005f52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	break;
 8005f58:	e13a      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8005f60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	601a      	str	r2, [r3, #0]
	break;
 8005f66:	e133      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8005f6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	601a      	str	r2, [r3, #0]
	break;
 8005f74:	e12c      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8005f7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	601a      	str	r2, [r3, #0]
	break;
 8005f82:	e125      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8005f8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	601a      	str	r2, [r3, #0]
	break;
 8005f90:	e11e      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005f98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
	break;
 8005f9e:	e117      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8005fa6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
	break;
 8005fac:	e110      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8005fb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	601a      	str	r2, [r3, #0]
	break;
 8005fba:	e109      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8005fc2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
	break;
 8005fc8:	e102      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 8005fd0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
	break;
 8005fd6:	e0fb      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8005fde:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	601a      	str	r2, [r3, #0]
	break;
 8005fe4:	e0f4      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8005fec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	601a      	str	r2, [r3, #0]
	break;
 8005ff2:	e0ed      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005ffa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	601a      	str	r2, [r3, #0]
	break;
 8006000:	e0e6      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8006008:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	601a      	str	r2, [r3, #0]
	break;
 800600e:	e0df      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8006016:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]
	break;
 800601c:	e0d8      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8006024:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	601a      	str	r2, [r3, #0]
	break;
 800602a:	e0d1      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8006032:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
	break;
 8006038:	e0ca      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8006040:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
	break;
 8006046:	e0c3      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800604e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	601a      	str	r2, [r3, #0]
	break;
 8006054:	e0bc      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800605c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	601a      	str	r2, [r3, #0]
	break;
 8006062:	e0b5      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800606a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
	break;
 8006070:	e0ae      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8006078:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
	break;
 800607e:	e0a7      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8006086:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	601a      	str	r2, [r3, #0]
	break;
 800608c:	e0a0      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8006094:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]
	break;
 800609a:	e099      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 80060a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	601a      	str	r2, [r3, #0]
	break;
 80060a8:	e092      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80060b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	601a      	str	r2, [r3, #0]
	break;
 80060b6:	e08b      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80060be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	601a      	str	r2, [r3, #0]
	break;
 80060c4:	e084      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80060cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	601a      	str	r2, [r3, #0]
	break;
 80060d2:	e07d      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80060da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]
	break;
 80060e0:	e076      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80060e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
	break;
 80060ee:	e06f      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80060f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	601a      	str	r2, [r3, #0]
	break;
 80060fc:	e068      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8006104:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	601a      	str	r2, [r3, #0]
	break;
 800610a:	e061      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 8006112:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	601a      	str	r2, [r3, #0]
	break;
 8006118:	e05a      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 8006120:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	601a      	str	r2, [r3, #0]
	break;
 8006126:	e053      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800612e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	601a      	str	r2, [r3, #0]
	break;
 8006134:	e04c      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800613c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
	break;
 8006142:	e045      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800614a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
	break;
 8006150:	e03e      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006158:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]
	break;
 800615e:	e037      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006166:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
	break;
 800616c:	e030      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006174:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
	break;
 800617a:	e029      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006182:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
	break;
 8006188:	e022      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006190:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	601a      	str	r2, [r3, #0]
	break;
 8006196:	e01b      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800619e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]
	break;
 80061a4:	e014      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	601a      	str	r2, [r3, #0]
	break;
 80061b2:	e00d      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80061ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
	break;
 80061c0:	e006      	b.n	80061d0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80061c8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80061ca:	23fc      	movs	r3, #252	; 0xfc
 80061cc:	75fb      	strb	r3, [r7, #23]
	break;
 80061ce:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80061d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	bc80      	pop	{r7}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop

080061e0 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2208      	movs	r2, #8
 80061f0:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	220b      	movs	r2, #11
 80061f6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80061fe:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006206:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800620e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8006216:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bc80      	pop	{r7}
 8006224:	4770      	bx	lr

08006226 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8006226:	b480      	push	{r7}
 8006228:	b085      	sub	sp, #20
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2212      	movs	r2, #18
 800623c:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	220f      	movs	r2, #15
 8006242:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2202      	movs	r2, #2
 8006248:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8006250:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	220c      	movs	r2, #12
 8006256:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006258:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	bc80      	pop	{r7}
 8006264:	4770      	bx	lr

08006266 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b084      	sub	sp, #16
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	895b      	ldrh	r3, [r3, #10]
 8006278:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	895b      	ldrh	r3, [r3, #10]
 8006296:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2200      	movs	r2, #0
 80062b4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2240      	movs	r2, #64	; 0x40
 80062ba:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10d      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d108      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	2200      	movs	r2, #0
 80062dc:	741a      	strb	r2, [r3, #16]
 80062de:	e002      	b.n	80062e6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2201      	movs	r2, #1
 80062e4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80062e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d114      	bne.n	8006318 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d110      	bne.n	8006318 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6818      	ldr	r0, [r3, #0]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	7d1b      	ldrb	r3, [r3, #20]
 800630a:	f000 ffbb 	bl	8007284 <VL53L1_calc_range_ignore_threshold>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	82da      	strh	r2, [r3, #22]
 8006316:	e002      	b.n	800631e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800631e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800633c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006344:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800634c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006354:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2208      	movs	r2, #8
 800635a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2228      	movs	r2, #40	; 0x28
 8006360:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2209      	movs	r2, #9
 8006366:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8006368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8006376:	b480      	push	{r7}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f248 0203 	movw	r2, #32771	; 0x8003
 8006388:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f248 0201 	movw	r2, #32769	; 0x8001
 8006390:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f248 0241 	movw	r2, #32833	; 0x8041
 8006398:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	220e      	movs	r2, #14
 800639e:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	220a      	movs	r2, #10
 80063a4:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2206      	movs	r2, #6
 80063aa:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	220e      	movs	r2, #14
 80063b0:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220a      	movs	r2, #10
 80063b6:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2206      	movs	r2, #6
 80063bc:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2202      	movs	r2, #2
 80063c2:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2221      	movs	r2, #33	; 0x21
 80063c8:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80063dc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80063e4:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80063ec:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	22c0      	movs	r2, #192	; 0xc0
 80063f2:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	22c0      	movs	r2, #192	; 0xc0
 80063f8:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	22c0      	movs	r2, #192	; 0xc0
 80063fe:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2208      	movs	r2, #8
 8006404:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2210      	movs	r2, #16
 800640a:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800643a:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f248 0230 	movw	r2, #32816	; 0x8030
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800645a:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8006462:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f24f 6218 	movw	r2, #63000	; 0xf618
 800646a:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8006472:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800647a:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006482:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8006484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bc80      	pop	{r7}
 8006490:	4770      	bx	lr

08006492 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006492:	b480      	push	{r7}
 8006494:	b087      	sub	sp, #28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	607a      	str	r2, [r7, #4]
 800649e:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80064aa:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2211      	movs	r2, #17
 80064ec:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2202      	movs	r2, #2
 80064f2:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2202      	movs	r2, #2
 80064fe:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2208      	movs	r2, #8
 8006504:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	22ff      	movs	r2, #255	; 0xff
 8006542:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2220      	movs	r2, #32
 8006576:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	220b      	movs	r2, #11
 800657c:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2202      	movs	r2, #2
 800658a:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	220d      	movs	r2, #13
 8006590:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2200      	movs	r2, #0
 800659e:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2201      	movs	r2, #1
 80065a4:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2200      	movs	r2, #0
 80065aa:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2200      	movs	r2, #0
 80065b0:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 80065b8:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2200      	movs	r2, #0
 80065be:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2238      	movs	r2, #56	; 0x38
 80065c4:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2201      	movs	r2, #1
 80065d0:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	221a      	movs	r2, #26
 80065dc:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	22cc      	movs	r2, #204	; 0xcc
 80065f4:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	220b      	movs	r2, #11
 80065fa:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	22f5      	movs	r2, #245	; 0xf5
 8006606:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2209      	movs	r2, #9
 800660c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800660e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006610:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8006616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006618:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2208      	movs	r2, #8
 8006622:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2278      	movs	r2, #120	; 0x78
 8006628:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2201      	movs	r2, #1
 800663a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2200      	movs	r2, #0
 8006646:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	2200      	movs	r2, #0
 800664c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	220b      	movs	r2, #11
 800665c:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2209      	movs	r2, #9
 8006662:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800667a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	22c7      	movs	r2, #199	; 0xc7
 8006692:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	22ff      	movs	r2, #255	; 0xff
 8006698:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	22db      	movs	r2, #219	; 0xdb
 800669e:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2202      	movs	r2, #2
 80066a4:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2200      	movs	r2, #0
 80066aa:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2201      	movs	r2, #1
 80066b0:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	2201      	movs	r2, #1
 80066b6:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	2221      	movs	r2, #33	; 0x21
 80066bc:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80066be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	371c      	adds	r7, #28
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fed0 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80066f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d121      	bne.n	8006742 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2207      	movs	r2, #7
 8006702:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2205      	movs	r2, #5
 8006708:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2208      	movs	r2, #8
 800671e:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2238      	movs	r2, #56	; 0x38
 8006724:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2207      	movs	r2, #7
 800672a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2205      	movs	r2, #5
 8006730:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006742:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b088      	sub	sp, #32
 8006752:	af02      	add	r7, sp, #8
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	607a      	str	r2, [r7, #4]
 800675a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800675c:	2300      	movs	r3, #0
 800675e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	9301      	str	r3, [sp, #4]
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff fe8f 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 8006774:	4603      	mov	r3, r0
 8006776:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d121      	bne.n	80067c4 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	220f      	movs	r2, #15
 8006784:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	220d      	movs	r2, #13
 800678a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2208      	movs	r2, #8
 80067a0:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	22b8      	movs	r2, #184	; 0xb8
 80067a6:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	220f      	movs	r2, #15
 80067ac:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	220d      	movs	r2, #13
 80067b2:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80067c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af02      	add	r7, sp, #8
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
 80067dc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80067de:	2300      	movs	r3, #0
 80067e0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	9301      	str	r3, [sp, #4]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7ff fe4e 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 80067f6:	4603      	mov	r3, r0
 80067f8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80067fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2202      	movs	r2, #2
 8006806:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	223b      	movs	r2, #59	; 0x3b
 800680c:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800680e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b088      	sub	sp, #32
 800681e:	af02      	add	r7, sp, #8
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006828:	2300      	movs	r3, #0
 800682a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	68b9      	ldr	r1, [r7, #8]
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff fe29 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 8006840:	4603      	mov	r3, r0
 8006842:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006844:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d105      	bne.n	8006858 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2202      	movs	r2, #2
 8006850:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	225b      	movs	r2, #91	; 0x5b
 8006856:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006858:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3718      	adds	r7, #24
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	607a      	str	r2, [r7, #4]
 8006870:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006872:	2300      	movs	r3, #0
 8006874:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	9301      	str	r3, [sp, #4]
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f7ff fe04 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 800688a:	4603      	mov	r3, r0
 800688c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800688e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d11a      	bne.n	80068cc <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2200      	movs	r2, #0
 800689a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	22b1      	movs	r2, #177	; 0xb1
 80068a6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	22d4      	movs	r2, #212	; 0xd4
 80068b2:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80068ba:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	2240      	movs	r2, #64	; 0x40
 80068ca:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80068cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3718      	adds	r7, #24
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af02      	add	r7, sp, #8
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff fee7 	bl	80066cc <VL53L1_preset_mode_standard_ranging_short_range>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d11a      	bne.n	8006940 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2200      	movs	r2, #0
 800690e:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2284      	movs	r2, #132	; 0x84
 800691a:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	22b1      	movs	r2, #177	; 0xb1
 8006926:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800692e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	2240      	movs	r2, #64	; 0x40
 800693e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006940:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
 8006958:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800695a:	2300      	movs	r3, #0
 800695c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f7ff feee 	bl	800674e <VL53L1_preset_mode_standard_ranging_long_range>
 8006972:	4603      	mov	r3, r0
 8006974:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006976:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d11a      	bne.n	80069b4 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	2200      	movs	r2, #0
 8006982:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2297      	movs	r2, #151	; 0x97
 800698e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	22b1      	movs	r2, #177	; 0xb1
 800699a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80069a2:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	2240      	movs	r2, #64	; 0x40
 80069b2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80069b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3718      	adds	r7, #24
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80069ce:	2300      	movs	r3, #0
 80069d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	9301      	str	r3, [sp, #4]
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68b9      	ldr	r1, [r7, #8]
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f7ff ff3f 	bl	8006864 <VL53L1_preset_mode_timed_ranging>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80069ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80069f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	68b8      	ldr	r0, [r7, #8]
 80069f8:	f000 fe6b 	bl	80076d2 <VL53L1_config_low_power_auto_mode>
 80069fc:	4603      	mov	r3, r0
 80069fe:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	f7ff ff53 	bl	80068d8 <VL53L1_preset_mode_timed_ranging_short_range>
 8006a32:	4603      	mov	r3, r0
 8006a34:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	68b8      	ldr	r0, [r7, #8]
 8006a44:	f000 fe45 	bl	80076d2 <VL53L1_config_low_power_auto_mode>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3718      	adds	r7, #24
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}

08006a58 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b088      	sub	sp, #32
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
 8006a64:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f7ff ff67 	bl	800694c <VL53L1_preset_mode_timed_ranging_long_range>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8006a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8006a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	68b8      	ldr	r0, [r7, #8]
 8006a90:	f000 fe1f 	bl	80076d2 <VL53L1_config_low_power_auto_mode>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8006a98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3718      	adds	r7, #24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
 8006ab0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	68b9      	ldr	r1, [r7, #8]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff fce4 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 8006aca:	4603      	mov	r3, r0
 8006acc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d116      	bne.n	8006b04 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	22b1      	movs	r2, #177	; 0xb1
 8006ae6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	22d4      	movs	r2, #212	; 0xd4
 8006af2:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	2210      	movs	r2, #16
 8006b02:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af02      	add	r7, sp, #8
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	6a3b      	ldr	r3, [r7, #32]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f7ff fcae 	bl	8006492 <VL53L1_preset_mode_standard_ranging>
 8006b36:	4603      	mov	r3, r0
 8006b38:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8006b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	2201      	movs	r2, #1
 8006b46:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8006b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	220d      	movs	r2, #13
 8006b74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f640 028e 	movw	r2, #2190	; 0x88e
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b085      	sub	sp, #20
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	332c      	adds	r3, #44	; 0x2c
 8006b9e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	78fa      	ldrb	r2, [r7, #3]
 8006ba4:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	71da      	strb	r2, [r3, #7]

}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
	...

08006bdc <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	332c      	adds	r3, #44	; 0x2c
 8006bf0:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10c      	bne.n	8006c1a <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2203      	movs	r2, #3
 8006c04:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	71da      	strb	r2, [r3, #7]
 8006c18:	e060      	b.n	8006cdc <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	795b      	ldrb	r3, [r3, #5]
 8006c1e:	2bff      	cmp	r3, #255	; 0xff
 8006c20:	d103      	bne.n	8006c2a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2280      	movs	r2, #128	; 0x80
 8006c26:	715a      	strb	r2, [r3, #5]
 8006c28:	e005      	b.n	8006c36 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	795b      	ldrb	r3, [r3, #5]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	799b      	ldrb	r3, [r3, #6]
 8006c3a:	f083 0302 	eor.w	r3, r3, #2
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	791b      	ldrb	r3, [r3, #4]
 8006c48:	3b03      	subs	r3, #3
 8006c4a:	2b05      	cmp	r3, #5
 8006c4c:	d839      	bhi.n	8006cc2 <VL53L1_update_ll_driver_rd_state+0xe6>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <VL53L1_update_ll_driver_rd_state+0x78>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006cc3 	.word	0x08006cc3
 8006c5c:	08006cc3 	.word	0x08006cc3
 8006c60:	08006c97 	.word	0x08006c97
 8006c64:	08006ca5 	.word	0x08006ca5
 8006c68:	08006cad 	.word	0x08006cad

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	dd03      	ble.n	8006c82 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2206      	movs	r2, #6
 8006c7e:	711a      	strb	r2, [r3, #4]
 8006c80:	e002      	b.n	8006c88 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2208      	movs	r2, #8
 8006c86:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	71da      	strb	r2, [r3, #7]

		break;
 8006c94:	e022      	b.n	8006cdc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006ca2:	e01b      	b.n	8006cdc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006caa:	e017      	b.n	8006cdc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	79db      	ldrb	r3, [r3, #7]
 8006cb0:	f083 0301 	eor.w	r3, r3, #1
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8006cc0:	e00c      	b.n	8006cdc <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2202      	movs	r2, #2
 8006cd2:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	71da      	strb	r2, [r3, #7]

		break;
 8006cda:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006cdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop

08006cec <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b089      	sub	sp, #36	; 0x24
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	332c      	adds	r3, #44	; 0x2c
 8006d00:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8006d08:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8006d12:	2300      	movs	r3, #0
 8006d14:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	78db      	ldrb	r3, [r3, #3]
 8006d24:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8006d2a:	111b      	asrs	r3, r3, #4
 8006d2c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d017      	beq.n	8006d72 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	791b      	ldrb	r3, [r3, #4]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d105      	bne.n	8006d56 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b12      	cmp	r3, #18
 8006d4e:	d010      	beq.n	8006d72 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8006d50:	23ef      	movs	r3, #239	; 0xef
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e00d      	b.n	8006d72 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	795b      	ldrb	r3, [r3, #5]
 8006d5a:	7bba      	ldrb	r2, [r7, #14]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d001      	beq.n	8006d64 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8006d60:	23ee      	movs	r3, #238	; 0xee
 8006d62:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	799b      	ldrb	r3, [r3, #6]
 8006d68:	7b7a      	ldrb	r2, [r7, #13]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d001      	beq.n	8006d72 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8006d6e:	23ed      	movs	r3, #237	; 0xed
 8006d70:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8006d72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3724      	adds	r7, #36	; 0x24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr

08006d80 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	332c      	adds	r3, #44	; 0x2c
 8006d94:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8006d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10c      	bne.n	8006dbe <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2203      	movs	r2, #3
 8006da8:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2202      	movs	r2, #2
 8006db4:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	70da      	strb	r2, [r3, #3]
 8006dbc:	e03e      	b.n	8006e3c <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2bff      	cmp	r3, #255	; 0xff
 8006dc4:	d103      	bne.n	8006dce <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2280      	movs	r2, #128	; 0x80
 8006dca:	705a      	strb	r2, [r3, #1]
 8006dcc:	e005      	b.n	8006dda <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	785b      	ldrb	r3, [r3, #1]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	789b      	ldrb	r3, [r3, #2]
 8006dde:	f083 0302 	eor.w	r3, r3, #2
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d002      	beq.n	8006df6 <VL53L1_update_ll_driver_cfg_state+0x76>
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d00e      	beq.n	8006e12 <VL53L1_update_ll_driver_cfg_state+0x92>
 8006df4:	e015      	b.n	8006e22 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	78db      	ldrb	r3, [r3, #3]
 8006dfa:	f083 0301 	eor.w	r3, r3, #1
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2201      	movs	r2, #1
 8006e08:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	701a      	strb	r2, [r3, #0]
		break;
 8006e10:	e014      	b.n	8006e3c <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	78db      	ldrb	r3, [r3, #3]
 8006e16:	f083 0301 	eor.w	r3, r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	70da      	strb	r2, [r3, #3]

		break;
 8006e20:	e00c      	b.n	8006e3c <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2203      	movs	r2, #3
 8006e26:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2202      	movs	r2, #2
 8006e32:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	70da      	strb	r2, [r3, #3]

		break;
 8006e3a:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8006e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
 8006e52:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7c1a      	ldrb	r2, [r3, #16]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7c52      	ldrb	r2, [r2, #17]
 8006e64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	3302      	adds	r3, #2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	7c92      	ldrb	r2, [r2, #18]
 8006e6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	3303      	adds	r3, #3
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7cd2      	ldrb	r2, [r2, #19]
 8006e78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	7d12      	ldrb	r2, [r2, #20]
 8006e82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	3305      	adds	r3, #5
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7d52      	ldrb	r2, [r2, #21]
 8006e8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	3306      	adds	r3, #6
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	7d92      	ldrb	r2, [r2, #22]
 8006e96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	3307      	adds	r3, #7
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7dd2      	ldrb	r2, [r2, #23]
 8006ea0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	7e12      	ldrb	r2, [r2, #24]
 8006eaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	3309      	adds	r3, #9
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	7e52      	ldrb	r2, [r2, #25]
 8006eb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	330a      	adds	r3, #10
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	7e92      	ldrb	r2, [r2, #26]
 8006ebe:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	330b      	adds	r3, #11
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	7ed2      	ldrb	r2, [r2, #27]
 8006ec8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	7f12      	ldrb	r2, [r2, #28]
 8006ed2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	330d      	adds	r3, #13
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	7f52      	ldrb	r2, [r2, #29]
 8006edc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	330e      	adds	r3, #14
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	7f92      	ldrb	r2, [r2, #30]
 8006ee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	330f      	adds	r3, #15
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	7fd2      	ldrb	r2, [r2, #31]
 8006ef0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	3310      	adds	r3, #16
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	3311      	adds	r3, #17
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8006f08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	3312      	adds	r3, #18
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8006f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	3313      	adds	r3, #19
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8006f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	3314      	adds	r3, #20
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8006f2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	3315      	adds	r3, #21
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8006f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	3316      	adds	r3, #22
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006f44:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	3317      	adds	r3, #23
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	3318      	adds	r3, #24
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8006f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	3319      	adds	r3, #25
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8006f68:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	331a      	adds	r3, #26
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8006f74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	331b      	adds	r3, #27
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8006f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	331c      	adds	r3, #28
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006f8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	331d      	adds	r3, #29
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	331e      	adds	r3, #30
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006fa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	331f      	adds	r3, #31
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8006fb0:	701a      	strb	r2, [r3, #0]
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bc80      	pop	{r7}
 8006fba:	4770      	bx	lr

08006fbc <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	603a      	str	r2, [r7, #0]
 8006fc6:	80fb      	strh	r3, [r7, #6]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8006fd4:	88fb      	ldrh	r3, [r7, #6]
 8006fd6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8006fd8:	2300      	movs	r3, #0
 8006fda:	81fb      	strh	r3, [r7, #14]
 8006fdc:	e00e      	b.n	8006ffc <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8006fde:	88ba      	ldrh	r2, [r7, #4]
 8006fe0:	89fb      	ldrh	r3, [r7, #14]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	4413      	add	r3, r2
 8006fea:	89ba      	ldrh	r2, [r7, #12]
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8006ff0:	89bb      	ldrh	r3, [r7, #12]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8006ff6:	89fb      	ldrh	r3, [r7, #14]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	81fb      	strh	r3, [r7, #14]
 8006ffc:	89fa      	ldrh	r2, [r7, #14]
 8006ffe:	88bb      	ldrh	r3, [r7, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	d3ec      	bcc.n	8006fde <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8007004:	bf00      	nop
 8007006:	bf00      	nop
 8007008:	3714      	adds	r7, #20
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr

08007010 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	6039      	str	r1, [r7, #0]
 800701a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800701c:	2300      	movs	r3, #0
 800701e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8007020:	e00a      	b.n	8007038 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8007022:	89fb      	ldrh	r3, [r7, #14]
 8007024:	021b      	lsls	r3, r3, #8
 8007026:	b21a      	sxth	r2, r3
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	1c59      	adds	r1, r3, #1
 800702c:	6039      	str	r1, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b21b      	sxth	r3, r3
 8007032:	4313      	orrs	r3, r2
 8007034:	b21b      	sxth	r3, r3
 8007036:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8007038:	88fb      	ldrh	r3, [r7, #6]
 800703a:	1e5a      	subs	r2, r3, #1
 800703c:	80fa      	strh	r2, [r7, #6]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ef      	bne.n	8007022 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8007042:	89fb      	ldrh	r3, [r7, #14]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bc80      	pop	{r7}
 800704c:	4770      	bx	lr

0800704e <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	4603      	mov	r3, r0
 8007056:	603a      	str	r2, [r7, #0]
 8007058:	80fb      	strh	r3, [r7, #6]
 800705a:	460b      	mov	r3, r1
 800705c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800706a:	2300      	movs	r3, #0
 800706c:	81fb      	strh	r3, [r7, #14]
 800706e:	e00f      	b.n	8007090 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007070:	88ba      	ldrh	r2, [r7, #4]
 8007072:	89fb      	ldrh	r3, [r7, #14]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	3b01      	subs	r3, #1
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	4413      	add	r3, r2
 800707c:	89ba      	ldrh	r2, [r7, #12]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007082:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007086:	121b      	asrs	r3, r3, #8
 8007088:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800708a:	89fb      	ldrh	r3, [r7, #14]
 800708c:	3301      	adds	r3, #1
 800708e:	81fb      	strh	r3, [r7, #14]
 8007090:	89fa      	ldrh	r2, [r7, #14]
 8007092:	88bb      	ldrh	r3, [r7, #4]
 8007094:	429a      	cmp	r2, r3
 8007096:	d3eb      	bcc.n	8007070 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	bc80      	pop	{r7}
 80070a2:	4770      	bx	lr

080070a4 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80070b0:	2300      	movs	r3, #0
 80070b2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	da0e      	bge.n	80070dc <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80070be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070c2:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80070c4:	e00a      	b.n	80070dc <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80070c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	b21a      	sxth	r2, r3
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	1c59      	adds	r1, r3, #1
 80070d2:	6039      	str	r1, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80070dc:	88fb      	ldrh	r3, [r7, #6]
 80070de:	1e5a      	subs	r2, r3, #1
 80070e0:	80fa      	strh	r2, [r7, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1ef      	bne.n	80070c6 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80070e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	460b      	mov	r3, r1
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8007102:	2300      	movs	r3, #0
 8007104:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800710e:	2300      	movs	r3, #0
 8007110:	82fb      	strh	r3, [r7, #22]
 8007112:	e00e      	b.n	8007132 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8007114:	897a      	ldrh	r2, [r7, #10]
 8007116:	8afb      	ldrh	r3, [r7, #22]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	3b01      	subs	r3, #1
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	4413      	add	r3, r2
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800712c:	8afb      	ldrh	r3, [r7, #22]
 800712e:	3301      	adds	r3, #1
 8007130:	82fb      	strh	r3, [r7, #22]
 8007132:	8afa      	ldrh	r2, [r7, #22]
 8007134:	897b      	ldrh	r3, [r7, #10]
 8007136:	429a      	cmp	r2, r3
 8007138:	d3ec      	bcc.n	8007114 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800713a:	bf00      	nop
 800713c:	bf00      	nop
 800713e:	371c      	adds	r7, #28
 8007140:	46bd      	mov	sp, r7
 8007142:	bc80      	pop	{r7}
 8007144:	4770      	bx	lr

08007146 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8007146:	b480      	push	{r7}
 8007148:	b085      	sub	sp, #20
 800714a:	af00      	add	r7, sp, #0
 800714c:	4603      	mov	r3, r0
 800714e:	6039      	str	r1, [r7, #0]
 8007150:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8007156:	e007      	b.n	8007168 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	021a      	lsls	r2, r3, #8
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	1c59      	adds	r1, r3, #1
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8007168:	88fb      	ldrh	r3, [r7, #6]
 800716a:	1e5a      	subs	r2, r3, #1
 800716c:	80fa      	strh	r2, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1f2      	bne.n	8007158 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8007172:	68fb      	ldr	r3, [r7, #12]
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	bc80      	pop	{r7}
 800717c:	4770      	bx	lr

0800717e <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800717e:	b480      	push	{r7}
 8007180:	b085      	sub	sp, #20
 8007182:	af00      	add	r7, sp, #0
 8007184:	4603      	mov	r3, r0
 8007186:	6039      	str	r1, [r7, #0]
 8007188:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	b25b      	sxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	da0b      	bge.n	80071b0 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8007198:	f04f 33ff 	mov.w	r3, #4294967295
 800719c:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800719e:	e007      	b.n	80071b0 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	021a      	lsls	r2, r3, #8
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	1c59      	adds	r1, r3, #1
 80071a8:	6039      	str	r1, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	1e5a      	subs	r2, r3, #1
 80071b4:	80fa      	strh	r2, [r7, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1f2      	bne.n	80071a0 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b084      	sub	sp, #16
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
 80071ce:	460b      	mov	r3, r1
 80071d0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	78fa      	ldrb	r2, [r7, #3]
 80071de:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 80071e8:	461a      	mov	r2, r3
 80071ea:	2183      	movs	r1, #131	; 0x83
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 fd01 	bl	8008bf4 <VL53L1_WrByte>
 80071f2:	4603      	mov	r3, r0
 80071f4:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 80071f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800720e:	2101      	movs	r1, #1
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f7ff ffd8 	bl	80071c6 <VL53L1_set_powerforce_register>
 8007216:	4603      	mov	r3, r0
 8007218:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b086      	sub	sp, #24
 800722a:	af00      	add	r7, sp, #0
 800722c:	4603      	mov	r3, r0
 800722e:	460a      	mov	r2, r1
 8007230:	80fb      	strh	r3, [r7, #6]
 8007232:	4613      	mov	r3, r2
 8007234:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8007236:	2300      	movs	r3, #0
 8007238:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800723e:	2300      	movs	r3, #0
 8007240:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 faa0 	bl	800778a <VL53L1_calc_pll_period_us>
 800724a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800724c:	797b      	ldrb	r3, [r7, #5]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 faae 	bl	80077b0 <VL53L1_decode_vcsel_period>
 8007254:	4603      	mov	r3, r0
 8007256:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	4613      	mov	r3, r2
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	4413      	add	r3, r2
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800726a:	7cfa      	ldrb	r2, [r7, #19]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	099b      	lsrs	r3, r3, #6
 8007278:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800727a:	68fb      	ldr	r3, [r7, #12]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8007284:	b480      	push	{r7}
 8007286:	b089      	sub	sp, #36	; 0x24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	4608      	mov	r0, r1
 800728e:	4611      	mov	r1, r2
 8007290:	461a      	mov	r2, r3
 8007292:	4603      	mov	r3, r0
 8007294:	817b      	strh	r3, [r7, #10]
 8007296:	460b      	mov	r3, r1
 8007298:	813b      	strh	r3, [r7, #8]
 800729a:	4613      	mov	r3, r2
 800729c:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80072a6:	2300      	movs	r3, #0
 80072a8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80072aa:	2300      	movs	r3, #0
 80072ac:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80072ae:	2300      	movs	r3, #0
 80072b0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	4a23      	ldr	r2, [pc, #140]	; (8007344 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80072b8:	fb82 1203 	smull	r1, r2, r2, r3
 80072bc:	1192      	asrs	r2, r2, #6
 80072be:	17db      	asrs	r3, r3, #31
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 80072c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da03      	bge.n	80072d4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80072cc:	897b      	ldrh	r3, [r7, #10]
 80072ce:	425b      	negs	r3, r3
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 80072d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	da03      	bge.n	80072e4 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80072dc:	893b      	ldrh	r3, [r7, #8]
 80072de:	425b      	negs	r3, r3
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80072e4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80072e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80072ec:	4413      	add	r3, r2
 80072ee:	015b      	lsls	r3, r3, #5
 80072f0:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4a13      	ldr	r2, [pc, #76]	; (8007344 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80072f6:	fb82 1203 	smull	r1, r2, r2, r3
 80072fa:	1192      	asrs	r2, r2, #6
 80072fc:	17db      	asrs	r3, r3, #31
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	4413      	add	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800730a:	79fa      	ldrb	r2, [r7, #7]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	fb02 f303 	mul.w	r3, r2, r3
 8007312:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	3310      	adds	r3, #16
 8007318:	2b00      	cmp	r3, #0
 800731a:	da00      	bge.n	800731e <VL53L1_calc_range_ignore_threshold+0x9a>
 800731c:	331f      	adds	r3, #31
 800731e:	115b      	asrs	r3, r3, #5
 8007320:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007328:	db03      	blt.n	8007332 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800732a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800732e:	83fb      	strh	r3, [r7, #30]
 8007330:	e001      	b.n	8007336 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8007336:	8bfb      	ldrh	r3, [r7, #30]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3724      	adds	r7, #36	; 0x24
 800733c:	46bd      	mov	sp, r7
 800733e:	bc80      	pop	{r7}
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	10624dd3 	.word	0x10624dd3

08007348 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	031a      	lsls	r2, r3, #12
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	441a      	add	r2, r3
	timeout_mclks   =
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8007368:	68fb      	ldr	r3, [r7, #12]
}
 800736a:	4618      	mov	r0, r3
 800736c:	3714      	adds	r7, #20
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr

08007374 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8007386:	6839      	ldr	r1, [r7, #0]
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7ff ffdd 	bl	8007348 <VL53L1_calc_timeout_mclks>
 800738e:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f860 	bl	8007456 <VL53L1_encode_timeout>
 8007396:	4603      	mov	r3, r0
 8007398:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800739a:	897b      	ldrh	r3, [r7, #10]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80073a4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80073a8:	b087      	sub	sp, #28
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80073b0:	2100      	movs	r1, #0
 80073b2:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80073b4:	f04f 0000 	mov.w	r0, #0
 80073b8:	f04f 0100 	mov.w	r1, #0
 80073bc:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	2000      	movs	r0, #0
 80073c4:	4688      	mov	r8, r1
 80073c6:	4681      	mov	r9, r0
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	2000      	movs	r0, #0
 80073cc:	460c      	mov	r4, r1
 80073ce:	4605      	mov	r5, r0
 80073d0:	fb04 f009 	mul.w	r0, r4, r9
 80073d4:	fb08 f105 	mul.w	r1, r8, r5
 80073d8:	4401      	add	r1, r0
 80073da:	fba8 2304 	umull	r2, r3, r8, r4
 80073de:	4419      	add	r1, r3
 80073e0:	460b      	mov	r3, r1
 80073e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80073e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80073ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073ee:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 80073f2:	f143 0b00 	adc.w	fp, r3, #0
 80073f6:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80073fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	0b02      	lsrs	r2, r0, #12
 8007408:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800740c:	0b0b      	lsrs	r3, r1, #12
 800740e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8007416:	697b      	ldr	r3, [r7, #20]
}
 8007418:	4618      	mov	r0, r3
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8007422:	4770      	bx	lr

08007424 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8007438:	88fb      	ldrh	r3, [r7, #6]
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f836 	bl	80074ac <VL53L1_decode_timeout>
 8007440:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8007442:	6839      	ldr	r1, [r7, #0]
 8007444:	68f8      	ldr	r0, [r7, #12]
 8007446:	f7ff ffad 	bl	80073a4 <VL53L1_calc_timeout_us>
 800744a:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800744c:	68bb      	ldr	r3, [r7, #8]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d017      	beq.n	80074a0 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3b01      	subs	r3, #1
 8007474:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007476:	e005      	b.n	8007484 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	085b      	lsrs	r3, r3, #1
 800747c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800747e:	89fb      	ldrh	r3, [r7, #14]
 8007480:	3301      	adds	r3, #1
 8007482:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800748a:	2b00      	cmp	r3, #0
 800748c:	d1f4      	bne.n	8007478 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	b29b      	uxth	r3, r3
 8007498:	b2db      	uxtb	r3, r3
 800749a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800749c:	4413      	add	r3, r2
 800749e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80074a0:	8afb      	ldrh	r3, [r7, #22]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bc80      	pop	{r7}
 80074aa:	4770      	bx	lr

080074ac <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	4603      	mov	r3, r0
 80074b4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	0a12      	lsrs	r2, r2, #8
 80074c2:	b292      	uxth	r2, r2
 80074c4:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80074ca:	68fb      	ldr	r3, [r7, #12]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr

080074d6 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b088      	sub	sp, #32
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80074e4:	2300      	movs	r3, #0
 80074e6:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80074f4:	887b      	ldrh	r3, [r7, #2]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d102      	bne.n	8007500 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80074fa:	23f1      	movs	r3, #241	; 0xf1
 80074fc:	77fb      	strb	r3, [r7, #31]
 80074fe:	e05d      	b.n	80075bc <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	799a      	ldrb	r2, [r3, #6]
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fe8c 	bl	8007226 <VL53L1_calc_macro_period_us>
 800750e:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8007510:	6979      	ldr	r1, [r7, #20]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f7ff ff18 	bl	8007348 <VL53L1_calc_timeout_mclks>
 8007518:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2bff      	cmp	r3, #255	; 0xff
 800751e:	d901      	bls.n	8007524 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8007520:	23ff      	movs	r3, #255	; 0xff
 8007522:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800752c:	6979      	ldr	r1, [r7, #20]
 800752e:	68b8      	ldr	r0, [r7, #8]
 8007530:	f7ff ff20 	bl	8007374 <VL53L1_calc_encoded_timeout>
 8007534:	4603      	mov	r3, r0
 8007536:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007538:	8a7b      	ldrh	r3, [r7, #18]
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b29b      	uxth	r3, r3
 800753e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007544:	8a7b      	ldrh	r3, [r7, #18]
 8007546:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8007548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754a:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800754c:	6979      	ldr	r1, [r7, #20]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ff10 	bl	8007374 <VL53L1_calc_encoded_timeout>
 8007554:	4603      	mov	r3, r0
 8007556:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007558:	8a7b      	ldrh	r3, [r7, #18]
 800755a:	0a1b      	lsrs	r3, r3, #8
 800755c:	b29b      	uxth	r3, r3
 800755e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8007560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007562:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007564:	8a7b      	ldrh	r3, [r7, #18]
 8007566:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8007568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756a:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800756c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800756e:	7a5a      	ldrb	r2, [r3, #9]
 8007570:	887b      	ldrh	r3, [r7, #2]
 8007572:	4611      	mov	r1, r2
 8007574:	4618      	mov	r0, r3
 8007576:	f7ff fe56 	bl	8007226 <VL53L1_calc_macro_period_us>
 800757a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	68b8      	ldr	r0, [r7, #8]
 8007580:	f7ff fef8 	bl	8007374 <VL53L1_calc_encoded_timeout>
 8007584:	4603      	mov	r3, r0
 8007586:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8007588:	8a7b      	ldrh	r3, [r7, #18]
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	b29b      	uxth	r3, r3
 800758e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8007594:	8a7b      	ldrh	r3, [r7, #18]
 8007596:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800759c:	6979      	ldr	r1, [r7, #20]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fee8 	bl	8007374 <VL53L1_calc_encoded_timeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80075a8:	8a7b      	ldrh	r3, [r7, #18]
 80075aa:	0a1b      	lsrs	r3, r3, #8
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80075b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b2:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80075b4:	8a7b      	ldrh	r3, [r7, #18]
 80075b6:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80075bc:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	603a      	str	r2, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
 80075d4:	460b      	mov	r3, r1
 80075d6:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b07      	cmp	r3, #7
 80075dc:	d90a      	bls.n	80075f4 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80075de:	79bb      	ldrb	r3, [r7, #6]
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	3b71      	subs	r3, #113	; 0x71
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80075f2:	e00a      	b.n	800760a <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80075f4:	79bb      	ldrb	r3, [r7, #6]
 80075f6:	f1c3 030f 	rsb	r3, r3, #15
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	4413      	add	r3, r2
 8007604:	b2da      	uxtb	r2, r3
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	701a      	strb	r2, [r3, #0]
}
 800760a:	bf00      	nop
 800760c:	370c      	adds	r7, #12
 800760e:	46bd      	mov	sp, r7
 8007610:	bc80      	pop	{r7}
 8007612:	4770      	bx	lr

08007614 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	091b      	lsrs	r3, r3, #4
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	b2da      	uxtb	r2, r3
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	701a      	strb	r2, [r3, #0]

}
 8007638:	bf00      	nop
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	bc80      	pop	{r7}
 8007640:	4770      	bx	lr

08007642 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	4603      	mov	r3, r0
 800764a:	603a      	str	r2, [r7, #0]
 800764c:	71fb      	strb	r3, [r7, #7]
 800764e:	460b      	mov	r3, r1
 8007650:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8007652:	79bb      	ldrb	r3, [r7, #6]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	b2da      	uxtb	r2, r3
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	4413      	add	r3, r2
 800765c:	b2da      	uxtb	r2, r3
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	701a      	strb	r2, [r3, #0]

}
 8007662:	bf00      	nop
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8007674:	2300      	movs	r3, #0
 8007676:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2203      	movs	r2, #3
 8007680:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	2200      	movs	r2, #0
 8007698:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80076c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bc80      	pop	{r7}
 80076d0:	4770      	bx	lr

080076d2 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	229b      	movs	r2, #155	; 0x9b
 80076f2:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 80076f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bc80      	pop	{r7}
 8007700:	4770      	bx	lr

08007702 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800770e:	2300      	movs	r3, #0
 8007710:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	b2da      	uxtb	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8007752:	4413      	add	r3, r2
 8007754:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800777c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	bc80      	pop	{r7}
 8007788:	4770      	bx	lr

0800778a <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800778a:	b480      	push	{r7}
 800778c:	b085      	sub	sp, #20
 800778e:	af00      	add	r7, sp, #0
 8007790:	4603      	mov	r3, r0
 8007792:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8007798:	88fb      	ldrh	r3, [r7, #6]
 800779a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800779e:	fb92 f3f3 	sdiv	r3, r2, r3
 80077a2:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80077a4:	68fb      	ldr	r3, [r7, #12]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bc80      	pop	{r7}
 80077ae:	4770      	bx	lr

080077b0 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	4603      	mov	r3, r0
 80077b8:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	3301      	adds	r3, #1
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	005b      	lsls	r3, r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	4603      	mov	r3, r0
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80077e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	da10      	bge.n	800780c <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80077ea:	7bfb      	ldrb	r3, [r7, #15]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3308      	adds	r3, #8
 80077f8:	b2da      	uxtb	r2, r3
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	3b80      	subs	r3, #128	; 0x80
 8007802:	10db      	asrs	r3, r3, #3
 8007804:	b2da      	uxtb	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800780a:	e00c      	b.n	8007826 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	b2da      	uxtb	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800781e:	10db      	asrs	r3, r3, #3
 8007820:	b2da      	uxtb	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	701a      	strb	r2, [r3, #0]
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	460b      	mov	r3, r1
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007842:	897b      	ldrh	r3, [r7, #10]
 8007844:	2b0a      	cmp	r3, #10
 8007846:	d802      	bhi.n	800784e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007848:	f06f 0309 	mvn.w	r3, #9
 800784c:	e047      	b.n	80078de <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007856:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8007864:	f002 020f 	and.w	r2, r2, #15
 8007868:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800786a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8007874:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007878:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800787a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8007884:	f002 0203 	and.w	r2, r2, #3
 8007888:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800788a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8007894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007898:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800789a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	88d8      	ldrh	r0, [r3, #6]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3305      	adds	r3, #5
 80078a4:	461a      	mov	r2, r3
 80078a6:	2102      	movs	r1, #2
 80078a8:	f7ff fb88 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80078b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80078be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 80078c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80078cc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80078ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 80078d8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80078da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b086      	sub	sp, #24
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	4603      	mov	r3, r0
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
 80078f2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80078f8:	89fb      	ldrh	r3, [r7, #14]
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	d802      	bhi.n	8007904 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80078fe:	f06f 0309 	mvn.w	r3, #9
 8007902:	e046      	b.n	8007992 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800790c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	3301      	adds	r3, #1
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	3302      	adds	r3, #2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800792c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	3303      	adds	r3, #3
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	3304      	adds	r3, #4
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3305      	adds	r3, #5
 8007956:	4619      	mov	r1, r3
 8007958:	2002      	movs	r0, #2
 800795a:	f7ff fb59 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 800795e:	4603      	mov	r3, r0
 8007960:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	79da      	ldrb	r2, [r3, #7]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	7a1a      	ldrb	r2, [r3, #8]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3309      	adds	r3, #9
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007980:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	7a9a      	ldrb	r2, [r3, #10]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800798e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007992:	4618      	mov	r0, r3
 8007994:	3718      	adds	r7, #24
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}

0800799a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b086      	sub	sp, #24
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80079a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d108      	bne.n	80079c2 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80079b0:	f107 020c 	add.w	r2, r7, #12
 80079b4:	230b      	movs	r3, #11
 80079b6:	2101      	movs	r1, #1
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f8e5 	bl	8008b88 <VL53L1_ReadMulti>
 80079be:	4603      	mov	r3, r0
 80079c0:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80079c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d108      	bne.n	80079dc <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	4619      	mov	r1, r3
 80079d2:	200b      	movs	r0, #11
 80079d4:	f7ff ff87 	bl	80078e6 <VL53L1_i2c_decode_static_nvm_managed>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80079dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	460b      	mov	r3, r1
 80079f2:	607a      	str	r2, [r7, #4]
 80079f4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80079fa:	897b      	ldrh	r3, [r7, #10]
 80079fc:	2b16      	cmp	r3, #22
 80079fe:	d802      	bhi.n	8007a06 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007a00:	f06f 0309 	mvn.w	r3, #9
 8007a04:	e076      	b.n	8007af4 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007a16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007a20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007a2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8007a34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8007a3e:	f002 020f 	and.w	r2, r2, #15
 8007a42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007a44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8007a4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8007a58:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007a5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007a5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8007a68:	f002 0203 	and.w	r2, r2, #3
 8007a6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007a6e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	8958      	ldrh	r0, [r3, #10]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3309      	adds	r3, #9
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2102      	movs	r1, #2
 8007a7c:	f7ff fa9e 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	330b      	adds	r3, #11
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2102      	movs	r1, #2
 8007a8e:	f7ff fade 	bl	800704e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	330d      	adds	r3, #13
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	2102      	movs	r1, #2
 8007aa0:	f7ff fad5 	bl	800704e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8a18      	ldrh	r0, [r3, #16]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	330f      	adds	r3, #15
 8007aac:	461a      	mov	r2, r3
 8007aae:	2102      	movs	r1, #2
 8007ab0:	f7ff fa84 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8007aba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007abe:	b218      	sxth	r0, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3311      	adds	r3, #17
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	2102      	movs	r1, #2
 8007ac8:	f7ff fac1 	bl	800704e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3313      	adds	r3, #19
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2102      	movs	r1, #2
 8007ada:	f7ff fab8 	bl	800704e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3315      	adds	r3, #21
 8007ae8:	461a      	mov	r2, r3
 8007aea:	2102      	movs	r1, #2
 8007aec:	f7ff faaf 	bl	800704e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8007af0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
 8007b08:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8007b0e:	89fb      	ldrh	r3, [r7, #14]
 8007b10:	2b16      	cmp	r3, #22
 8007b12:	d802      	bhi.n	8007b1a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007b14:	f06f 0309 	mvn.w	r3, #9
 8007b18:	e079      	b.n	8007c0e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	785a      	ldrb	r2, [r3, #1]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	789a      	ldrb	r2, [r3, #2]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	78da      	ldrb	r2, [r3, #3]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	791a      	ldrb	r2, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	3305      	adds	r3, #5
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	799a      	ldrb	r2, [r3, #6]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	3307      	adds	r3, #7
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b64:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	3309      	adds	r3, #9
 8007b7e:	4619      	mov	r1, r3
 8007b80:	2002      	movs	r0, #2
 8007b82:	f7ff fa45 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	330b      	adds	r3, #11
 8007b92:	4619      	mov	r1, r3
 8007b94:	2002      	movs	r0, #2
 8007b96:	f7ff fa85 	bl	80070a4 <VL53L1_i2c_decode_int16_t>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	330d      	adds	r3, #13
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	2002      	movs	r0, #2
 8007baa:	f7ff fa7b 	bl	80070a4 <VL53L1_i2c_decode_int16_t>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	330f      	adds	r3, #15
 8007bba:	4619      	mov	r1, r3
 8007bbc:	2002      	movs	r0, #2
 8007bbe:	f7ff fa27 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	3311      	adds	r3, #17
 8007bce:	4619      	mov	r1, r3
 8007bd0:	2002      	movs	r0, #2
 8007bd2:	f7ff fa67 	bl	80070a4 <VL53L1_i2c_decode_int16_t>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bdc:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3313      	adds	r3, #19
 8007be6:	4619      	mov	r1, r3
 8007be8:	2002      	movs	r0, #2
 8007bea:	f7ff fa5b 	bl	80070a4 <VL53L1_i2c_decode_int16_t>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	3315      	adds	r3, #21
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	2002      	movs	r0, #2
 8007bfe:	f7ff fa51 	bl	80070a4 <VL53L1_i2c_decode_int16_t>
 8007c02:	4603      	mov	r3, r0
 8007c04:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8007c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b088      	sub	sp, #32
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007c20:	2300      	movs	r3, #0
 8007c22:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8007c24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d108      	bne.n	8007c3e <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8007c2c:	f107 0208 	add.w	r2, r7, #8
 8007c30:	2317      	movs	r3, #23
 8007c32:	210d      	movs	r1, #13
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 ffa7 	bl	8008b88 <VL53L1_ReadMulti>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8007c3e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d108      	bne.n	8007c58 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8007c46:	f107 0308 	add.w	r3, r7, #8
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	2017      	movs	r0, #23
 8007c50:	f7ff ff54 	bl	8007afc <VL53L1_i2c_decode_customer_nvm_managed>
 8007c54:	4603      	mov	r3, r0
 8007c56:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8007c58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3720      	adds	r7, #32
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007c72:	2300      	movs	r3, #0
 8007c74:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	2b1f      	cmp	r3, #31
 8007c7a:	d802      	bhi.n	8007c82 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007c7c:	f06f 0309 	mvn.w	r3, #9
 8007c80:	e0cf      	b.n	8007e22 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	881b      	ldrh	r3, [r3, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	2102      	movs	r1, #2
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff f996 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8007c98:	f002 0201 	and.w	r2, r2, #1
 8007c9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007c9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8007ca8:	f002 020f 	and.w	r2, r2, #15
 8007cac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007cae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8007cb8:	f002 020f 	and.w	r2, r2, #15
 8007cbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007cbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8007cc8:	f002 021f 	and.w	r2, r2, #31
 8007ccc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8007cce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8007cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8007ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007cee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8007cf8:	f002 0201 	and.w	r2, r2, #1
 8007cfc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8007cfe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8007d08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8007d12:	f002 0201 	and.w	r2, r2, #1
 8007d16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8007d18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8007d22:	f002 0203 	and.w	r2, r2, #3
 8007d26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007d28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8007d32:	f002 021f 	and.w	r2, r2, #31
 8007d36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8007d38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8007d42:	f002 0203 	and.w	r2, r2, #3
 8007d46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8007d48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8007d52:	f002 0203 	and.w	r2, r2, #3
 8007d56:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8007d58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8007d62:	f002 0207 	and.w	r2, r2, #7
 8007d66:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8007d68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8007d72:	f002 021f 	and.w	r2, r2, #31
 8007d76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8007d78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8007d82:	f002 0201 	and.w	r2, r2, #1
 8007d86:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8007d88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007d92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007d9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007da6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007db0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8007dba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8007dc4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8b18      	ldrh	r0, [r3, #24]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3318      	adds	r3, #24
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	f7ff f8f3 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8007dde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8007de8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8007df2:	f002 020f 	and.w	r2, r2, #15
 8007df6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8007df8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8007e02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8007e0c:	f002 020f 	and.w	r2, r2, #15
 8007e10:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8007e12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8007e1c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007e1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b086      	sub	sp, #24
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	60f8      	str	r0, [r7, #12]
 8007e32:	460b      	mov	r3, r1
 8007e34:	607a      	str	r2, [r7, #4]
 8007e36:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007e3c:	897b      	ldrh	r3, [r7, #10]
 8007e3e:	2b15      	cmp	r3, #21
 8007e40:	d802      	bhi.n	8007e48 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007e42:	f06f 0309 	mvn.w	r3, #9
 8007e46:	e070      	b.n	8007f2a <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007e58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8007e62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8007e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e70:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8007e72:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8007e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e7c:	b298      	uxth	r0, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	3304      	adds	r3, #4
 8007e82:	461a      	mov	r2, r3
 8007e84:	2102      	movs	r1, #2
 8007e86:	f7ff f899 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8007e92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007e96:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007e98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8007ea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007eac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8007eb6:	f002 0201 	and.w	r2, r2, #1
 8007eba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007ebc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8007ec6:	f002 0207 	and.w	r2, r2, #7
 8007eca:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8007ecc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8998      	ldrh	r0, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2102      	movs	r1, #2
 8007eda:	f7ff f86f 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	89d8      	ldrh	r0, [r3, #14]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	330e      	adds	r3, #14
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	2102      	movs	r1, #2
 8007eea:	f7ff f867 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8a18      	ldrh	r0, [r3, #16]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	2102      	movs	r1, #2
 8007efa:	f7ff f85f 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8007f06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8007f10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8007f1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8007f24:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8007f26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b086      	sub	sp, #24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	607a      	str	r2, [r7, #4]
 8007f3e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8007f44:	897b      	ldrh	r3, [r7, #10]
 8007f46:	2b16      	cmp	r3, #22
 8007f48:	d802      	bhi.n	8007f50 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8007f4a:	f06f 0309 	mvn.w	r3, #9
 8007f4e:	e06e      	b.n	800802e <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	f003 030f 	and.w	r3, r3, #15
 8007f58:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8007f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8007f70:	f002 020f 	and.w	r2, r2, #15
 8007f74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8007f76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8007f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8007f8a:	f002 020f 	and.w	r2, r2, #15
 8007f8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8007f90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8007f9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8007fa4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007fa8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8007faa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8007fb4:	f002 020f 	and.w	r2, r2, #15
 8007fb8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8007fba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8007fc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8007fce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8007fd2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8007fd4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8958      	ldrh	r0, [r3, #10]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	330a      	adds	r3, #10
 8007fde:	461a      	mov	r2, r3
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	f7fe ffeb 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	8998      	ldrh	r0, [r3, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	330c      	adds	r3, #12
 8007fee:	461a      	mov	r2, r3
 8007ff0:	2102      	movs	r1, #2
 8007ff2:	f7fe ffe3 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8007ffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8008008:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6918      	ldr	r0, [r3, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3312      	adds	r3, #18
 8008012:	461a      	mov	r2, r3
 8008014:	2104      	movs	r1, #4
 8008016:	f7ff f86d 	bl	80070f4 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8008022:	f002 0201 	and.w	r2, r2, #1
 8008026:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8008028:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800802a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	460b      	mov	r3, r1
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008044:	2300      	movs	r3, #0
 8008046:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8008048:	897b      	ldrh	r3, [r7, #10]
 800804a:	2b11      	cmp	r3, #17
 800804c:	d802      	bhi.n	8008054 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800804e:	f06f 0309 	mvn.w	r3, #9
 8008052:	e071      	b.n	8008138 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 0303 	and.w	r3, r3, #3
 800805c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8858      	ldrh	r0, [r3, #2]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	3301      	adds	r3, #1
 800806a:	461a      	mov	r2, r3
 800806c:	2102      	movs	r1, #2
 800806e:	f7fe ffa5 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	8898      	ldrh	r0, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	3303      	adds	r3, #3
 800807a:	461a      	mov	r2, r3
 800807c:	2102      	movs	r1, #2
 800807e:	f7fe ff9d 	bl	8006fbc <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800808a:	f002 0201 	and.w	r2, r2, #1
 800808e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8008090:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800809a:	f002 0207 	and.w	r2, r2, #7
 800809e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80080a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80080aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80080b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80080be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80080c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80080ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80080d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80080d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80080de:	f002 0203 	and.w	r2, r2, #3
 80080e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80080e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80080ee:	f002 0203 	and.w	r2, r2, #3
 80080f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80080f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80080fe:	f002 020f 	and.w	r2, r2, #15
 8008102:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8008104:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800810e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8008118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8008122:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800812c:	f002 0203 	and.w	r2, r2, #3
 8008130:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8008132:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8008134:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	460b      	mov	r3, r1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800814e:	2300      	movs	r3, #0
 8008150:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8008152:	897b      	ldrh	r3, [r7, #10]
 8008154:	2b04      	cmp	r3, #4
 8008156:	d802      	bhi.n	800815e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8008158:	f06f 0309 	mvn.w	r3, #9
 800815c:	e025      	b.n	80081aa <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8008174:	f002 0201 	and.w	r2, r2, #1
 8008178:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800817a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8008184:	f002 0201 	and.w	r2, r2, #1
 8008188:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800818a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8008194:	f002 0203 	and.w	r2, r2, #3
 8008198:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800819a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80081a4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80081a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	371c      	adds	r7, #28
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bc80      	pop	{r7}
 80081b2:	4770      	bx	lr

080081b4 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80081c6:	89fb      	ldrh	r3, [r7, #14]
 80081c8:	2b2b      	cmp	r3, #43	; 0x2b
 80081ca:	d802      	bhi.n	80081d2 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80081cc:	f06f 0309 	mvn.w	r3, #9
 80081d0:	e0e2      	b.n	8008398 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081da:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	785a      	ldrb	r2, [r3, #1]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	3302      	adds	r3, #2
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	78da      	ldrb	r2, [r3, #3]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3304      	adds	r3, #4
 8008204:	4619      	mov	r1, r3
 8008206:	2002      	movs	r0, #2
 8008208:	f7fe ff02 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 800820c:	4603      	mov	r3, r0
 800820e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	3306      	adds	r3, #6
 8008218:	4619      	mov	r1, r3
 800821a:	2002      	movs	r0, #2
 800821c:	f7fe fef8 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008220:	4603      	mov	r3, r0
 8008222:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	3308      	adds	r3, #8
 800822c:	4619      	mov	r1, r3
 800822e:	2002      	movs	r0, #2
 8008230:	f7fe feee 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008234:	4603      	mov	r3, r0
 8008236:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	330a      	adds	r3, #10
 8008240:	4619      	mov	r1, r3
 8008242:	2002      	movs	r0, #2
 8008244:	f7fe fee4 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	330c      	adds	r3, #12
 8008254:	4619      	mov	r1, r3
 8008256:	2002      	movs	r0, #2
 8008258:	f7fe feda 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	330e      	adds	r3, #14
 8008268:	4619      	mov	r1, r3
 800826a:	2002      	movs	r0, #2
 800826c:	f7fe fed0 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008270:	4603      	mov	r3, r0
 8008272:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3310      	adds	r3, #16
 800827c:	4619      	mov	r1, r3
 800827e:	2002      	movs	r0, #2
 8008280:	f7fe fec6 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008284:	4603      	mov	r3, r0
 8008286:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	3312      	adds	r3, #18
 8008290:	4619      	mov	r1, r3
 8008292:	2002      	movs	r0, #2
 8008294:	f7fe febc 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008298:	4603      	mov	r3, r0
 800829a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	3314      	adds	r3, #20
 80082a4:	4619      	mov	r1, r3
 80082a6:	2002      	movs	r0, #2
 80082a8:	f7fe feb2 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	3316      	adds	r3, #22
 80082b8:	4619      	mov	r1, r3
 80082ba:	2002      	movs	r0, #2
 80082bc:	f7fe fea8 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80082c0:	4603      	mov	r3, r0
 80082c2:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3318      	adds	r3, #24
 80082cc:	4619      	mov	r1, r3
 80082ce:	2002      	movs	r0, #2
 80082d0:	f7fe fe9e 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80082d4:	4603      	mov	r3, r0
 80082d6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	331a      	adds	r3, #26
 80082e0:	4619      	mov	r1, r3
 80082e2:	2002      	movs	r0, #2
 80082e4:	f7fe fe94 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80082e8:	4603      	mov	r3, r0
 80082ea:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	331c      	adds	r3, #28
 80082f4:	4619      	mov	r1, r3
 80082f6:	2002      	movs	r0, #2
 80082f8:	f7fe fe8a 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	331e      	adds	r3, #30
 8008308:	4619      	mov	r1, r3
 800830a:	2002      	movs	r0, #2
 800830c:	f7fe fe80 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008310:	4603      	mov	r3, r0
 8008312:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3320      	adds	r3, #32
 800831c:	4619      	mov	r1, r3
 800831e:	2002      	movs	r0, #2
 8008320:	f7fe fe76 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008324:	4603      	mov	r3, r0
 8008326:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3322      	adds	r3, #34	; 0x22
 8008330:	4619      	mov	r1, r3
 8008332:	2002      	movs	r0, #2
 8008334:	f7fe fe6c 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	4619      	mov	r1, r3
 8008346:	2002      	movs	r0, #2
 8008348:	f7fe fe62 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 800834c:	4603      	mov	r3, r0
 800834e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	3326      	adds	r3, #38	; 0x26
 8008358:	4619      	mov	r1, r3
 800835a:	2002      	movs	r0, #2
 800835c:	f7fe fe58 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	3328      	adds	r3, #40	; 0x28
 800836c:	4619      	mov	r1, r3
 800836e:	2002      	movs	r0, #2
 8008370:	f7fe fe4e 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8008394:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80083b2:	89fb      	ldrh	r3, [r7, #14]
 80083b4:	2b20      	cmp	r3, #32
 80083b6:	d802      	bhi.n	80083be <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80083b8:	f06f 0309 	mvn.w	r3, #9
 80083bc:	e04d      	b.n	800845a <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	2004      	movs	r0, #4
 80083c2:	f7fe fec0 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 80083c6:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	2004      	movs	r0, #4
 80083d4:	f7fe feb7 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 80083d8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3308      	adds	r3, #8
 80083e2:	4619      	mov	r1, r3
 80083e4:	2004      	movs	r0, #4
 80083e6:	f7fe feca 	bl	800717e <VL53L1_i2c_decode_int32_t>
 80083ea:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	330c      	adds	r3, #12
 80083f4:	4619      	mov	r1, r3
 80083f6:	2004      	movs	r0, #4
 80083f8:	f7fe fea5 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 80083fc:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	3310      	adds	r3, #16
 8008406:	4619      	mov	r1, r3
 8008408:	2004      	movs	r0, #4
 800840a:	f7fe fe9c 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 800840e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	3314      	adds	r3, #20
 8008418:	4619      	mov	r1, r3
 800841a:	2004      	movs	r0, #4
 800841c:	f7fe fe93 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 8008420:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	3318      	adds	r3, #24
 800842a:	4619      	mov	r1, r3
 800842c:	2004      	movs	r0, #4
 800842e:	f7fe fea6 	bl	800717e <VL53L1_i2c_decode_int32_t>
 8008432:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	331c      	adds	r3, #28
 800843c:	4619      	mov	r1, r3
 800843e:	2004      	movs	r0, #4
 8008440:	f7fe fe81 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 8008444:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8008456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3718      	adds	r7, #24
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b086      	sub	sp, #24
 8008466:	af00      	add	r7, sp, #0
 8008468:	4603      	mov	r3, r0
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008470:	2300      	movs	r3, #0
 8008472:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8008474:	89fb      	ldrh	r3, [r7, #14]
 8008476:	2b37      	cmp	r3, #55	; 0x37
 8008478:	d802      	bhi.n	8008480 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800847a:	f06f 0309 	mvn.w	r3, #9
 800847e:	e15e      	b.n	800873e <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8008480:	68b9      	ldr	r1, [r7, #8]
 8008482:	2002      	movs	r0, #2
 8008484:	f7fe fdc4 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008488:	4603      	mov	r3, r0
 800848a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	3302      	adds	r3, #2
 8008494:	781b      	ldrb	r3, [r3, #0]
 8008496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800849a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3303      	adds	r3, #3
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084aa:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	3304      	adds	r3, #4
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	3305      	adds	r3, #5
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	3306      	adds	r3, #6
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084da:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3307      	adds	r3, #7
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ea:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3308      	adds	r3, #8
 80084f4:	4619      	mov	r1, r3
 80084f6:	2002      	movs	r0, #2
 80084f8:	f7fe fd8a 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008502:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	330a      	adds	r3, #10
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	330b      	adds	r3, #11
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	330c      	adds	r3, #12
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f003 030f 	and.w	r3, r3, #15
 8008532:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	330d      	adds	r3, #13
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	330e      	adds	r3, #14
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	330f      	adds	r3, #15
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 0303 	and.w	r3, r3, #3
 8008562:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7c1a      	ldrb	r2, [r3, #16]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	7c5a      	ldrb	r2, [r3, #17]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	3312      	adds	r3, #18
 800857c:	4619      	mov	r1, r3
 800857e:	2002      	movs	r0, #2
 8008580:	f7fe fd46 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008584:	4603      	mov	r3, r0
 8008586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800858a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	3316      	adds	r3, #22
 8008594:	4619      	mov	r1, r3
 8008596:	2002      	movs	r0, #2
 8008598:	f7fe fd3a 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 800859c:	4603      	mov	r3, r0
 800859e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3318      	adds	r3, #24
 80085a8:	4619      	mov	r1, r3
 80085aa:	2002      	movs	r0, #2
 80085ac:	f7fe fd30 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 80085b0:	4603      	mov	r3, r0
 80085b2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	331a      	adds	r3, #26
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	331b      	adds	r3, #27
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	7f1a      	ldrb	r2, [r3, #28]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	7f5a      	ldrb	r2, [r3, #29]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	331e      	adds	r3, #30
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085f2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	331f      	adds	r3, #31
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008602:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	3320      	adds	r3, #32
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	3321      	adds	r3, #33	; 0x21
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	3325      	adds	r3, #37	; 0x25
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	3326      	adds	r3, #38	; 0x26
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	3327      	adds	r3, #39	; 0x27
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	3328      	adds	r3, #40	; 0x28
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	f003 031f 	and.w	r3, r3, #31
 800868c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	3329      	adds	r3, #41	; 0x29
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 031f 	and.w	r3, r3, #31
 800869e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	332a      	adds	r3, #42	; 0x2a
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	332b      	adds	r3, #43	; 0x2b
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	332c      	adds	r3, #44	; 0x2c
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	332d      	adds	r3, #45	; 0x2d
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086e6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	332e      	adds	r3, #46	; 0x2e
 80086f2:	4619      	mov	r1, r3
 80086f4:	2004      	movs	r0, #4
 80086f6:	f7fe fd26 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	3332      	adds	r3, #50	; 0x32
 8008708:	4619      	mov	r1, r3
 800870a:	2004      	movs	r0, #4
 800870c:	f7fe fd1b 	bl	8007146 <VL53L1_i2c_decode_uint32_t>
 8008710:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	3336      	adds	r3, #54	; 0x36
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	3337      	adds	r3, #55	; 0x37
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800873a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b086      	sub	sp, #24
 800874a:	af00      	add	r7, sp, #0
 800874c:	4603      	mov	r3, r0
 800874e:	60b9      	str	r1, [r7, #8]
 8008750:	607a      	str	r2, [r7, #4]
 8008752:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008754:	2300      	movs	r3, #0
 8008756:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8008758:	89fb      	ldrh	r3, [r7, #14]
 800875a:	2b30      	cmp	r3, #48	; 0x30
 800875c:	d802      	bhi.n	8008764 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800875e:	f06f 0309 	mvn.w	r3, #9
 8008762:	e112      	b.n	800898a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	785a      	ldrb	r2, [r3, #1]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	789a      	ldrb	r2, [r3, #2]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	3303      	adds	r3, #3
 8008780:	4619      	mov	r1, r3
 8008782:	2002      	movs	r0, #2
 8008784:	f7fe fc44 	bl	8007010 <VL53L1_i2c_decode_uint16_t>
 8008788:	4603      	mov	r3, r0
 800878a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3305      	adds	r3, #5
 8008794:	781b      	ldrb	r3, [r3, #0]
 8008796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800879a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	3306      	adds	r3, #6
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	f003 0307 	and.w	r3, r3, #7
 80087aa:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	3307      	adds	r3, #7
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	3308      	adds	r3, #8
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087ca:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3309      	adds	r3, #9
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087da:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	330a      	adds	r3, #10
 80087e4:	781b      	ldrb	r3, [r3, #0]
 80087e6:	f003 0301 	and.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	330b      	adds	r3, #11
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087fa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	330c      	adds	r3, #12
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	330d      	adds	r3, #13
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800881a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	330e      	adds	r3, #14
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800882a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	7bda      	ldrb	r2, [r3, #15]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	7c1a      	ldrb	r2, [r3, #16]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	7c5a      	ldrb	r2, [r3, #17]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	7c9a      	ldrb	r2, [r3, #18]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	7cda      	ldrb	r2, [r3, #19]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	7d1a      	ldrb	r2, [r3, #20]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	7d5a      	ldrb	r2, [r3, #21]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	7d9a      	ldrb	r2, [r3, #22]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	7dda      	ldrb	r2, [r3, #23]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	7e1a      	ldrb	r2, [r3, #24]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	7e5a      	ldrb	r2, [r3, #25]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	7e9a      	ldrb	r2, [r3, #26]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	7eda      	ldrb	r2, [r3, #27]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	7f1a      	ldrb	r2, [r3, #28]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	7f5a      	ldrb	r2, [r3, #29]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7f9a      	ldrb	r2, [r3, #30]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	7fda      	ldrb	r2, [r3, #31]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8008986:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3718      	adds	r7, #24
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b090      	sub	sp, #64	; 0x40
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800899c:	2300      	movs	r3, #0
 800899e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80089a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80089aa:	f107 020c 	add.w	r2, r7, #12
 80089ae:	2331      	movs	r3, #49	; 0x31
 80089b0:	f240 110f 	movw	r1, #271	; 0x10f
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f8e7 	bl	8008b88 <VL53L1_ReadMulti>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80089c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d109      	bne.n	80089dc <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80089c8:	f107 030c 	add.w	r3, r7, #12
 80089cc:	683a      	ldr	r2, [r7, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	2031      	movs	r0, #49	; 0x31
 80089d2:	f7ff feb8 	bl	8008746 <VL53L1_i2c_decode_nvm_copy_data>
 80089d6:	4603      	mov	r3, r0
 80089d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80089dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3740      	adds	r7, #64	; 0x40
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b086      	sub	sp, #24
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 80089f6:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f9b6 	bl	8008d6c <VL53L1_WaitUs>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8008a04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	2301      	movs	r3, #1
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2301      	movs	r3, #1
 8008a16:	22e5      	movs	r2, #229	; 0xe5
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 f9bc 	bl	8008d98 <VL53L1_WaitValueMaskEx>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8008a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d103      	bne.n	8008a34 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8008a2c:	2103      	movs	r1, #3
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fe f8ab 	bl	8006b8a <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8008a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <VL53L1_poll_for_range_completion>:


VL53L1_Error VL53L1_poll_for_range_completion(
	VL53L1_DEV     Dev,
	uint32_t       timeout_ms)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
	 *
	 * Interrupt may be either active high or active low. Use active_high to
	 * select the required level check
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
	uint8_t  interrupt_ready          = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 8008a60:	f003 0310 	and.w	r3, r3, #16
 8008a64:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <VL53L1_poll_for_range_completion+0x32>
		interrupt_ready = 0x01;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
 8008a70:	e001      	b.n	8008a76 <VL53L1_poll_for_range_completion+0x36>
	else
		interrupt_ready = 0x00;
 8008a72:	2300      	movs	r3, #0
 8008a74:	75fb      	strb	r3, [r7, #23]

	status =
		VL53L1_WaitValueMaskEx(
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	9201      	str	r2, [sp, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	9200      	str	r2, [sp, #0]
 8008a80:	2231      	movs	r2, #49	; 0x31
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f987 	bl	8008d98 <VL53L1_WaitValueMaskEx>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	75bb      	strb	r3, [r7, #22]
			0x01,
			VL53L1_POLLING_DELAY_MS);

	LOG_FUNCTION_END(status);

	return status;
 8008a8e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b088      	sub	sp, #32
 8008a9e:	af02      	add	r7, sp, #8
 8008aa0:	60f8      	str	r0, [r7, #12]
 8008aa2:	60b9      	str	r1, [r7, #8]
 8008aa4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	330a      	adds	r3, #10
 8008aaa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8008ab8:	b299      	uxth	r1, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	68ba      	ldr	r2, [r7, #8]
 8008ac6:	f7f9 f9fb 	bl	8001ec0 <HAL_I2C_Master_Transmit>
 8008aca:	4603      	mov	r3, r0
 8008acc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008ace:	693b      	ldr	r3, [r7, #16]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	330a      	adds	r3, #10
 8008ae8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8008af6:	f043 0301 	orr.w	r3, r3, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	b299      	uxth	r1, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	b29a      	uxth	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	4613      	mov	r3, r2
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	f7f9 fad7 	bl	80020bc <HAL_I2C_Master_Receive>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008b12:	693b      	ldr	r3, [r7, #16]
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3718      	adds	r7, #24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	607a      	str	r2, [r7, #4]
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d902      	bls.n	8008b3c <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 8008b36:	f06f 0303 	mvn.w	r3, #3
 8008b3a:	e01d      	b.n	8008b78 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 8008b3c:	897b      	ldrh	r3, [r7, #10]
 8008b3e:	0a1b      	lsrs	r3, r3, #8
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	b2da      	uxtb	r2, r3
 8008b44:	4b0e      	ldr	r3, [pc, #56]	; (8008b80 <VL53L1_WriteMulti+0x64>)
 8008b46:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008b48:	897b      	ldrh	r3, [r7, #10]
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <VL53L1_WriteMulti+0x64>)
 8008b4e:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	480b      	ldr	r0, [pc, #44]	; (8008b84 <VL53L1_WriteMulti+0x68>)
 8008b56:	f000 ffec 	bl	8009b32 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	3302      	adds	r3, #2
 8008b5e:	461a      	mov	r2, r3
 8008b60:	4907      	ldr	r1, [pc, #28]	; (8008b80 <VL53L1_WriteMulti+0x64>)
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f7ff ff99 	bl	8008a9a <_I2CWrite>
 8008b68:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008b70:	23f3      	movs	r3, #243	; 0xf3
 8008b72:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000304 	.word	0x20000304
 8008b84:	20000306 	.word	0x20000306

08008b88 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	607a      	str	r2, [r7, #4]
 8008b92:	603b      	str	r3, [r7, #0]
 8008b94:	460b      	mov	r3, r1
 8008b96:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008b9c:	897b      	ldrh	r3, [r7, #10]
 8008b9e:	0a1b      	lsrs	r3, r3, #8
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <VL53L1_ReadMulti+0x68>)
 8008ba6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008ba8:	897b      	ldrh	r3, [r7, #10]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b10      	ldr	r3, [pc, #64]	; (8008bf0 <VL53L1_ReadMulti+0x68>)
 8008bae:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	490f      	ldr	r1, [pc, #60]	; (8008bf0 <VL53L1_ReadMulti+0x68>)
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f7ff ff70 	bl	8008a9a <_I2CWrite>
 8008bba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008bc2:	23f3      	movs	r3, #243	; 0xf3
 8008bc4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008bc6:	e00c      	b.n	8008be2 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f7ff ff83 	bl	8008ad8 <_I2CRead>
 8008bd2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008bda:	23f3      	movs	r3, #243	; 0xf3
 8008bdc:	75fb      	strb	r3, [r7, #23]
 8008bde:	e000      	b.n	8008be2 <VL53L1_ReadMulti+0x5a>
    }
done:
 8008be0:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000304 	.word	0x20000304

08008bf4 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
 8008c00:	4613      	mov	r3, r2
 8008c02:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c04:	2300      	movs	r3, #0
 8008c06:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008c08:	887b      	ldrh	r3, [r7, #2]
 8008c0a:	0a1b      	lsrs	r3, r3, #8
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <VL53L1_WrByte+0x50>)
 8008c12:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8008c14:	887b      	ldrh	r3, [r7, #2]
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <VL53L1_WrByte+0x50>)
 8008c1a:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8008c1c:	4a09      	ldr	r2, [pc, #36]	; (8008c44 <VL53L1_WrByte+0x50>)
 8008c1e:	787b      	ldrb	r3, [r7, #1]
 8008c20:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008c22:	2203      	movs	r2, #3
 8008c24:	4907      	ldr	r1, [pc, #28]	; (8008c44 <VL53L1_WrByte+0x50>)
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7ff ff37 	bl	8008a9a <_I2CWrite>
 8008c2c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c34:	23f3      	movs	r3, #243	; 0xf3
 8008c36:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8008c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000304 	.word	0x20000304

08008c48 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	460b      	mov	r3, r1
 8008c52:	607a      	str	r2, [r7, #4]
 8008c54:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008c56:	2300      	movs	r3, #0
 8008c58:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8008c5a:	897b      	ldrh	r3, [r7, #10]
 8008c5c:	0a1b      	lsrs	r3, r3, #8
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <VL53L1_RdByte+0x64>)
 8008c64:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008c66:	897b      	ldrh	r3, [r7, #10]
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	4b10      	ldr	r3, [pc, #64]	; (8008cac <VL53L1_RdByte+0x64>)
 8008c6c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008c6e:	2202      	movs	r2, #2
 8008c70:	490e      	ldr	r1, [pc, #56]	; (8008cac <VL53L1_RdByte+0x64>)
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f7ff ff11 	bl	8008a9a <_I2CWrite>
 8008c78:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c80:	23f3      	movs	r3, #243	; 0xf3
 8008c82:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008c84:	e00c      	b.n	8008ca0 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008c86:	2201      	movs	r2, #1
 8008c88:	6879      	ldr	r1, [r7, #4]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff ff24 	bl	8008ad8 <_I2CRead>
 8008c90:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d002      	beq.n	8008c9e <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c98:	23f3      	movs	r3, #243	; 0xf3
 8008c9a:	75fb      	strb	r3, [r7, #23]
 8008c9c:	e000      	b.n	8008ca0 <VL53L1_RdByte+0x58>
    }
done:
 8008c9e:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 8008ca0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	20000304 	.word	0x20000304

08008cb0 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8008cc2:	897b      	ldrh	r3, [r7, #10]
 8008cc4:	0a1b      	lsrs	r3, r3, #8
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	4b18      	ldr	r3, [pc, #96]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008ccc:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8008cce:	897b      	ldrh	r3, [r7, #10]
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	4b16      	ldr	r3, [pc, #88]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008cd4:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	4914      	ldr	r1, [pc, #80]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f7ff fedd 	bl	8008a9a <_I2CWrite>
 8008ce0:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008ce8:	23f3      	movs	r3, #243	; 0xf3
 8008cea:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008cec:	e017      	b.n	8008d1e <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008cee:	2202      	movs	r2, #2
 8008cf0:	490e      	ldr	r1, [pc, #56]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fef0 	bl	8008ad8 <_I2CRead>
 8008cf8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d00:	23f3      	movs	r3, #243	; 0xf3
 8008d02:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d04:	e00b      	b.n	8008d1e <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008d06:	4b09      	ldr	r3, [pc, #36]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	021b      	lsls	r3, r3, #8
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <VL53L1_RdWord+0x7c>)
 8008d12:	785b      	ldrb	r3, [r3, #1]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	b29a      	uxth	r2, r3
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8008d1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000304 	.word	0x20000304

08008d30 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8008d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bc80      	pop	{r7}
 8008d4e:	4770      	bx	lr

08008d50 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7f8 fb87 	bl	8001470 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <VL53L1_WaitUs+0x28>)
 8008d7a:	fb82 1203 	smull	r1, r2, r2, r3
 8008d7e:	1192      	asrs	r2, r2, #6
 8008d80:	17db      	asrs	r3, r3, #31
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7f8 fb73 	bl	8001470 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	10624dd3 	.word	0x10624dd3

08008d98 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	f507 740a 	add.w	r4, r7, #552	; 0x228
 8008da4:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 8008da8:	6020      	str	r0, [r4, #0]
 8008daa:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8008dae:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 8008db2:	6001      	str	r1, [r0, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008dba:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008dc4:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 8008dc8:	460a      	mov	r2, r1
 8008dca:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 8008df0:	f107 0310 	add.w	r3, r7, #16
 8008df4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008df8:	493b      	ldr	r1, [pc, #236]	; (8008ee8 <VL53L1_WaitValueMaskEx+0x150>)
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fe01 	bl	8009a02 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 8008e00:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff ff93 	bl	8008d30 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 8008e0a:	e049      	b.n	8008ea0 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 8008e0c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d110      	bne.n	8008e36 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 8008e14:	f207 2213 	addw	r2, r7, #531	; 0x213
 8008e18:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e1c:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 8008e20:	8819      	ldrh	r1, [r3, #0]
 8008e22:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e26:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8008e2a:	6818      	ldr	r0, [r3, #0]
 8008e2c:	f7ff ff0c 	bl	8008c48 <VL53L1_RdByte>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 8008e36:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 8008e3a:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 8008e3e:	4013      	ands	r3, r2
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8008e46:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 8008e4a:	7812      	ldrb	r2, [r2, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d102      	bne.n	8008e56 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 8008e50:	2301      	movs	r3, #1
 8008e52:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 8008e56:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d114      	bne.n	8008e88 <VL53L1_WaitValueMaskEx+0xf0>
 8008e5e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d110      	bne.n	8008e88 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 8008e66:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00c      	beq.n	8008e88 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 8008e6e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8008e72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008e76:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8008e7a:	4611      	mov	r1, r2
 8008e7c:	6818      	ldr	r0, [r3, #0]
 8008e7e:	f7ff ff67 	bl	8008d50 <VL53L1_WaitMs>
 8008e82:	4603      	mov	r3, r0
 8008e84:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8008e88:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff ff4f 	bl	8008d30 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 8008e92:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8008e96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		   (polling_time_ms < timeout_ms) &&
 8008ea0:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10c      	bne.n	8008ec2 <VL53L1_WaitValueMaskEx+0x12a>
	while ((status == VL53L1_ERROR_NONE) &&
 8008ea8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8008eac:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8008eb0:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d203      	bcs.n	8008ec2 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 8008eba:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0a4      	beq.n	8008e0c <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8008ec2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d106      	bne.n	8008ed8 <VL53L1_WaitValueMaskEx+0x140>
 8008eca:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d102      	bne.n	8008ed8 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 8008ed2:	23f9      	movs	r3, #249	; 0xf9
 8008ed4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 8008ed8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd90      	pop	{r4, r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	0800bc40 	.word	0x0800bc40

08008eec <__cvt>:
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef2:	461f      	mov	r7, r3
 8008ef4:	bfbb      	ittet	lt
 8008ef6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008efa:	461f      	movlt	r7, r3
 8008efc:	2300      	movge	r3, #0
 8008efe:	232d      	movlt	r3, #45	; 0x2d
 8008f00:	b088      	sub	sp, #32
 8008f02:	4614      	mov	r4, r2
 8008f04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008f06:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f08:	7013      	strb	r3, [r2, #0]
 8008f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f0c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008f10:	f023 0820 	bic.w	r8, r3, #32
 8008f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f18:	d005      	beq.n	8008f26 <__cvt+0x3a>
 8008f1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f1e:	d100      	bne.n	8008f22 <__cvt+0x36>
 8008f20:	3501      	adds	r5, #1
 8008f22:	2302      	movs	r3, #2
 8008f24:	e000      	b.n	8008f28 <__cvt+0x3c>
 8008f26:	2303      	movs	r3, #3
 8008f28:	aa07      	add	r2, sp, #28
 8008f2a:	9204      	str	r2, [sp, #16]
 8008f2c:	aa06      	add	r2, sp, #24
 8008f2e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008f32:	e9cd 3500 	strd	r3, r5, [sp]
 8008f36:	4622      	mov	r2, r4
 8008f38:	463b      	mov	r3, r7
 8008f3a:	f000 fe91 	bl	8009c60 <_dtoa_r>
 8008f3e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f42:	4606      	mov	r6, r0
 8008f44:	d102      	bne.n	8008f4c <__cvt+0x60>
 8008f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f48:	07db      	lsls	r3, r3, #31
 8008f4a:	d522      	bpl.n	8008f92 <__cvt+0xa6>
 8008f4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f50:	eb06 0905 	add.w	r9, r6, r5
 8008f54:	d110      	bne.n	8008f78 <__cvt+0x8c>
 8008f56:	7833      	ldrb	r3, [r6, #0]
 8008f58:	2b30      	cmp	r3, #48	; 0x30
 8008f5a:	d10a      	bne.n	8008f72 <__cvt+0x86>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	4620      	mov	r0, r4
 8008f62:	4639      	mov	r1, r7
 8008f64:	f7f7 fd20 	bl	80009a8 <__aeabi_dcmpeq>
 8008f68:	b918      	cbnz	r0, 8008f72 <__cvt+0x86>
 8008f6a:	f1c5 0501 	rsb	r5, r5, #1
 8008f6e:	f8ca 5000 	str.w	r5, [sl]
 8008f72:	f8da 3000 	ldr.w	r3, [sl]
 8008f76:	4499      	add	r9, r3
 8008f78:	2200      	movs	r2, #0
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	4639      	mov	r1, r7
 8008f80:	f7f7 fd12 	bl	80009a8 <__aeabi_dcmpeq>
 8008f84:	b108      	cbz	r0, 8008f8a <__cvt+0x9e>
 8008f86:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f8a:	2230      	movs	r2, #48	; 0x30
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	454b      	cmp	r3, r9
 8008f90:	d307      	bcc.n	8008fa2 <__cvt+0xb6>
 8008f92:	4630      	mov	r0, r6
 8008f94:	9b07      	ldr	r3, [sp, #28]
 8008f96:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f98:	1b9b      	subs	r3, r3, r6
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	b008      	add	sp, #32
 8008f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa2:	1c59      	adds	r1, r3, #1
 8008fa4:	9107      	str	r1, [sp, #28]
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	e7f0      	b.n	8008f8c <__cvt+0xa0>

08008faa <__exponent>:
 8008faa:	4603      	mov	r3, r0
 8008fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fae:	2900      	cmp	r1, #0
 8008fb0:	f803 2b02 	strb.w	r2, [r3], #2
 8008fb4:	bfb6      	itet	lt
 8008fb6:	222d      	movlt	r2, #45	; 0x2d
 8008fb8:	222b      	movge	r2, #43	; 0x2b
 8008fba:	4249      	neglt	r1, r1
 8008fbc:	2909      	cmp	r1, #9
 8008fbe:	7042      	strb	r2, [r0, #1]
 8008fc0:	dd2a      	ble.n	8009018 <__exponent+0x6e>
 8008fc2:	f10d 0207 	add.w	r2, sp, #7
 8008fc6:	4617      	mov	r7, r2
 8008fc8:	260a      	movs	r6, #10
 8008fca:	fb91 f5f6 	sdiv	r5, r1, r6
 8008fce:	4694      	mov	ip, r2
 8008fd0:	fb06 1415 	mls	r4, r6, r5, r1
 8008fd4:	3430      	adds	r4, #48	; 0x30
 8008fd6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008fda:	460c      	mov	r4, r1
 8008fdc:	2c63      	cmp	r4, #99	; 0x63
 8008fde:	4629      	mov	r1, r5
 8008fe0:	f102 32ff 	add.w	r2, r2, #4294967295
 8008fe4:	dcf1      	bgt.n	8008fca <__exponent+0x20>
 8008fe6:	3130      	adds	r1, #48	; 0x30
 8008fe8:	f1ac 0402 	sub.w	r4, ip, #2
 8008fec:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ff0:	4622      	mov	r2, r4
 8008ff2:	1c41      	adds	r1, r0, #1
 8008ff4:	42ba      	cmp	r2, r7
 8008ff6:	d30a      	bcc.n	800900e <__exponent+0x64>
 8008ff8:	f10d 0209 	add.w	r2, sp, #9
 8008ffc:	eba2 020c 	sub.w	r2, r2, ip
 8009000:	42bc      	cmp	r4, r7
 8009002:	bf88      	it	hi
 8009004:	2200      	movhi	r2, #0
 8009006:	4413      	add	r3, r2
 8009008:	1a18      	subs	r0, r3, r0
 800900a:	b003      	add	sp, #12
 800900c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800900e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009012:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009016:	e7ed      	b.n	8008ff4 <__exponent+0x4a>
 8009018:	2330      	movs	r3, #48	; 0x30
 800901a:	3130      	adds	r1, #48	; 0x30
 800901c:	7083      	strb	r3, [r0, #2]
 800901e:	70c1      	strb	r1, [r0, #3]
 8009020:	1d03      	adds	r3, r0, #4
 8009022:	e7f1      	b.n	8009008 <__exponent+0x5e>

08009024 <_printf_float>:
 8009024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009028:	b091      	sub	sp, #68	; 0x44
 800902a:	460c      	mov	r4, r1
 800902c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009030:	4616      	mov	r6, r2
 8009032:	461f      	mov	r7, r3
 8009034:	4605      	mov	r5, r0
 8009036:	f000 fcf7 	bl	8009a28 <_localeconv_r>
 800903a:	6803      	ldr	r3, [r0, #0]
 800903c:	4618      	mov	r0, r3
 800903e:	9309      	str	r3, [sp, #36]	; 0x24
 8009040:	f7f7 f886 	bl	8000150 <strlen>
 8009044:	2300      	movs	r3, #0
 8009046:	930e      	str	r3, [sp, #56]	; 0x38
 8009048:	f8d8 3000 	ldr.w	r3, [r8]
 800904c:	900a      	str	r0, [sp, #40]	; 0x28
 800904e:	3307      	adds	r3, #7
 8009050:	f023 0307 	bic.w	r3, r3, #7
 8009054:	f103 0208 	add.w	r2, r3, #8
 8009058:	f894 9018 	ldrb.w	r9, [r4, #24]
 800905c:	f8d4 b000 	ldr.w	fp, [r4]
 8009060:	f8c8 2000 	str.w	r2, [r8]
 8009064:	e9d3 a800 	ldrd	sl, r8, [r3]
 8009068:	4652      	mov	r2, sl
 800906a:	4643      	mov	r3, r8
 800906c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009070:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8009074:	930b      	str	r3, [sp, #44]	; 0x2c
 8009076:	f04f 32ff 	mov.w	r2, #4294967295
 800907a:	4650      	mov	r0, sl
 800907c:	4b9c      	ldr	r3, [pc, #624]	; (80092f0 <_printf_float+0x2cc>)
 800907e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009080:	f7f7 fcc4 	bl	8000a0c <__aeabi_dcmpun>
 8009084:	bb70      	cbnz	r0, 80090e4 <_printf_float+0xc0>
 8009086:	f04f 32ff 	mov.w	r2, #4294967295
 800908a:	4650      	mov	r0, sl
 800908c:	4b98      	ldr	r3, [pc, #608]	; (80092f0 <_printf_float+0x2cc>)
 800908e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009090:	f7f7 fc9e 	bl	80009d0 <__aeabi_dcmple>
 8009094:	bb30      	cbnz	r0, 80090e4 <_printf_float+0xc0>
 8009096:	2200      	movs	r2, #0
 8009098:	2300      	movs	r3, #0
 800909a:	4650      	mov	r0, sl
 800909c:	4641      	mov	r1, r8
 800909e:	f7f7 fc8d 	bl	80009bc <__aeabi_dcmplt>
 80090a2:	b110      	cbz	r0, 80090aa <_printf_float+0x86>
 80090a4:	232d      	movs	r3, #45	; 0x2d
 80090a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090aa:	4a92      	ldr	r2, [pc, #584]	; (80092f4 <_printf_float+0x2d0>)
 80090ac:	4b92      	ldr	r3, [pc, #584]	; (80092f8 <_printf_float+0x2d4>)
 80090ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80090b2:	bf94      	ite	ls
 80090b4:	4690      	movls	r8, r2
 80090b6:	4698      	movhi	r8, r3
 80090b8:	2303      	movs	r3, #3
 80090ba:	f04f 0a00 	mov.w	sl, #0
 80090be:	6123      	str	r3, [r4, #16]
 80090c0:	f02b 0304 	bic.w	r3, fp, #4
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	4633      	mov	r3, r6
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	9700      	str	r7, [sp, #0]
 80090ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80090d0:	f000 f9d6 	bl	8009480 <_printf_common>
 80090d4:	3001      	adds	r0, #1
 80090d6:	f040 8090 	bne.w	80091fa <_printf_float+0x1d6>
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	b011      	add	sp, #68	; 0x44
 80090e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e4:	4652      	mov	r2, sl
 80090e6:	4643      	mov	r3, r8
 80090e8:	4650      	mov	r0, sl
 80090ea:	4641      	mov	r1, r8
 80090ec:	f7f7 fc8e 	bl	8000a0c <__aeabi_dcmpun>
 80090f0:	b148      	cbz	r0, 8009106 <_printf_float+0xe2>
 80090f2:	f1b8 0f00 	cmp.w	r8, #0
 80090f6:	bfb8      	it	lt
 80090f8:	232d      	movlt	r3, #45	; 0x2d
 80090fa:	4a80      	ldr	r2, [pc, #512]	; (80092fc <_printf_float+0x2d8>)
 80090fc:	bfb8      	it	lt
 80090fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009102:	4b7f      	ldr	r3, [pc, #508]	; (8009300 <_printf_float+0x2dc>)
 8009104:	e7d3      	b.n	80090ae <_printf_float+0x8a>
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	d142      	bne.n	8009196 <_printf_float+0x172>
 8009110:	2306      	movs	r3, #6
 8009112:	6063      	str	r3, [r4, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	9206      	str	r2, [sp, #24]
 8009118:	aa0e      	add	r2, sp, #56	; 0x38
 800911a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800911e:	aa0d      	add	r2, sp, #52	; 0x34
 8009120:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009124:	9203      	str	r2, [sp, #12]
 8009126:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800912a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800912e:	6023      	str	r3, [r4, #0]
 8009130:	6863      	ldr	r3, [r4, #4]
 8009132:	4652      	mov	r2, sl
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	4628      	mov	r0, r5
 8009138:	4643      	mov	r3, r8
 800913a:	910b      	str	r1, [sp, #44]	; 0x2c
 800913c:	f7ff fed6 	bl	8008eec <__cvt>
 8009140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009142:	4680      	mov	r8, r0
 8009144:	2947      	cmp	r1, #71	; 0x47
 8009146:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009148:	d108      	bne.n	800915c <_printf_float+0x138>
 800914a:	1cc8      	adds	r0, r1, #3
 800914c:	db02      	blt.n	8009154 <_printf_float+0x130>
 800914e:	6863      	ldr	r3, [r4, #4]
 8009150:	4299      	cmp	r1, r3
 8009152:	dd40      	ble.n	80091d6 <_printf_float+0x1b2>
 8009154:	f1a9 0902 	sub.w	r9, r9, #2
 8009158:	fa5f f989 	uxtb.w	r9, r9
 800915c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009160:	d81f      	bhi.n	80091a2 <_printf_float+0x17e>
 8009162:	464a      	mov	r2, r9
 8009164:	3901      	subs	r1, #1
 8009166:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800916a:	910d      	str	r1, [sp, #52]	; 0x34
 800916c:	f7ff ff1d 	bl	8008faa <__exponent>
 8009170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009172:	4682      	mov	sl, r0
 8009174:	1813      	adds	r3, r2, r0
 8009176:	2a01      	cmp	r2, #1
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	dc02      	bgt.n	8009182 <_printf_float+0x15e>
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	07d2      	lsls	r2, r2, #31
 8009180:	d501      	bpl.n	8009186 <_printf_float+0x162>
 8009182:	3301      	adds	r3, #1
 8009184:	6123      	str	r3, [r4, #16]
 8009186:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800918a:	2b00      	cmp	r3, #0
 800918c:	d09b      	beq.n	80090c6 <_printf_float+0xa2>
 800918e:	232d      	movs	r3, #45	; 0x2d
 8009190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009194:	e797      	b.n	80090c6 <_printf_float+0xa2>
 8009196:	2947      	cmp	r1, #71	; 0x47
 8009198:	d1bc      	bne.n	8009114 <_printf_float+0xf0>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1ba      	bne.n	8009114 <_printf_float+0xf0>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7b7      	b.n	8009112 <_printf_float+0xee>
 80091a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80091a6:	d118      	bne.n	80091da <_printf_float+0x1b6>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	6863      	ldr	r3, [r4, #4]
 80091ac:	dd0b      	ble.n	80091c6 <_printf_float+0x1a2>
 80091ae:	6121      	str	r1, [r4, #16]
 80091b0:	b913      	cbnz	r3, 80091b8 <_printf_float+0x194>
 80091b2:	6822      	ldr	r2, [r4, #0]
 80091b4:	07d0      	lsls	r0, r2, #31
 80091b6:	d502      	bpl.n	80091be <_printf_float+0x19a>
 80091b8:	3301      	adds	r3, #1
 80091ba:	440b      	add	r3, r1
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	f04f 0a00 	mov.w	sl, #0
 80091c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80091c4:	e7df      	b.n	8009186 <_printf_float+0x162>
 80091c6:	b913      	cbnz	r3, 80091ce <_printf_float+0x1aa>
 80091c8:	6822      	ldr	r2, [r4, #0]
 80091ca:	07d2      	lsls	r2, r2, #31
 80091cc:	d501      	bpl.n	80091d2 <_printf_float+0x1ae>
 80091ce:	3302      	adds	r3, #2
 80091d0:	e7f4      	b.n	80091bc <_printf_float+0x198>
 80091d2:	2301      	movs	r3, #1
 80091d4:	e7f2      	b.n	80091bc <_printf_float+0x198>
 80091d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80091da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091dc:	4299      	cmp	r1, r3
 80091de:	db05      	blt.n	80091ec <_printf_float+0x1c8>
 80091e0:	6823      	ldr	r3, [r4, #0]
 80091e2:	6121      	str	r1, [r4, #16]
 80091e4:	07d8      	lsls	r0, r3, #31
 80091e6:	d5ea      	bpl.n	80091be <_printf_float+0x19a>
 80091e8:	1c4b      	adds	r3, r1, #1
 80091ea:	e7e7      	b.n	80091bc <_printf_float+0x198>
 80091ec:	2900      	cmp	r1, #0
 80091ee:	bfcc      	ite	gt
 80091f0:	2201      	movgt	r2, #1
 80091f2:	f1c1 0202 	rsble	r2, r1, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	e7e0      	b.n	80091bc <_printf_float+0x198>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	055a      	lsls	r2, r3, #21
 80091fe:	d407      	bmi.n	8009210 <_printf_float+0x1ec>
 8009200:	6923      	ldr	r3, [r4, #16]
 8009202:	4642      	mov	r2, r8
 8009204:	4631      	mov	r1, r6
 8009206:	4628      	mov	r0, r5
 8009208:	47b8      	blx	r7
 800920a:	3001      	adds	r0, #1
 800920c:	d12b      	bne.n	8009266 <_printf_float+0x242>
 800920e:	e764      	b.n	80090da <_printf_float+0xb6>
 8009210:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009214:	f240 80dd 	bls.w	80093d2 <_printf_float+0x3ae>
 8009218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800921c:	2200      	movs	r2, #0
 800921e:	2300      	movs	r3, #0
 8009220:	f7f7 fbc2 	bl	80009a8 <__aeabi_dcmpeq>
 8009224:	2800      	cmp	r0, #0
 8009226:	d033      	beq.n	8009290 <_printf_float+0x26c>
 8009228:	2301      	movs	r3, #1
 800922a:	4631      	mov	r1, r6
 800922c:	4628      	mov	r0, r5
 800922e:	4a35      	ldr	r2, [pc, #212]	; (8009304 <_printf_float+0x2e0>)
 8009230:	47b8      	blx	r7
 8009232:	3001      	adds	r0, #1
 8009234:	f43f af51 	beq.w	80090da <_printf_float+0xb6>
 8009238:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800923c:	429a      	cmp	r2, r3
 800923e:	db02      	blt.n	8009246 <_printf_float+0x222>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	07d8      	lsls	r0, r3, #31
 8009244:	d50f      	bpl.n	8009266 <_printf_float+0x242>
 8009246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800924a:	4631      	mov	r1, r6
 800924c:	4628      	mov	r0, r5
 800924e:	47b8      	blx	r7
 8009250:	3001      	adds	r0, #1
 8009252:	f43f af42 	beq.w	80090da <_printf_float+0xb6>
 8009256:	f04f 0800 	mov.w	r8, #0
 800925a:	f104 091a 	add.w	r9, r4, #26
 800925e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009260:	3b01      	subs	r3, #1
 8009262:	4543      	cmp	r3, r8
 8009264:	dc09      	bgt.n	800927a <_printf_float+0x256>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	079b      	lsls	r3, r3, #30
 800926a:	f100 8104 	bmi.w	8009476 <_printf_float+0x452>
 800926e:	68e0      	ldr	r0, [r4, #12]
 8009270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009272:	4298      	cmp	r0, r3
 8009274:	bfb8      	it	lt
 8009276:	4618      	movlt	r0, r3
 8009278:	e731      	b.n	80090de <_printf_float+0xba>
 800927a:	2301      	movs	r3, #1
 800927c:	464a      	mov	r2, r9
 800927e:	4631      	mov	r1, r6
 8009280:	4628      	mov	r0, r5
 8009282:	47b8      	blx	r7
 8009284:	3001      	adds	r0, #1
 8009286:	f43f af28 	beq.w	80090da <_printf_float+0xb6>
 800928a:	f108 0801 	add.w	r8, r8, #1
 800928e:	e7e6      	b.n	800925e <_printf_float+0x23a>
 8009290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009292:	2b00      	cmp	r3, #0
 8009294:	dc38      	bgt.n	8009308 <_printf_float+0x2e4>
 8009296:	2301      	movs	r3, #1
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	4a19      	ldr	r2, [pc, #100]	; (8009304 <_printf_float+0x2e0>)
 800929e:	47b8      	blx	r7
 80092a0:	3001      	adds	r0, #1
 80092a2:	f43f af1a 	beq.w	80090da <_printf_float+0xb6>
 80092a6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80092aa:	4313      	orrs	r3, r2
 80092ac:	d102      	bne.n	80092b4 <_printf_float+0x290>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	07d9      	lsls	r1, r3, #31
 80092b2:	d5d8      	bpl.n	8009266 <_printf_float+0x242>
 80092b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092b8:	4631      	mov	r1, r6
 80092ba:	4628      	mov	r0, r5
 80092bc:	47b8      	blx	r7
 80092be:	3001      	adds	r0, #1
 80092c0:	f43f af0b 	beq.w	80090da <_printf_float+0xb6>
 80092c4:	f04f 0900 	mov.w	r9, #0
 80092c8:	f104 0a1a 	add.w	sl, r4, #26
 80092cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092ce:	425b      	negs	r3, r3
 80092d0:	454b      	cmp	r3, r9
 80092d2:	dc01      	bgt.n	80092d8 <_printf_float+0x2b4>
 80092d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092d6:	e794      	b.n	8009202 <_printf_float+0x1de>
 80092d8:	2301      	movs	r3, #1
 80092da:	4652      	mov	r2, sl
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f aef9 	beq.w	80090da <_printf_float+0xb6>
 80092e8:	f109 0901 	add.w	r9, r9, #1
 80092ec:	e7ee      	b.n	80092cc <_printf_float+0x2a8>
 80092ee:	bf00      	nop
 80092f0:	7fefffff 	.word	0x7fefffff
 80092f4:	0800bc6e 	.word	0x0800bc6e
 80092f8:	0800bc72 	.word	0x0800bc72
 80092fc:	0800bc76 	.word	0x0800bc76
 8009300:	0800bc7a 	.word	0x0800bc7a
 8009304:	0800bc7e 	.word	0x0800bc7e
 8009308:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800930a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800930c:	429a      	cmp	r2, r3
 800930e:	bfa8      	it	ge
 8009310:	461a      	movge	r2, r3
 8009312:	2a00      	cmp	r2, #0
 8009314:	4691      	mov	r9, r2
 8009316:	dc37      	bgt.n	8009388 <_printf_float+0x364>
 8009318:	f04f 0b00 	mov.w	fp, #0
 800931c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009320:	f104 021a 	add.w	r2, r4, #26
 8009324:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009328:	ebaa 0309 	sub.w	r3, sl, r9
 800932c:	455b      	cmp	r3, fp
 800932e:	dc33      	bgt.n	8009398 <_printf_float+0x374>
 8009330:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009334:	429a      	cmp	r2, r3
 8009336:	db3b      	blt.n	80093b0 <_printf_float+0x38c>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	07da      	lsls	r2, r3, #31
 800933c:	d438      	bmi.n	80093b0 <_printf_float+0x38c>
 800933e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009342:	eba2 0903 	sub.w	r9, r2, r3
 8009346:	eba2 020a 	sub.w	r2, r2, sl
 800934a:	4591      	cmp	r9, r2
 800934c:	bfa8      	it	ge
 800934e:	4691      	movge	r9, r2
 8009350:	f1b9 0f00 	cmp.w	r9, #0
 8009354:	dc34      	bgt.n	80093c0 <_printf_float+0x39c>
 8009356:	f04f 0800 	mov.w	r8, #0
 800935a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800935e:	f104 0a1a 	add.w	sl, r4, #26
 8009362:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009366:	1a9b      	subs	r3, r3, r2
 8009368:	eba3 0309 	sub.w	r3, r3, r9
 800936c:	4543      	cmp	r3, r8
 800936e:	f77f af7a 	ble.w	8009266 <_printf_float+0x242>
 8009372:	2301      	movs	r3, #1
 8009374:	4652      	mov	r2, sl
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	f43f aeac 	beq.w	80090da <_printf_float+0xb6>
 8009382:	f108 0801 	add.w	r8, r8, #1
 8009386:	e7ec      	b.n	8009362 <_printf_float+0x33e>
 8009388:	4613      	mov	r3, r2
 800938a:	4631      	mov	r1, r6
 800938c:	4642      	mov	r2, r8
 800938e:	4628      	mov	r0, r5
 8009390:	47b8      	blx	r7
 8009392:	3001      	adds	r0, #1
 8009394:	d1c0      	bne.n	8009318 <_printf_float+0x2f4>
 8009396:	e6a0      	b.n	80090da <_printf_float+0xb6>
 8009398:	2301      	movs	r3, #1
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	920b      	str	r2, [sp, #44]	; 0x2c
 80093a0:	47b8      	blx	r7
 80093a2:	3001      	adds	r0, #1
 80093a4:	f43f ae99 	beq.w	80090da <_printf_float+0xb6>
 80093a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093aa:	f10b 0b01 	add.w	fp, fp, #1
 80093ae:	e7b9      	b.n	8009324 <_printf_float+0x300>
 80093b0:	4631      	mov	r1, r6
 80093b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	d1bf      	bne.n	800933e <_printf_float+0x31a>
 80093be:	e68c      	b.n	80090da <_printf_float+0xb6>
 80093c0:	464b      	mov	r3, r9
 80093c2:	4631      	mov	r1, r6
 80093c4:	4628      	mov	r0, r5
 80093c6:	eb08 020a 	add.w	r2, r8, sl
 80093ca:	47b8      	blx	r7
 80093cc:	3001      	adds	r0, #1
 80093ce:	d1c2      	bne.n	8009356 <_printf_float+0x332>
 80093d0:	e683      	b.n	80090da <_printf_float+0xb6>
 80093d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093d4:	2a01      	cmp	r2, #1
 80093d6:	dc01      	bgt.n	80093dc <_printf_float+0x3b8>
 80093d8:	07db      	lsls	r3, r3, #31
 80093da:	d539      	bpl.n	8009450 <_printf_float+0x42c>
 80093dc:	2301      	movs	r3, #1
 80093de:	4642      	mov	r2, r8
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f ae77 	beq.w	80090da <_printf_float+0xb6>
 80093ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093f0:	4631      	mov	r1, r6
 80093f2:	4628      	mov	r0, r5
 80093f4:	47b8      	blx	r7
 80093f6:	3001      	adds	r0, #1
 80093f8:	f43f ae6f 	beq.w	80090da <_printf_float+0xb6>
 80093fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009400:	2200      	movs	r2, #0
 8009402:	2300      	movs	r3, #0
 8009404:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009408:	f7f7 face 	bl	80009a8 <__aeabi_dcmpeq>
 800940c:	b9d8      	cbnz	r0, 8009446 <_printf_float+0x422>
 800940e:	f109 33ff 	add.w	r3, r9, #4294967295
 8009412:	f108 0201 	add.w	r2, r8, #1
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	d10e      	bne.n	800943e <_printf_float+0x41a>
 8009420:	e65b      	b.n	80090da <_printf_float+0xb6>
 8009422:	2301      	movs	r3, #1
 8009424:	464a      	mov	r2, r9
 8009426:	4631      	mov	r1, r6
 8009428:	4628      	mov	r0, r5
 800942a:	47b8      	blx	r7
 800942c:	3001      	adds	r0, #1
 800942e:	f43f ae54 	beq.w	80090da <_printf_float+0xb6>
 8009432:	f108 0801 	add.w	r8, r8, #1
 8009436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009438:	3b01      	subs	r3, #1
 800943a:	4543      	cmp	r3, r8
 800943c:	dcf1      	bgt.n	8009422 <_printf_float+0x3fe>
 800943e:	4653      	mov	r3, sl
 8009440:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009444:	e6de      	b.n	8009204 <_printf_float+0x1e0>
 8009446:	f04f 0800 	mov.w	r8, #0
 800944a:	f104 091a 	add.w	r9, r4, #26
 800944e:	e7f2      	b.n	8009436 <_printf_float+0x412>
 8009450:	2301      	movs	r3, #1
 8009452:	4642      	mov	r2, r8
 8009454:	e7df      	b.n	8009416 <_printf_float+0x3f2>
 8009456:	2301      	movs	r3, #1
 8009458:	464a      	mov	r2, r9
 800945a:	4631      	mov	r1, r6
 800945c:	4628      	mov	r0, r5
 800945e:	47b8      	blx	r7
 8009460:	3001      	adds	r0, #1
 8009462:	f43f ae3a 	beq.w	80090da <_printf_float+0xb6>
 8009466:	f108 0801 	add.w	r8, r8, #1
 800946a:	68e3      	ldr	r3, [r4, #12]
 800946c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800946e:	1a5b      	subs	r3, r3, r1
 8009470:	4543      	cmp	r3, r8
 8009472:	dcf0      	bgt.n	8009456 <_printf_float+0x432>
 8009474:	e6fb      	b.n	800926e <_printf_float+0x24a>
 8009476:	f04f 0800 	mov.w	r8, #0
 800947a:	f104 0919 	add.w	r9, r4, #25
 800947e:	e7f4      	b.n	800946a <_printf_float+0x446>

08009480 <_printf_common>:
 8009480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009484:	4616      	mov	r6, r2
 8009486:	4699      	mov	r9, r3
 8009488:	688a      	ldr	r2, [r1, #8]
 800948a:	690b      	ldr	r3, [r1, #16]
 800948c:	4607      	mov	r7, r0
 800948e:	4293      	cmp	r3, r2
 8009490:	bfb8      	it	lt
 8009492:	4613      	movlt	r3, r2
 8009494:	6033      	str	r3, [r6, #0]
 8009496:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800949a:	460c      	mov	r4, r1
 800949c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094a0:	b10a      	cbz	r2, 80094a6 <_printf_common+0x26>
 80094a2:	3301      	adds	r3, #1
 80094a4:	6033      	str	r3, [r6, #0]
 80094a6:	6823      	ldr	r3, [r4, #0]
 80094a8:	0699      	lsls	r1, r3, #26
 80094aa:	bf42      	ittt	mi
 80094ac:	6833      	ldrmi	r3, [r6, #0]
 80094ae:	3302      	addmi	r3, #2
 80094b0:	6033      	strmi	r3, [r6, #0]
 80094b2:	6825      	ldr	r5, [r4, #0]
 80094b4:	f015 0506 	ands.w	r5, r5, #6
 80094b8:	d106      	bne.n	80094c8 <_printf_common+0x48>
 80094ba:	f104 0a19 	add.w	sl, r4, #25
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	6832      	ldr	r2, [r6, #0]
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	42ab      	cmp	r3, r5
 80094c6:	dc2b      	bgt.n	8009520 <_printf_common+0xa0>
 80094c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80094cc:	1e13      	subs	r3, r2, #0
 80094ce:	6822      	ldr	r2, [r4, #0]
 80094d0:	bf18      	it	ne
 80094d2:	2301      	movne	r3, #1
 80094d4:	0692      	lsls	r2, r2, #26
 80094d6:	d430      	bmi.n	800953a <_printf_common+0xba>
 80094d8:	4649      	mov	r1, r9
 80094da:	4638      	mov	r0, r7
 80094dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094e0:	47c0      	blx	r8
 80094e2:	3001      	adds	r0, #1
 80094e4:	d023      	beq.n	800952e <_printf_common+0xae>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	6922      	ldr	r2, [r4, #16]
 80094ea:	f003 0306 	and.w	r3, r3, #6
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	bf14      	ite	ne
 80094f2:	2500      	movne	r5, #0
 80094f4:	6833      	ldreq	r3, [r6, #0]
 80094f6:	f04f 0600 	mov.w	r6, #0
 80094fa:	bf08      	it	eq
 80094fc:	68e5      	ldreq	r5, [r4, #12]
 80094fe:	f104 041a 	add.w	r4, r4, #26
 8009502:	bf08      	it	eq
 8009504:	1aed      	subeq	r5, r5, r3
 8009506:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800950a:	bf08      	it	eq
 800950c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009510:	4293      	cmp	r3, r2
 8009512:	bfc4      	itt	gt
 8009514:	1a9b      	subgt	r3, r3, r2
 8009516:	18ed      	addgt	r5, r5, r3
 8009518:	42b5      	cmp	r5, r6
 800951a:	d11a      	bne.n	8009552 <_printf_common+0xd2>
 800951c:	2000      	movs	r0, #0
 800951e:	e008      	b.n	8009532 <_printf_common+0xb2>
 8009520:	2301      	movs	r3, #1
 8009522:	4652      	mov	r2, sl
 8009524:	4649      	mov	r1, r9
 8009526:	4638      	mov	r0, r7
 8009528:	47c0      	blx	r8
 800952a:	3001      	adds	r0, #1
 800952c:	d103      	bne.n	8009536 <_printf_common+0xb6>
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009536:	3501      	adds	r5, #1
 8009538:	e7c1      	b.n	80094be <_printf_common+0x3e>
 800953a:	2030      	movs	r0, #48	; 0x30
 800953c:	18e1      	adds	r1, r4, r3
 800953e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009542:	1c5a      	adds	r2, r3, #1
 8009544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009548:	4422      	add	r2, r4
 800954a:	3302      	adds	r3, #2
 800954c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009550:	e7c2      	b.n	80094d8 <_printf_common+0x58>
 8009552:	2301      	movs	r3, #1
 8009554:	4622      	mov	r2, r4
 8009556:	4649      	mov	r1, r9
 8009558:	4638      	mov	r0, r7
 800955a:	47c0      	blx	r8
 800955c:	3001      	adds	r0, #1
 800955e:	d0e6      	beq.n	800952e <_printf_common+0xae>
 8009560:	3601      	adds	r6, #1
 8009562:	e7d9      	b.n	8009518 <_printf_common+0x98>

08009564 <_printf_i>:
 8009564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	7e0f      	ldrb	r7, [r1, #24]
 800956a:	4691      	mov	r9, r2
 800956c:	2f78      	cmp	r7, #120	; 0x78
 800956e:	4680      	mov	r8, r0
 8009570:	460c      	mov	r4, r1
 8009572:	469a      	mov	sl, r3
 8009574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800957a:	d807      	bhi.n	800958c <_printf_i+0x28>
 800957c:	2f62      	cmp	r7, #98	; 0x62
 800957e:	d80a      	bhi.n	8009596 <_printf_i+0x32>
 8009580:	2f00      	cmp	r7, #0
 8009582:	f000 80d5 	beq.w	8009730 <_printf_i+0x1cc>
 8009586:	2f58      	cmp	r7, #88	; 0x58
 8009588:	f000 80c1 	beq.w	800970e <_printf_i+0x1aa>
 800958c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009594:	e03a      	b.n	800960c <_printf_i+0xa8>
 8009596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800959a:	2b15      	cmp	r3, #21
 800959c:	d8f6      	bhi.n	800958c <_printf_i+0x28>
 800959e:	a101      	add	r1, pc, #4	; (adr r1, 80095a4 <_printf_i+0x40>)
 80095a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095a4:	080095fd 	.word	0x080095fd
 80095a8:	08009611 	.word	0x08009611
 80095ac:	0800958d 	.word	0x0800958d
 80095b0:	0800958d 	.word	0x0800958d
 80095b4:	0800958d 	.word	0x0800958d
 80095b8:	0800958d 	.word	0x0800958d
 80095bc:	08009611 	.word	0x08009611
 80095c0:	0800958d 	.word	0x0800958d
 80095c4:	0800958d 	.word	0x0800958d
 80095c8:	0800958d 	.word	0x0800958d
 80095cc:	0800958d 	.word	0x0800958d
 80095d0:	08009717 	.word	0x08009717
 80095d4:	0800963d 	.word	0x0800963d
 80095d8:	080096d1 	.word	0x080096d1
 80095dc:	0800958d 	.word	0x0800958d
 80095e0:	0800958d 	.word	0x0800958d
 80095e4:	08009739 	.word	0x08009739
 80095e8:	0800958d 	.word	0x0800958d
 80095ec:	0800963d 	.word	0x0800963d
 80095f0:	0800958d 	.word	0x0800958d
 80095f4:	0800958d 	.word	0x0800958d
 80095f8:	080096d9 	.word	0x080096d9
 80095fc:	682b      	ldr	r3, [r5, #0]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	602a      	str	r2, [r5, #0]
 8009604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800960c:	2301      	movs	r3, #1
 800960e:	e0a0      	b.n	8009752 <_printf_i+0x1ee>
 8009610:	6820      	ldr	r0, [r4, #0]
 8009612:	682b      	ldr	r3, [r5, #0]
 8009614:	0607      	lsls	r7, r0, #24
 8009616:	f103 0104 	add.w	r1, r3, #4
 800961a:	6029      	str	r1, [r5, #0]
 800961c:	d501      	bpl.n	8009622 <_printf_i+0xbe>
 800961e:	681e      	ldr	r6, [r3, #0]
 8009620:	e003      	b.n	800962a <_printf_i+0xc6>
 8009622:	0646      	lsls	r6, r0, #25
 8009624:	d5fb      	bpl.n	800961e <_printf_i+0xba>
 8009626:	f9b3 6000 	ldrsh.w	r6, [r3]
 800962a:	2e00      	cmp	r6, #0
 800962c:	da03      	bge.n	8009636 <_printf_i+0xd2>
 800962e:	232d      	movs	r3, #45	; 0x2d
 8009630:	4276      	negs	r6, r6
 8009632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009636:	230a      	movs	r3, #10
 8009638:	4859      	ldr	r0, [pc, #356]	; (80097a0 <_printf_i+0x23c>)
 800963a:	e012      	b.n	8009662 <_printf_i+0xfe>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	6820      	ldr	r0, [r4, #0]
 8009640:	1d19      	adds	r1, r3, #4
 8009642:	6029      	str	r1, [r5, #0]
 8009644:	0605      	lsls	r5, r0, #24
 8009646:	d501      	bpl.n	800964c <_printf_i+0xe8>
 8009648:	681e      	ldr	r6, [r3, #0]
 800964a:	e002      	b.n	8009652 <_printf_i+0xee>
 800964c:	0641      	lsls	r1, r0, #25
 800964e:	d5fb      	bpl.n	8009648 <_printf_i+0xe4>
 8009650:	881e      	ldrh	r6, [r3, #0]
 8009652:	2f6f      	cmp	r7, #111	; 0x6f
 8009654:	bf0c      	ite	eq
 8009656:	2308      	moveq	r3, #8
 8009658:	230a      	movne	r3, #10
 800965a:	4851      	ldr	r0, [pc, #324]	; (80097a0 <_printf_i+0x23c>)
 800965c:	2100      	movs	r1, #0
 800965e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009662:	6865      	ldr	r5, [r4, #4]
 8009664:	2d00      	cmp	r5, #0
 8009666:	bfa8      	it	ge
 8009668:	6821      	ldrge	r1, [r4, #0]
 800966a:	60a5      	str	r5, [r4, #8]
 800966c:	bfa4      	itt	ge
 800966e:	f021 0104 	bicge.w	r1, r1, #4
 8009672:	6021      	strge	r1, [r4, #0]
 8009674:	b90e      	cbnz	r6, 800967a <_printf_i+0x116>
 8009676:	2d00      	cmp	r5, #0
 8009678:	d04b      	beq.n	8009712 <_printf_i+0x1ae>
 800967a:	4615      	mov	r5, r2
 800967c:	fbb6 f1f3 	udiv	r1, r6, r3
 8009680:	fb03 6711 	mls	r7, r3, r1, r6
 8009684:	5dc7      	ldrb	r7, [r0, r7]
 8009686:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800968a:	4637      	mov	r7, r6
 800968c:	42bb      	cmp	r3, r7
 800968e:	460e      	mov	r6, r1
 8009690:	d9f4      	bls.n	800967c <_printf_i+0x118>
 8009692:	2b08      	cmp	r3, #8
 8009694:	d10b      	bne.n	80096ae <_printf_i+0x14a>
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	07de      	lsls	r6, r3, #31
 800969a:	d508      	bpl.n	80096ae <_printf_i+0x14a>
 800969c:	6923      	ldr	r3, [r4, #16]
 800969e:	6861      	ldr	r1, [r4, #4]
 80096a0:	4299      	cmp	r1, r3
 80096a2:	bfde      	ittt	le
 80096a4:	2330      	movle	r3, #48	; 0x30
 80096a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ae:	1b52      	subs	r2, r2, r5
 80096b0:	6122      	str	r2, [r4, #16]
 80096b2:	464b      	mov	r3, r9
 80096b4:	4621      	mov	r1, r4
 80096b6:	4640      	mov	r0, r8
 80096b8:	f8cd a000 	str.w	sl, [sp]
 80096bc:	aa03      	add	r2, sp, #12
 80096be:	f7ff fedf 	bl	8009480 <_printf_common>
 80096c2:	3001      	adds	r0, #1
 80096c4:	d14a      	bne.n	800975c <_printf_i+0x1f8>
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	b004      	add	sp, #16
 80096cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d0:	6823      	ldr	r3, [r4, #0]
 80096d2:	f043 0320 	orr.w	r3, r3, #32
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	2778      	movs	r7, #120	; 0x78
 80096da:	4832      	ldr	r0, [pc, #200]	; (80097a4 <_printf_i+0x240>)
 80096dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	6829      	ldr	r1, [r5, #0]
 80096e4:	061f      	lsls	r7, r3, #24
 80096e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80096ea:	d402      	bmi.n	80096f2 <_printf_i+0x18e>
 80096ec:	065f      	lsls	r7, r3, #25
 80096ee:	bf48      	it	mi
 80096f0:	b2b6      	uxthmi	r6, r6
 80096f2:	07df      	lsls	r7, r3, #31
 80096f4:	bf48      	it	mi
 80096f6:	f043 0320 	orrmi.w	r3, r3, #32
 80096fa:	6029      	str	r1, [r5, #0]
 80096fc:	bf48      	it	mi
 80096fe:	6023      	strmi	r3, [r4, #0]
 8009700:	b91e      	cbnz	r6, 800970a <_printf_i+0x1a6>
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	f023 0320 	bic.w	r3, r3, #32
 8009708:	6023      	str	r3, [r4, #0]
 800970a:	2310      	movs	r3, #16
 800970c:	e7a6      	b.n	800965c <_printf_i+0xf8>
 800970e:	4824      	ldr	r0, [pc, #144]	; (80097a0 <_printf_i+0x23c>)
 8009710:	e7e4      	b.n	80096dc <_printf_i+0x178>
 8009712:	4615      	mov	r5, r2
 8009714:	e7bd      	b.n	8009692 <_printf_i+0x12e>
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	6826      	ldr	r6, [r4, #0]
 800971a:	1d18      	adds	r0, r3, #4
 800971c:	6961      	ldr	r1, [r4, #20]
 800971e:	6028      	str	r0, [r5, #0]
 8009720:	0635      	lsls	r5, r6, #24
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	d501      	bpl.n	800972a <_printf_i+0x1c6>
 8009726:	6019      	str	r1, [r3, #0]
 8009728:	e002      	b.n	8009730 <_printf_i+0x1cc>
 800972a:	0670      	lsls	r0, r6, #25
 800972c:	d5fb      	bpl.n	8009726 <_printf_i+0x1c2>
 800972e:	8019      	strh	r1, [r3, #0]
 8009730:	2300      	movs	r3, #0
 8009732:	4615      	mov	r5, r2
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	e7bc      	b.n	80096b2 <_printf_i+0x14e>
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	2100      	movs	r1, #0
 800973c:	1d1a      	adds	r2, r3, #4
 800973e:	602a      	str	r2, [r5, #0]
 8009740:	681d      	ldr	r5, [r3, #0]
 8009742:	6862      	ldr	r2, [r4, #4]
 8009744:	4628      	mov	r0, r5
 8009746:	f000 f9e6 	bl	8009b16 <memchr>
 800974a:	b108      	cbz	r0, 8009750 <_printf_i+0x1ec>
 800974c:	1b40      	subs	r0, r0, r5
 800974e:	6060      	str	r0, [r4, #4]
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	6123      	str	r3, [r4, #16]
 8009754:	2300      	movs	r3, #0
 8009756:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800975a:	e7aa      	b.n	80096b2 <_printf_i+0x14e>
 800975c:	462a      	mov	r2, r5
 800975e:	4649      	mov	r1, r9
 8009760:	4640      	mov	r0, r8
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	47d0      	blx	sl
 8009766:	3001      	adds	r0, #1
 8009768:	d0ad      	beq.n	80096c6 <_printf_i+0x162>
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	079b      	lsls	r3, r3, #30
 800976e:	d413      	bmi.n	8009798 <_printf_i+0x234>
 8009770:	68e0      	ldr	r0, [r4, #12]
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	4298      	cmp	r0, r3
 8009776:	bfb8      	it	lt
 8009778:	4618      	movlt	r0, r3
 800977a:	e7a6      	b.n	80096ca <_printf_i+0x166>
 800977c:	2301      	movs	r3, #1
 800977e:	4632      	mov	r2, r6
 8009780:	4649      	mov	r1, r9
 8009782:	4640      	mov	r0, r8
 8009784:	47d0      	blx	sl
 8009786:	3001      	adds	r0, #1
 8009788:	d09d      	beq.n	80096c6 <_printf_i+0x162>
 800978a:	3501      	adds	r5, #1
 800978c:	68e3      	ldr	r3, [r4, #12]
 800978e:	9903      	ldr	r1, [sp, #12]
 8009790:	1a5b      	subs	r3, r3, r1
 8009792:	42ab      	cmp	r3, r5
 8009794:	dcf2      	bgt.n	800977c <_printf_i+0x218>
 8009796:	e7eb      	b.n	8009770 <_printf_i+0x20c>
 8009798:	2500      	movs	r5, #0
 800979a:	f104 0619 	add.w	r6, r4, #25
 800979e:	e7f5      	b.n	800978c <_printf_i+0x228>
 80097a0:	0800bc80 	.word	0x0800bc80
 80097a4:	0800bc91 	.word	0x0800bc91

080097a8 <std>:
 80097a8:	2300      	movs	r3, #0
 80097aa:	b510      	push	{r4, lr}
 80097ac:	4604      	mov	r4, r0
 80097ae:	e9c0 3300 	strd	r3, r3, [r0]
 80097b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097b6:	6083      	str	r3, [r0, #8]
 80097b8:	8181      	strh	r1, [r0, #12]
 80097ba:	6643      	str	r3, [r0, #100]	; 0x64
 80097bc:	81c2      	strh	r2, [r0, #14]
 80097be:	6183      	str	r3, [r0, #24]
 80097c0:	4619      	mov	r1, r3
 80097c2:	2208      	movs	r2, #8
 80097c4:	305c      	adds	r0, #92	; 0x5c
 80097c6:	f000 f914 	bl	80099f2 <memset>
 80097ca:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <std+0x58>)
 80097cc:	6224      	str	r4, [r4, #32]
 80097ce:	6263      	str	r3, [r4, #36]	; 0x24
 80097d0:	4b0c      	ldr	r3, [pc, #48]	; (8009804 <std+0x5c>)
 80097d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d4:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <std+0x60>)
 80097d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097d8:	4b0c      	ldr	r3, [pc, #48]	; (800980c <std+0x64>)
 80097da:	6323      	str	r3, [r4, #48]	; 0x30
 80097dc:	4b0c      	ldr	r3, [pc, #48]	; (8009810 <std+0x68>)
 80097de:	429c      	cmp	r4, r3
 80097e0:	d006      	beq.n	80097f0 <std+0x48>
 80097e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80097e6:	4294      	cmp	r4, r2
 80097e8:	d002      	beq.n	80097f0 <std+0x48>
 80097ea:	33d0      	adds	r3, #208	; 0xd0
 80097ec:	429c      	cmp	r4, r3
 80097ee:	d105      	bne.n	80097fc <std+0x54>
 80097f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097f8:	f000 b98a 	b.w	8009b10 <__retarget_lock_init_recursive>
 80097fc:	bd10      	pop	{r4, pc}
 80097fe:	bf00      	nop
 8009800:	0800996d 	.word	0x0800996d
 8009804:	0800998f 	.word	0x0800998f
 8009808:	080099c7 	.word	0x080099c7
 800980c:	080099eb 	.word	0x080099eb
 8009810:	20000404 	.word	0x20000404

08009814 <stdio_exit_handler>:
 8009814:	4a02      	ldr	r2, [pc, #8]	; (8009820 <stdio_exit_handler+0xc>)
 8009816:	4903      	ldr	r1, [pc, #12]	; (8009824 <stdio_exit_handler+0x10>)
 8009818:	4803      	ldr	r0, [pc, #12]	; (8009828 <stdio_exit_handler+0x14>)
 800981a:	f000 b869 	b.w	80098f0 <_fwalk_sglue>
 800981e:	bf00      	nop
 8009820:	2000003c 	.word	0x2000003c
 8009824:	0800b4c5 	.word	0x0800b4c5
 8009828:	20000048 	.word	0x20000048

0800982c <cleanup_stdio>:
 800982c:	6841      	ldr	r1, [r0, #4]
 800982e:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <cleanup_stdio+0x34>)
 8009830:	b510      	push	{r4, lr}
 8009832:	4299      	cmp	r1, r3
 8009834:	4604      	mov	r4, r0
 8009836:	d001      	beq.n	800983c <cleanup_stdio+0x10>
 8009838:	f001 fe44 	bl	800b4c4 <_fflush_r>
 800983c:	68a1      	ldr	r1, [r4, #8]
 800983e:	4b09      	ldr	r3, [pc, #36]	; (8009864 <cleanup_stdio+0x38>)
 8009840:	4299      	cmp	r1, r3
 8009842:	d002      	beq.n	800984a <cleanup_stdio+0x1e>
 8009844:	4620      	mov	r0, r4
 8009846:	f001 fe3d 	bl	800b4c4 <_fflush_r>
 800984a:	68e1      	ldr	r1, [r4, #12]
 800984c:	4b06      	ldr	r3, [pc, #24]	; (8009868 <cleanup_stdio+0x3c>)
 800984e:	4299      	cmp	r1, r3
 8009850:	d004      	beq.n	800985c <cleanup_stdio+0x30>
 8009852:	4620      	mov	r0, r4
 8009854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009858:	f001 be34 	b.w	800b4c4 <_fflush_r>
 800985c:	bd10      	pop	{r4, pc}
 800985e:	bf00      	nop
 8009860:	20000404 	.word	0x20000404
 8009864:	2000046c 	.word	0x2000046c
 8009868:	200004d4 	.word	0x200004d4

0800986c <global_stdio_init.part.0>:
 800986c:	b510      	push	{r4, lr}
 800986e:	4b0b      	ldr	r3, [pc, #44]	; (800989c <global_stdio_init.part.0+0x30>)
 8009870:	4c0b      	ldr	r4, [pc, #44]	; (80098a0 <global_stdio_init.part.0+0x34>)
 8009872:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <global_stdio_init.part.0+0x38>)
 8009874:	4620      	mov	r0, r4
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	2104      	movs	r1, #4
 800987a:	2200      	movs	r2, #0
 800987c:	f7ff ff94 	bl	80097a8 <std>
 8009880:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009884:	2201      	movs	r2, #1
 8009886:	2109      	movs	r1, #9
 8009888:	f7ff ff8e 	bl	80097a8 <std>
 800988c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009890:	2202      	movs	r2, #2
 8009892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009896:	2112      	movs	r1, #18
 8009898:	f7ff bf86 	b.w	80097a8 <std>
 800989c:	2000053c 	.word	0x2000053c
 80098a0:	20000404 	.word	0x20000404
 80098a4:	08009815 	.word	0x08009815

080098a8 <__sfp_lock_acquire>:
 80098a8:	4801      	ldr	r0, [pc, #4]	; (80098b0 <__sfp_lock_acquire+0x8>)
 80098aa:	f000 b932 	b.w	8009b12 <__retarget_lock_acquire_recursive>
 80098ae:	bf00      	nop
 80098b0:	20000545 	.word	0x20000545

080098b4 <__sfp_lock_release>:
 80098b4:	4801      	ldr	r0, [pc, #4]	; (80098bc <__sfp_lock_release+0x8>)
 80098b6:	f000 b92d 	b.w	8009b14 <__retarget_lock_release_recursive>
 80098ba:	bf00      	nop
 80098bc:	20000545 	.word	0x20000545

080098c0 <__sinit>:
 80098c0:	b510      	push	{r4, lr}
 80098c2:	4604      	mov	r4, r0
 80098c4:	f7ff fff0 	bl	80098a8 <__sfp_lock_acquire>
 80098c8:	6a23      	ldr	r3, [r4, #32]
 80098ca:	b11b      	cbz	r3, 80098d4 <__sinit+0x14>
 80098cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098d0:	f7ff bff0 	b.w	80098b4 <__sfp_lock_release>
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <__sinit+0x28>)
 80098d6:	6223      	str	r3, [r4, #32]
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <__sinit+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f5      	bne.n	80098cc <__sinit+0xc>
 80098e0:	f7ff ffc4 	bl	800986c <global_stdio_init.part.0>
 80098e4:	e7f2      	b.n	80098cc <__sinit+0xc>
 80098e6:	bf00      	nop
 80098e8:	0800982d 	.word	0x0800982d
 80098ec:	2000053c 	.word	0x2000053c

080098f0 <_fwalk_sglue>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4607      	mov	r7, r0
 80098f6:	4688      	mov	r8, r1
 80098f8:	4614      	mov	r4, r2
 80098fa:	2600      	movs	r6, #0
 80098fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009900:	f1b9 0901 	subs.w	r9, r9, #1
 8009904:	d505      	bpl.n	8009912 <_fwalk_sglue+0x22>
 8009906:	6824      	ldr	r4, [r4, #0]
 8009908:	2c00      	cmp	r4, #0
 800990a:	d1f7      	bne.n	80098fc <_fwalk_sglue+0xc>
 800990c:	4630      	mov	r0, r6
 800990e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d907      	bls.n	8009928 <_fwalk_sglue+0x38>
 8009918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800991c:	3301      	adds	r3, #1
 800991e:	d003      	beq.n	8009928 <_fwalk_sglue+0x38>
 8009920:	4629      	mov	r1, r5
 8009922:	4638      	mov	r0, r7
 8009924:	47c0      	blx	r8
 8009926:	4306      	orrs	r6, r0
 8009928:	3568      	adds	r5, #104	; 0x68
 800992a:	e7e9      	b.n	8009900 <_fwalk_sglue+0x10>

0800992c <siprintf>:
 800992c:	b40e      	push	{r1, r2, r3}
 800992e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009932:	b500      	push	{lr}
 8009934:	b09c      	sub	sp, #112	; 0x70
 8009936:	ab1d      	add	r3, sp, #116	; 0x74
 8009938:	9002      	str	r0, [sp, #8]
 800993a:	9006      	str	r0, [sp, #24]
 800993c:	9107      	str	r1, [sp, #28]
 800993e:	9104      	str	r1, [sp, #16]
 8009940:	4808      	ldr	r0, [pc, #32]	; (8009964 <siprintf+0x38>)
 8009942:	4909      	ldr	r1, [pc, #36]	; (8009968 <siprintf+0x3c>)
 8009944:	f853 2b04 	ldr.w	r2, [r3], #4
 8009948:	9105      	str	r1, [sp, #20]
 800994a:	6800      	ldr	r0, [r0, #0]
 800994c:	a902      	add	r1, sp, #8
 800994e:	9301      	str	r3, [sp, #4]
 8009950:	f001 fc38 	bl	800b1c4 <_svfiprintf_r>
 8009954:	2200      	movs	r2, #0
 8009956:	9b02      	ldr	r3, [sp, #8]
 8009958:	701a      	strb	r2, [r3, #0]
 800995a:	b01c      	add	sp, #112	; 0x70
 800995c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009960:	b003      	add	sp, #12
 8009962:	4770      	bx	lr
 8009964:	20000094 	.word	0x20000094
 8009968:	ffff0208 	.word	0xffff0208

0800996c <__sread>:
 800996c:	b510      	push	{r4, lr}
 800996e:	460c      	mov	r4, r1
 8009970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009974:	f000 f87e 	bl	8009a74 <_read_r>
 8009978:	2800      	cmp	r0, #0
 800997a:	bfab      	itete	ge
 800997c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800997e:	89a3      	ldrhlt	r3, [r4, #12]
 8009980:	181b      	addge	r3, r3, r0
 8009982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009986:	bfac      	ite	ge
 8009988:	6563      	strge	r3, [r4, #84]	; 0x54
 800998a:	81a3      	strhlt	r3, [r4, #12]
 800998c:	bd10      	pop	{r4, pc}

0800998e <__swrite>:
 800998e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009992:	461f      	mov	r7, r3
 8009994:	898b      	ldrh	r3, [r1, #12]
 8009996:	4605      	mov	r5, r0
 8009998:	05db      	lsls	r3, r3, #23
 800999a:	460c      	mov	r4, r1
 800999c:	4616      	mov	r6, r2
 800999e:	d505      	bpl.n	80099ac <__swrite+0x1e>
 80099a0:	2302      	movs	r3, #2
 80099a2:	2200      	movs	r2, #0
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	f000 f852 	bl	8009a50 <_lseek_r>
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	4632      	mov	r2, r6
 80099b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	4628      	mov	r0, r5
 80099b8:	463b      	mov	r3, r7
 80099ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099c2:	f000 b869 	b.w	8009a98 <_write_r>

080099c6 <__sseek>:
 80099c6:	b510      	push	{r4, lr}
 80099c8:	460c      	mov	r4, r1
 80099ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ce:	f000 f83f 	bl	8009a50 <_lseek_r>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	bf15      	itete	ne
 80099d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80099da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099e2:	81a3      	strheq	r3, [r4, #12]
 80099e4:	bf18      	it	ne
 80099e6:	81a3      	strhne	r3, [r4, #12]
 80099e8:	bd10      	pop	{r4, pc}

080099ea <__sclose>:
 80099ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ee:	f000 b81f 	b.w	8009a30 <_close_r>

080099f2 <memset>:
 80099f2:	4603      	mov	r3, r0
 80099f4:	4402      	add	r2, r0
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d100      	bne.n	80099fc <memset+0xa>
 80099fa:	4770      	bx	lr
 80099fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009a00:	e7f9      	b.n	80099f6 <memset+0x4>

08009a02 <strncpy>:
 8009a02:	4603      	mov	r3, r0
 8009a04:	b510      	push	{r4, lr}
 8009a06:	3901      	subs	r1, #1
 8009a08:	b132      	cbz	r2, 8009a18 <strncpy+0x16>
 8009a0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009a0e:	3a01      	subs	r2, #1
 8009a10:	f803 4b01 	strb.w	r4, [r3], #1
 8009a14:	2c00      	cmp	r4, #0
 8009a16:	d1f7      	bne.n	8009a08 <strncpy+0x6>
 8009a18:	2100      	movs	r1, #0
 8009a1a:	441a      	add	r2, r3
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d100      	bne.n	8009a22 <strncpy+0x20>
 8009a20:	bd10      	pop	{r4, pc}
 8009a22:	f803 1b01 	strb.w	r1, [r3], #1
 8009a26:	e7f9      	b.n	8009a1c <strncpy+0x1a>

08009a28 <_localeconv_r>:
 8009a28:	4800      	ldr	r0, [pc, #0]	; (8009a2c <_localeconv_r+0x4>)
 8009a2a:	4770      	bx	lr
 8009a2c:	20000188 	.word	0x20000188

08009a30 <_close_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	2300      	movs	r3, #0
 8009a34:	4d05      	ldr	r5, [pc, #20]	; (8009a4c <_close_r+0x1c>)
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	602b      	str	r3, [r5, #0]
 8009a3c:	f7f7 fc23 	bl	8001286 <_close>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d102      	bne.n	8009a4a <_close_r+0x1a>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	b103      	cbz	r3, 8009a4a <_close_r+0x1a>
 8009a48:	6023      	str	r3, [r4, #0]
 8009a4a:	bd38      	pop	{r3, r4, r5, pc}
 8009a4c:	20000540 	.word	0x20000540

08009a50 <_lseek_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	2200      	movs	r2, #0
 8009a5a:	4d05      	ldr	r5, [pc, #20]	; (8009a70 <_lseek_r+0x20>)
 8009a5c:	602a      	str	r2, [r5, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f7f7 fc35 	bl	80012ce <_lseek>
 8009a64:	1c43      	adds	r3, r0, #1
 8009a66:	d102      	bne.n	8009a6e <_lseek_r+0x1e>
 8009a68:	682b      	ldr	r3, [r5, #0]
 8009a6a:	b103      	cbz	r3, 8009a6e <_lseek_r+0x1e>
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	20000540 	.word	0x20000540

08009a74 <_read_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	4611      	mov	r1, r2
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	4d05      	ldr	r5, [pc, #20]	; (8009a94 <_read_r+0x20>)
 8009a80:	602a      	str	r2, [r5, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	f7f7 fbc6 	bl	8001214 <_read>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d102      	bne.n	8009a92 <_read_r+0x1e>
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	b103      	cbz	r3, 8009a92 <_read_r+0x1e>
 8009a90:	6023      	str	r3, [r4, #0]
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	20000540 	.word	0x20000540

08009a98 <_write_r>:
 8009a98:	b538      	push	{r3, r4, r5, lr}
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	4d05      	ldr	r5, [pc, #20]	; (8009ab8 <_write_r+0x20>)
 8009aa4:	602a      	str	r2, [r5, #0]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f7f7 fbd1 	bl	800124e <_write>
 8009aac:	1c43      	adds	r3, r0, #1
 8009aae:	d102      	bne.n	8009ab6 <_write_r+0x1e>
 8009ab0:	682b      	ldr	r3, [r5, #0]
 8009ab2:	b103      	cbz	r3, 8009ab6 <_write_r+0x1e>
 8009ab4:	6023      	str	r3, [r4, #0]
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	20000540 	.word	0x20000540

08009abc <__errno>:
 8009abc:	4b01      	ldr	r3, [pc, #4]	; (8009ac4 <__errno+0x8>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	4770      	bx	lr
 8009ac2:	bf00      	nop
 8009ac4:	20000094 	.word	0x20000094

08009ac8 <__libc_init_array>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	2600      	movs	r6, #0
 8009acc:	4d0c      	ldr	r5, [pc, #48]	; (8009b00 <__libc_init_array+0x38>)
 8009ace:	4c0d      	ldr	r4, [pc, #52]	; (8009b04 <__libc_init_array+0x3c>)
 8009ad0:	1b64      	subs	r4, r4, r5
 8009ad2:	10a4      	asrs	r4, r4, #2
 8009ad4:	42a6      	cmp	r6, r4
 8009ad6:	d109      	bne.n	8009aec <__libc_init_array+0x24>
 8009ad8:	f002 f886 	bl	800bbe8 <_init>
 8009adc:	2600      	movs	r6, #0
 8009ade:	4d0a      	ldr	r5, [pc, #40]	; (8009b08 <__libc_init_array+0x40>)
 8009ae0:	4c0a      	ldr	r4, [pc, #40]	; (8009b0c <__libc_init_array+0x44>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	42a6      	cmp	r6, r4
 8009ae8:	d105      	bne.n	8009af6 <__libc_init_array+0x2e>
 8009aea:	bd70      	pop	{r4, r5, r6, pc}
 8009aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af0:	4798      	blx	r3
 8009af2:	3601      	adds	r6, #1
 8009af4:	e7ee      	b.n	8009ad4 <__libc_init_array+0xc>
 8009af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009afa:	4798      	blx	r3
 8009afc:	3601      	adds	r6, #1
 8009afe:	e7f2      	b.n	8009ae6 <__libc_init_array+0x1e>
 8009b00:	0800bfdc 	.word	0x0800bfdc
 8009b04:	0800bfdc 	.word	0x0800bfdc
 8009b08:	0800bfdc 	.word	0x0800bfdc
 8009b0c:	0800bfe0 	.word	0x0800bfe0

08009b10 <__retarget_lock_init_recursive>:
 8009b10:	4770      	bx	lr

08009b12 <__retarget_lock_acquire_recursive>:
 8009b12:	4770      	bx	lr

08009b14 <__retarget_lock_release_recursive>:
 8009b14:	4770      	bx	lr

08009b16 <memchr>:
 8009b16:	4603      	mov	r3, r0
 8009b18:	b510      	push	{r4, lr}
 8009b1a:	b2c9      	uxtb	r1, r1
 8009b1c:	4402      	add	r2, r0
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	d101      	bne.n	8009b28 <memchr+0x12>
 8009b24:	2000      	movs	r0, #0
 8009b26:	e003      	b.n	8009b30 <memchr+0x1a>
 8009b28:	7804      	ldrb	r4, [r0, #0]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	428c      	cmp	r4, r1
 8009b2e:	d1f6      	bne.n	8009b1e <memchr+0x8>
 8009b30:	bd10      	pop	{r4, pc}

08009b32 <memcpy>:
 8009b32:	440a      	add	r2, r1
 8009b34:	4291      	cmp	r1, r2
 8009b36:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b3a:	d100      	bne.n	8009b3e <memcpy+0xc>
 8009b3c:	4770      	bx	lr
 8009b3e:	b510      	push	{r4, lr}
 8009b40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b44:	4291      	cmp	r1, r2
 8009b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b4a:	d1f9      	bne.n	8009b40 <memcpy+0xe>
 8009b4c:	bd10      	pop	{r4, pc}

08009b4e <quorem>:
 8009b4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b52:	6903      	ldr	r3, [r0, #16]
 8009b54:	690c      	ldr	r4, [r1, #16]
 8009b56:	4607      	mov	r7, r0
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	db7f      	blt.n	8009c5c <quorem+0x10e>
 8009b5c:	3c01      	subs	r4, #1
 8009b5e:	f100 0514 	add.w	r5, r0, #20
 8009b62:	f101 0814 	add.w	r8, r1, #20
 8009b66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b6a:	9301      	str	r3, [sp, #4]
 8009b6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b74:	3301      	adds	r3, #1
 8009b76:	429a      	cmp	r2, r3
 8009b78:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b84:	d331      	bcc.n	8009bea <quorem+0x9c>
 8009b86:	f04f 0e00 	mov.w	lr, #0
 8009b8a:	4640      	mov	r0, r8
 8009b8c:	46ac      	mov	ip, r5
 8009b8e:	46f2      	mov	sl, lr
 8009b90:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b94:	b293      	uxth	r3, r2
 8009b96:	fb06 e303 	mla	r3, r6, r3, lr
 8009b9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b9e:	0c1a      	lsrs	r2, r3, #16
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	fb06 220e 	mla	r2, r6, lr, r2
 8009ba6:	ebaa 0303 	sub.w	r3, sl, r3
 8009baa:	f8dc a000 	ldr.w	sl, [ip]
 8009bae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bb2:	fa1f fa8a 	uxth.w	sl, sl
 8009bb6:	4453      	add	r3, sl
 8009bb8:	f8dc a000 	ldr.w	sl, [ip]
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bcc:	4581      	cmp	r9, r0
 8009bce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009bd2:	f84c 3b04 	str.w	r3, [ip], #4
 8009bd6:	d2db      	bcs.n	8009b90 <quorem+0x42>
 8009bd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009bdc:	b92b      	cbnz	r3, 8009bea <quorem+0x9c>
 8009bde:	9b01      	ldr	r3, [sp, #4]
 8009be0:	3b04      	subs	r3, #4
 8009be2:	429d      	cmp	r5, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	d32d      	bcc.n	8009c44 <quorem+0xf6>
 8009be8:	613c      	str	r4, [r7, #16]
 8009bea:	4638      	mov	r0, r7
 8009bec:	f001 f992 	bl	800af14 <__mcmp>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	db23      	blt.n	8009c3c <quorem+0xee>
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	2000      	movs	r0, #0
 8009bf8:	3601      	adds	r6, #1
 8009bfa:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bfe:	f8d1 c000 	ldr.w	ip, [r1]
 8009c02:	b293      	uxth	r3, r2
 8009c04:	1ac3      	subs	r3, r0, r3
 8009c06:	0c12      	lsrs	r2, r2, #16
 8009c08:	fa1f f08c 	uxth.w	r0, ip
 8009c0c:	4403      	add	r3, r0
 8009c0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009c12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c1c:	45c1      	cmp	r9, r8
 8009c1e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009c22:	f841 3b04 	str.w	r3, [r1], #4
 8009c26:	d2e8      	bcs.n	8009bfa <quorem+0xac>
 8009c28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c30:	b922      	cbnz	r2, 8009c3c <quorem+0xee>
 8009c32:	3b04      	subs	r3, #4
 8009c34:	429d      	cmp	r5, r3
 8009c36:	461a      	mov	r2, r3
 8009c38:	d30a      	bcc.n	8009c50 <quorem+0x102>
 8009c3a:	613c      	str	r4, [r7, #16]
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	b003      	add	sp, #12
 8009c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c44:	6812      	ldr	r2, [r2, #0]
 8009c46:	3b04      	subs	r3, #4
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	d1cd      	bne.n	8009be8 <quorem+0x9a>
 8009c4c:	3c01      	subs	r4, #1
 8009c4e:	e7c8      	b.n	8009be2 <quorem+0x94>
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	3b04      	subs	r3, #4
 8009c54:	2a00      	cmp	r2, #0
 8009c56:	d1f0      	bne.n	8009c3a <quorem+0xec>
 8009c58:	3c01      	subs	r4, #1
 8009c5a:	e7eb      	b.n	8009c34 <quorem+0xe6>
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e7ee      	b.n	8009c3e <quorem+0xf0>

08009c60 <_dtoa_r>:
 8009c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c64:	4616      	mov	r6, r2
 8009c66:	461f      	mov	r7, r3
 8009c68:	69c4      	ldr	r4, [r0, #28]
 8009c6a:	b099      	sub	sp, #100	; 0x64
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009c72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009c76:	b974      	cbnz	r4, 8009c96 <_dtoa_r+0x36>
 8009c78:	2010      	movs	r0, #16
 8009c7a:	f000 fe1d 	bl	800a8b8 <malloc>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	61e8      	str	r0, [r5, #28]
 8009c82:	b920      	cbnz	r0, 8009c8e <_dtoa_r+0x2e>
 8009c84:	21ef      	movs	r1, #239	; 0xef
 8009c86:	4bac      	ldr	r3, [pc, #688]	; (8009f38 <_dtoa_r+0x2d8>)
 8009c88:	48ac      	ldr	r0, [pc, #688]	; (8009f3c <_dtoa_r+0x2dc>)
 8009c8a:	f001 fc6d 	bl	800b568 <__assert_func>
 8009c8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c92:	6004      	str	r4, [r0, #0]
 8009c94:	60c4      	str	r4, [r0, #12]
 8009c96:	69eb      	ldr	r3, [r5, #28]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	b151      	cbz	r1, 8009cb2 <_dtoa_r+0x52>
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4093      	lsls	r3, r2
 8009ca2:	604a      	str	r2, [r1, #4]
 8009ca4:	608b      	str	r3, [r1, #8]
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f000 fefa 	bl	800aaa0 <_Bfree>
 8009cac:	2200      	movs	r2, #0
 8009cae:	69eb      	ldr	r3, [r5, #28]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	1e3b      	subs	r3, r7, #0
 8009cb4:	bfaf      	iteee	ge
 8009cb6:	2300      	movge	r3, #0
 8009cb8:	2201      	movlt	r2, #1
 8009cba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009cbe:	9305      	strlt	r3, [sp, #20]
 8009cc0:	bfa8      	it	ge
 8009cc2:	f8c8 3000 	strge.w	r3, [r8]
 8009cc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009cca:	4b9d      	ldr	r3, [pc, #628]	; (8009f40 <_dtoa_r+0x2e0>)
 8009ccc:	bfb8      	it	lt
 8009cce:	f8c8 2000 	strlt.w	r2, [r8]
 8009cd2:	ea33 0309 	bics.w	r3, r3, r9
 8009cd6:	d119      	bne.n	8009d0c <_dtoa_r+0xac>
 8009cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009cdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009cde:	6013      	str	r3, [r2, #0]
 8009ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ce4:	4333      	orrs	r3, r6
 8009ce6:	f000 8589 	beq.w	800a7fc <_dtoa_r+0xb9c>
 8009cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009cec:	b953      	cbnz	r3, 8009d04 <_dtoa_r+0xa4>
 8009cee:	4b95      	ldr	r3, [pc, #596]	; (8009f44 <_dtoa_r+0x2e4>)
 8009cf0:	e023      	b.n	8009d3a <_dtoa_r+0xda>
 8009cf2:	4b95      	ldr	r3, [pc, #596]	; (8009f48 <_dtoa_r+0x2e8>)
 8009cf4:	9303      	str	r3, [sp, #12]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	9803      	ldr	r0, [sp, #12]
 8009cfe:	b019      	add	sp, #100	; 0x64
 8009d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d04:	4b8f      	ldr	r3, [pc, #572]	; (8009f44 <_dtoa_r+0x2e4>)
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	3303      	adds	r3, #3
 8009d0a:	e7f5      	b.n	8009cf8 <_dtoa_r+0x98>
 8009d0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009d10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7f6 fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8009d20:	4680      	mov	r8, r0
 8009d22:	b160      	cbz	r0, 8009d3e <_dtoa_r+0xde>
 8009d24:	2301      	movs	r3, #1
 8009d26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f000 8562 	beq.w	800a7f6 <_dtoa_r+0xb96>
 8009d32:	4b86      	ldr	r3, [pc, #536]	; (8009f4c <_dtoa_r+0x2ec>)
 8009d34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009d36:	6013      	str	r3, [r2, #0]
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	e7de      	b.n	8009cfc <_dtoa_r+0x9c>
 8009d3e:	ab16      	add	r3, sp, #88	; 0x58
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	ab17      	add	r3, sp, #92	; 0x5c
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4628      	mov	r0, r5
 8009d48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009d4c:	f001 f98a 	bl	800b064 <__d2b>
 8009d50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009d54:	4682      	mov	sl, r0
 8009d56:	2c00      	cmp	r4, #0
 8009d58:	d07e      	beq.n	8009e58 <_dtoa_r+0x1f8>
 8009d5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d68:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009d6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009d74:	4619      	mov	r1, r3
 8009d76:	2200      	movs	r2, #0
 8009d78:	4b75      	ldr	r3, [pc, #468]	; (8009f50 <_dtoa_r+0x2f0>)
 8009d7a:	f7f6 f9f5 	bl	8000168 <__aeabi_dsub>
 8009d7e:	a368      	add	r3, pc, #416	; (adr r3, 8009f20 <_dtoa_r+0x2c0>)
 8009d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d84:	f7f6 fba8 	bl	80004d8 <__aeabi_dmul>
 8009d88:	a367      	add	r3, pc, #412	; (adr r3, 8009f28 <_dtoa_r+0x2c8>)
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	f7f6 f9ed 	bl	800016c <__adddf3>
 8009d92:	4606      	mov	r6, r0
 8009d94:	4620      	mov	r0, r4
 8009d96:	460f      	mov	r7, r1
 8009d98:	f7f6 fb34 	bl	8000404 <__aeabi_i2d>
 8009d9c:	a364      	add	r3, pc, #400	; (adr r3, 8009f30 <_dtoa_r+0x2d0>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fb99 	bl	80004d8 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4630      	mov	r0, r6
 8009dac:	4639      	mov	r1, r7
 8009dae:	f7f6 f9dd 	bl	800016c <__adddf3>
 8009db2:	4606      	mov	r6, r0
 8009db4:	460f      	mov	r7, r1
 8009db6:	f7f6 fe3f 	bl	8000a38 <__aeabi_d2iz>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4683      	mov	fp, r0
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4630      	mov	r0, r6
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	f7f6 fdfa 	bl	80009bc <__aeabi_dcmplt>
 8009dc8:	b148      	cbz	r0, 8009dde <_dtoa_r+0x17e>
 8009dca:	4658      	mov	r0, fp
 8009dcc:	f7f6 fb1a 	bl	8000404 <__aeabi_i2d>
 8009dd0:	4632      	mov	r2, r6
 8009dd2:	463b      	mov	r3, r7
 8009dd4:	f7f6 fde8 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd8:	b908      	cbnz	r0, 8009dde <_dtoa_r+0x17e>
 8009dda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dde:	f1bb 0f16 	cmp.w	fp, #22
 8009de2:	d857      	bhi.n	8009e94 <_dtoa_r+0x234>
 8009de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009de8:	4b5a      	ldr	r3, [pc, #360]	; (8009f54 <_dtoa_r+0x2f4>)
 8009dea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fde3 	bl	80009bc <__aeabi_dcmplt>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d04e      	beq.n	8009e98 <_dtoa_r+0x238>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e04:	1b1b      	subs	r3, r3, r4
 8009e06:	1e5a      	subs	r2, r3, #1
 8009e08:	bf46      	itte	mi
 8009e0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8009e0e:	2300      	movmi	r3, #0
 8009e10:	f04f 0900 	movpl.w	r9, #0
 8009e14:	9209      	str	r2, [sp, #36]	; 0x24
 8009e16:	bf48      	it	mi
 8009e18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009e1a:	f1bb 0f00 	cmp.w	fp, #0
 8009e1e:	db3d      	blt.n	8009e9c <_dtoa_r+0x23c>
 8009e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009e26:	445b      	add	r3, fp
 8009e28:	9309      	str	r3, [sp, #36]	; 0x24
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009e2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e30:	2b09      	cmp	r3, #9
 8009e32:	d867      	bhi.n	8009f04 <_dtoa_r+0x2a4>
 8009e34:	2b05      	cmp	r3, #5
 8009e36:	bfc4      	itt	gt
 8009e38:	3b04      	subgt	r3, #4
 8009e3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009e3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009e3e:	bfc8      	it	gt
 8009e40:	2400      	movgt	r4, #0
 8009e42:	f1a3 0302 	sub.w	r3, r3, #2
 8009e46:	bfd8      	it	le
 8009e48:	2401      	movle	r4, #1
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	f200 8086 	bhi.w	8009f5c <_dtoa_r+0x2fc>
 8009e50:	e8df f003 	tbb	[pc, r3]
 8009e54:	5637392c 	.word	0x5637392c
 8009e58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009e5c:	441c      	add	r4, r3
 8009e5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	bfc1      	itttt	gt
 8009e66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8009e6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009e72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009e76:	bfd6      	itet	le
 8009e78:	f1c3 0320 	rsble	r3, r3, #32
 8009e7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009e80:	fa06 f003 	lslle.w	r0, r6, r3
 8009e84:	f7f6 faae 	bl	80003e4 <__aeabi_ui2d>
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009e8e:	3c01      	subs	r4, #1
 8009e90:	9213      	str	r2, [sp, #76]	; 0x4c
 8009e92:	e76f      	b.n	8009d74 <_dtoa_r+0x114>
 8009e94:	2301      	movs	r3, #1
 8009e96:	e7b3      	b.n	8009e00 <_dtoa_r+0x1a0>
 8009e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8009e9a:	e7b2      	b.n	8009e02 <_dtoa_r+0x1a2>
 8009e9c:	f1cb 0300 	rsb	r3, fp, #0
 8009ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	eba9 090b 	sub.w	r9, r9, fp
 8009ea8:	930e      	str	r3, [sp, #56]	; 0x38
 8009eaa:	e7c0      	b.n	8009e2e <_dtoa_r+0x1ce>
 8009eac:	2300      	movs	r3, #0
 8009eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	dc55      	bgt.n	8009f62 <_dtoa_r+0x302>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	461a      	mov	r2, r3
 8009eba:	9306      	str	r3, [sp, #24]
 8009ebc:	9308      	str	r3, [sp, #32]
 8009ebe:	9223      	str	r2, [sp, #140]	; 0x8c
 8009ec0:	e00b      	b.n	8009eda <_dtoa_r+0x27a>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7f3      	b.n	8009eae <_dtoa_r+0x24e>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ecc:	445b      	add	r3, fp
 8009ece:	9306      	str	r3, [sp, #24]
 8009ed0:	3301      	adds	r3, #1
 8009ed2:	2b01      	cmp	r3, #1
 8009ed4:	9308      	str	r3, [sp, #32]
 8009ed6:	bfb8      	it	lt
 8009ed8:	2301      	movlt	r3, #1
 8009eda:	2100      	movs	r1, #0
 8009edc:	2204      	movs	r2, #4
 8009ede:	69e8      	ldr	r0, [r5, #28]
 8009ee0:	f102 0614 	add.w	r6, r2, #20
 8009ee4:	429e      	cmp	r6, r3
 8009ee6:	d940      	bls.n	8009f6a <_dtoa_r+0x30a>
 8009ee8:	6041      	str	r1, [r0, #4]
 8009eea:	4628      	mov	r0, r5
 8009eec:	f000 fd98 	bl	800aa20 <_Balloc>
 8009ef0:	9003      	str	r0, [sp, #12]
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	d13c      	bne.n	8009f70 <_dtoa_r+0x310>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	f240 11af 	movw	r1, #431	; 0x1af
 8009efc:	4b16      	ldr	r3, [pc, #88]	; (8009f58 <_dtoa_r+0x2f8>)
 8009efe:	e6c3      	b.n	8009c88 <_dtoa_r+0x28>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e7e1      	b.n	8009ec8 <_dtoa_r+0x268>
 8009f04:	2401      	movs	r4, #1
 8009f06:	2300      	movs	r3, #0
 8009f08:	940b      	str	r4, [sp, #44]	; 0x2c
 8009f0a:	9322      	str	r3, [sp, #136]	; 0x88
 8009f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f10:	2200      	movs	r2, #0
 8009f12:	9306      	str	r3, [sp, #24]
 8009f14:	9308      	str	r3, [sp, #32]
 8009f16:	2312      	movs	r3, #18
 8009f18:	e7d1      	b.n	8009ebe <_dtoa_r+0x25e>
 8009f1a:	bf00      	nop
 8009f1c:	f3af 8000 	nop.w
 8009f20:	636f4361 	.word	0x636f4361
 8009f24:	3fd287a7 	.word	0x3fd287a7
 8009f28:	8b60c8b3 	.word	0x8b60c8b3
 8009f2c:	3fc68a28 	.word	0x3fc68a28
 8009f30:	509f79fb 	.word	0x509f79fb
 8009f34:	3fd34413 	.word	0x3fd34413
 8009f38:	0800bcaf 	.word	0x0800bcaf
 8009f3c:	0800bcc6 	.word	0x0800bcc6
 8009f40:	7ff00000 	.word	0x7ff00000
 8009f44:	0800bcab 	.word	0x0800bcab
 8009f48:	0800bca2 	.word	0x0800bca2
 8009f4c:	0800bc7f 	.word	0x0800bc7f
 8009f50:	3ff80000 	.word	0x3ff80000
 8009f54:	0800bdb0 	.word	0x0800bdb0
 8009f58:	0800bd1e 	.word	0x0800bd1e
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f60:	e7d4      	b.n	8009f0c <_dtoa_r+0x2ac>
 8009f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f64:	9306      	str	r3, [sp, #24]
 8009f66:	9308      	str	r3, [sp, #32]
 8009f68:	e7b7      	b.n	8009eda <_dtoa_r+0x27a>
 8009f6a:	3101      	adds	r1, #1
 8009f6c:	0052      	lsls	r2, r2, #1
 8009f6e:	e7b7      	b.n	8009ee0 <_dtoa_r+0x280>
 8009f70:	69eb      	ldr	r3, [r5, #28]
 8009f72:	9a03      	ldr	r2, [sp, #12]
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	9b08      	ldr	r3, [sp, #32]
 8009f78:	2b0e      	cmp	r3, #14
 8009f7a:	f200 80a8 	bhi.w	800a0ce <_dtoa_r+0x46e>
 8009f7e:	2c00      	cmp	r4, #0
 8009f80:	f000 80a5 	beq.w	800a0ce <_dtoa_r+0x46e>
 8009f84:	f1bb 0f00 	cmp.w	fp, #0
 8009f88:	dd34      	ble.n	8009ff4 <_dtoa_r+0x394>
 8009f8a:	4b9a      	ldr	r3, [pc, #616]	; (800a1f4 <_dtoa_r+0x594>)
 8009f8c:	f00b 020f 	and.w	r2, fp, #15
 8009f90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009fa0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009fa4:	d016      	beq.n	8009fd4 <_dtoa_r+0x374>
 8009fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009faa:	4b93      	ldr	r3, [pc, #588]	; (800a1f8 <_dtoa_r+0x598>)
 8009fac:	2703      	movs	r7, #3
 8009fae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009fb2:	f7f6 fbbb 	bl	800072c <__aeabi_ddiv>
 8009fb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fba:	f004 040f 	and.w	r4, r4, #15
 8009fbe:	4e8e      	ldr	r6, [pc, #568]	; (800a1f8 <_dtoa_r+0x598>)
 8009fc0:	b954      	cbnz	r4, 8009fd8 <_dtoa_r+0x378>
 8009fc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fca:	f7f6 fbaf 	bl	800072c <__aeabi_ddiv>
 8009fce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009fd2:	e029      	b.n	800a028 <_dtoa_r+0x3c8>
 8009fd4:	2702      	movs	r7, #2
 8009fd6:	e7f2      	b.n	8009fbe <_dtoa_r+0x35e>
 8009fd8:	07e1      	lsls	r1, r4, #31
 8009fda:	d508      	bpl.n	8009fee <_dtoa_r+0x38e>
 8009fdc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009fe0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fe4:	f7f6 fa78 	bl	80004d8 <__aeabi_dmul>
 8009fe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009fec:	3701      	adds	r7, #1
 8009fee:	1064      	asrs	r4, r4, #1
 8009ff0:	3608      	adds	r6, #8
 8009ff2:	e7e5      	b.n	8009fc0 <_dtoa_r+0x360>
 8009ff4:	f000 80a5 	beq.w	800a142 <_dtoa_r+0x4e2>
 8009ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ffc:	f1cb 0400 	rsb	r4, fp, #0
 800a000:	4b7c      	ldr	r3, [pc, #496]	; (800a1f4 <_dtoa_r+0x594>)
 800a002:	f004 020f 	and.w	r2, r4, #15
 800a006:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 fa63 	bl	80004d8 <__aeabi_dmul>
 800a012:	2702      	movs	r7, #2
 800a014:	2300      	movs	r3, #0
 800a016:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a01a:	4e77      	ldr	r6, [pc, #476]	; (800a1f8 <_dtoa_r+0x598>)
 800a01c:	1124      	asrs	r4, r4, #4
 800a01e:	2c00      	cmp	r4, #0
 800a020:	f040 8084 	bne.w	800a12c <_dtoa_r+0x4cc>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1d2      	bne.n	8009fce <_dtoa_r+0x36e>
 800a028:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a02c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a030:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8087 	beq.w	800a146 <_dtoa_r+0x4e6>
 800a038:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a03c:	2200      	movs	r2, #0
 800a03e:	4b6f      	ldr	r3, [pc, #444]	; (800a1fc <_dtoa_r+0x59c>)
 800a040:	f7f6 fcbc 	bl	80009bc <__aeabi_dcmplt>
 800a044:	2800      	cmp	r0, #0
 800a046:	d07e      	beq.n	800a146 <_dtoa_r+0x4e6>
 800a048:	9b08      	ldr	r3, [sp, #32]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d07b      	beq.n	800a146 <_dtoa_r+0x4e6>
 800a04e:	9b06      	ldr	r3, [sp, #24]
 800a050:	2b00      	cmp	r3, #0
 800a052:	dd38      	ble.n	800a0c6 <_dtoa_r+0x466>
 800a054:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a058:	2200      	movs	r2, #0
 800a05a:	4b69      	ldr	r3, [pc, #420]	; (800a200 <_dtoa_r+0x5a0>)
 800a05c:	f7f6 fa3c 	bl	80004d8 <__aeabi_dmul>
 800a060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a064:	9c06      	ldr	r4, [sp, #24]
 800a066:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a06a:	3701      	adds	r7, #1
 800a06c:	4638      	mov	r0, r7
 800a06e:	f7f6 f9c9 	bl	8000404 <__aeabi_i2d>
 800a072:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a076:	f7f6 fa2f 	bl	80004d8 <__aeabi_dmul>
 800a07a:	2200      	movs	r2, #0
 800a07c:	4b61      	ldr	r3, [pc, #388]	; (800a204 <_dtoa_r+0x5a4>)
 800a07e:	f7f6 f875 	bl	800016c <__adddf3>
 800a082:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a086:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a08a:	9611      	str	r6, [sp, #68]	; 0x44
 800a08c:	2c00      	cmp	r4, #0
 800a08e:	d15d      	bne.n	800a14c <_dtoa_r+0x4ec>
 800a090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a094:	2200      	movs	r2, #0
 800a096:	4b5c      	ldr	r3, [pc, #368]	; (800a208 <_dtoa_r+0x5a8>)
 800a098:	f7f6 f866 	bl	8000168 <__aeabi_dsub>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a0a4:	4633      	mov	r3, r6
 800a0a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0a8:	f7f6 fca6 	bl	80009f8 <__aeabi_dcmpgt>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	f040 8295 	bne.w	800a5dc <_dtoa_r+0x97c>
 800a0b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a0bc:	f7f6 fc7e 	bl	80009bc <__aeabi_dcmplt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f040 8289 	bne.w	800a5d8 <_dtoa_r+0x978>
 800a0c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a0ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a0ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f2c0 8151 	blt.w	800a378 <_dtoa_r+0x718>
 800a0d6:	f1bb 0f0e 	cmp.w	fp, #14
 800a0da:	f300 814d 	bgt.w	800a378 <_dtoa_r+0x718>
 800a0de:	4b45      	ldr	r3, [pc, #276]	; (800a1f4 <_dtoa_r+0x594>)
 800a0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a0e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a0ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f280 80da 	bge.w	800a2a8 <_dtoa_r+0x648>
 800a0f4:	9b08      	ldr	r3, [sp, #32]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f300 80d6 	bgt.w	800a2a8 <_dtoa_r+0x648>
 800a0fc:	f040 826b 	bne.w	800a5d6 <_dtoa_r+0x976>
 800a100:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a104:	2200      	movs	r2, #0
 800a106:	4b40      	ldr	r3, [pc, #256]	; (800a208 <_dtoa_r+0x5a8>)
 800a108:	f7f6 f9e6 	bl	80004d8 <__aeabi_dmul>
 800a10c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a110:	f7f6 fc68 	bl	80009e4 <__aeabi_dcmpge>
 800a114:	9c08      	ldr	r4, [sp, #32]
 800a116:	4626      	mov	r6, r4
 800a118:	2800      	cmp	r0, #0
 800a11a:	f040 8241 	bne.w	800a5a0 <_dtoa_r+0x940>
 800a11e:	2331      	movs	r3, #49	; 0x31
 800a120:	9f03      	ldr	r7, [sp, #12]
 800a122:	f10b 0b01 	add.w	fp, fp, #1
 800a126:	f807 3b01 	strb.w	r3, [r7], #1
 800a12a:	e23d      	b.n	800a5a8 <_dtoa_r+0x948>
 800a12c:	07e2      	lsls	r2, r4, #31
 800a12e:	d505      	bpl.n	800a13c <_dtoa_r+0x4dc>
 800a130:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a134:	f7f6 f9d0 	bl	80004d8 <__aeabi_dmul>
 800a138:	2301      	movs	r3, #1
 800a13a:	3701      	adds	r7, #1
 800a13c:	1064      	asrs	r4, r4, #1
 800a13e:	3608      	adds	r6, #8
 800a140:	e76d      	b.n	800a01e <_dtoa_r+0x3be>
 800a142:	2702      	movs	r7, #2
 800a144:	e770      	b.n	800a028 <_dtoa_r+0x3c8>
 800a146:	46d8      	mov	r8, fp
 800a148:	9c08      	ldr	r4, [sp, #32]
 800a14a:	e78f      	b.n	800a06c <_dtoa_r+0x40c>
 800a14c:	9903      	ldr	r1, [sp, #12]
 800a14e:	4b29      	ldr	r3, [pc, #164]	; (800a1f4 <_dtoa_r+0x594>)
 800a150:	4421      	add	r1, r4
 800a152:	9112      	str	r1, [sp, #72]	; 0x48
 800a154:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a156:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a15a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a15e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a162:	2900      	cmp	r1, #0
 800a164:	d054      	beq.n	800a210 <_dtoa_r+0x5b0>
 800a166:	2000      	movs	r0, #0
 800a168:	4928      	ldr	r1, [pc, #160]	; (800a20c <_dtoa_r+0x5ac>)
 800a16a:	f7f6 fadf 	bl	800072c <__aeabi_ddiv>
 800a16e:	463b      	mov	r3, r7
 800a170:	4632      	mov	r2, r6
 800a172:	f7f5 fff9 	bl	8000168 <__aeabi_dsub>
 800a176:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a17a:	9f03      	ldr	r7, [sp, #12]
 800a17c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a180:	f7f6 fc5a 	bl	8000a38 <__aeabi_d2iz>
 800a184:	4604      	mov	r4, r0
 800a186:	f7f6 f93d 	bl	8000404 <__aeabi_i2d>
 800a18a:	4602      	mov	r2, r0
 800a18c:	460b      	mov	r3, r1
 800a18e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a192:	f7f5 ffe9 	bl	8000168 <__aeabi_dsub>
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	3430      	adds	r4, #48	; 0x30
 800a19c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1a4:	f807 4b01 	strb.w	r4, [r7], #1
 800a1a8:	f7f6 fc08 	bl	80009bc <__aeabi_dcmplt>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d173      	bne.n	800a298 <_dtoa_r+0x638>
 800a1b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	4911      	ldr	r1, [pc, #68]	; (800a1fc <_dtoa_r+0x59c>)
 800a1b8:	f7f5 ffd6 	bl	8000168 <__aeabi_dsub>
 800a1bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a1c0:	f7f6 fbfc 	bl	80009bc <__aeabi_dcmplt>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	f040 80b6 	bne.w	800a336 <_dtoa_r+0x6d6>
 800a1ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1cc:	429f      	cmp	r7, r3
 800a1ce:	f43f af7a 	beq.w	800a0c6 <_dtoa_r+0x466>
 800a1d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	4b09      	ldr	r3, [pc, #36]	; (800a200 <_dtoa_r+0x5a0>)
 800a1da:	f7f6 f97d 	bl	80004d8 <__aeabi_dmul>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a1e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1e8:	4b05      	ldr	r3, [pc, #20]	; (800a200 <_dtoa_r+0x5a0>)
 800a1ea:	f7f6 f975 	bl	80004d8 <__aeabi_dmul>
 800a1ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a1f2:	e7c3      	b.n	800a17c <_dtoa_r+0x51c>
 800a1f4:	0800bdb0 	.word	0x0800bdb0
 800a1f8:	0800bd88 	.word	0x0800bd88
 800a1fc:	3ff00000 	.word	0x3ff00000
 800a200:	40240000 	.word	0x40240000
 800a204:	401c0000 	.word	0x401c0000
 800a208:	40140000 	.word	0x40140000
 800a20c:	3fe00000 	.word	0x3fe00000
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 f960 	bl	80004d8 <__aeabi_dmul>
 800a218:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a21a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a21e:	9c03      	ldr	r4, [sp, #12]
 800a220:	9314      	str	r3, [sp, #80]	; 0x50
 800a222:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a226:	f7f6 fc07 	bl	8000a38 <__aeabi_d2iz>
 800a22a:	9015      	str	r0, [sp, #84]	; 0x54
 800a22c:	f7f6 f8ea 	bl	8000404 <__aeabi_i2d>
 800a230:	4602      	mov	r2, r0
 800a232:	460b      	mov	r3, r1
 800a234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a238:	f7f5 ff96 	bl	8000168 <__aeabi_dsub>
 800a23c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a23e:	4606      	mov	r6, r0
 800a240:	3330      	adds	r3, #48	; 0x30
 800a242:	f804 3b01 	strb.w	r3, [r4], #1
 800a246:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a248:	460f      	mov	r7, r1
 800a24a:	429c      	cmp	r4, r3
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	d124      	bne.n	800a29c <_dtoa_r+0x63c>
 800a252:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a256:	4baf      	ldr	r3, [pc, #700]	; (800a514 <_dtoa_r+0x8b4>)
 800a258:	f7f5 ff88 	bl	800016c <__adddf3>
 800a25c:	4602      	mov	r2, r0
 800a25e:	460b      	mov	r3, r1
 800a260:	4630      	mov	r0, r6
 800a262:	4639      	mov	r1, r7
 800a264:	f7f6 fbc8 	bl	80009f8 <__aeabi_dcmpgt>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d163      	bne.n	800a334 <_dtoa_r+0x6d4>
 800a26c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a270:	2000      	movs	r0, #0
 800a272:	49a8      	ldr	r1, [pc, #672]	; (800a514 <_dtoa_r+0x8b4>)
 800a274:	f7f5 ff78 	bl	8000168 <__aeabi_dsub>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fb9c 	bl	80009bc <__aeabi_dcmplt>
 800a284:	2800      	cmp	r0, #0
 800a286:	f43f af1e 	beq.w	800a0c6 <_dtoa_r+0x466>
 800a28a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a28c:	1e7b      	subs	r3, r7, #1
 800a28e:	9314      	str	r3, [sp, #80]	; 0x50
 800a290:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a294:	2b30      	cmp	r3, #48	; 0x30
 800a296:	d0f8      	beq.n	800a28a <_dtoa_r+0x62a>
 800a298:	46c3      	mov	fp, r8
 800a29a:	e03b      	b.n	800a314 <_dtoa_r+0x6b4>
 800a29c:	4b9e      	ldr	r3, [pc, #632]	; (800a518 <_dtoa_r+0x8b8>)
 800a29e:	f7f6 f91b 	bl	80004d8 <__aeabi_dmul>
 800a2a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2a6:	e7bc      	b.n	800a222 <_dtoa_r+0x5c2>
 800a2a8:	9f03      	ldr	r7, [sp, #12]
 800a2aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a2ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	f7f6 fa39 	bl	800072c <__aeabi_ddiv>
 800a2ba:	f7f6 fbbd 	bl	8000a38 <__aeabi_d2iz>
 800a2be:	4604      	mov	r4, r0
 800a2c0:	f7f6 f8a0 	bl	8000404 <__aeabi_i2d>
 800a2c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2c8:	f7f6 f906 	bl	80004d8 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	4640      	mov	r0, r8
 800a2d2:	4649      	mov	r1, r9
 800a2d4:	f7f5 ff48 	bl	8000168 <__aeabi_dsub>
 800a2d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a2dc:	f807 6b01 	strb.w	r6, [r7], #1
 800a2e0:	9e03      	ldr	r6, [sp, #12]
 800a2e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a2e6:	1bbe      	subs	r6, r7, r6
 800a2e8:	45b4      	cmp	ip, r6
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	d136      	bne.n	800a35e <_dtoa_r+0x6fe>
 800a2f0:	f7f5 ff3c 	bl	800016c <__adddf3>
 800a2f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2f8:	4680      	mov	r8, r0
 800a2fa:	4689      	mov	r9, r1
 800a2fc:	f7f6 fb7c 	bl	80009f8 <__aeabi_dcmpgt>
 800a300:	bb58      	cbnz	r0, 800a35a <_dtoa_r+0x6fa>
 800a302:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a306:	4640      	mov	r0, r8
 800a308:	4649      	mov	r1, r9
 800a30a:	f7f6 fb4d 	bl	80009a8 <__aeabi_dcmpeq>
 800a30e:	b108      	cbz	r0, 800a314 <_dtoa_r+0x6b4>
 800a310:	07e3      	lsls	r3, r4, #31
 800a312:	d422      	bmi.n	800a35a <_dtoa_r+0x6fa>
 800a314:	4651      	mov	r1, sl
 800a316:	4628      	mov	r0, r5
 800a318:	f000 fbc2 	bl	800aaa0 <_Bfree>
 800a31c:	2300      	movs	r3, #0
 800a31e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a320:	703b      	strb	r3, [r7, #0]
 800a322:	f10b 0301 	add.w	r3, fp, #1
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f43f ace6 	beq.w	8009cfc <_dtoa_r+0x9c>
 800a330:	601f      	str	r7, [r3, #0]
 800a332:	e4e3      	b.n	8009cfc <_dtoa_r+0x9c>
 800a334:	4627      	mov	r7, r4
 800a336:	463b      	mov	r3, r7
 800a338:	461f      	mov	r7, r3
 800a33a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a33e:	2a39      	cmp	r2, #57	; 0x39
 800a340:	d107      	bne.n	800a352 <_dtoa_r+0x6f2>
 800a342:	9a03      	ldr	r2, [sp, #12]
 800a344:	429a      	cmp	r2, r3
 800a346:	d1f7      	bne.n	800a338 <_dtoa_r+0x6d8>
 800a348:	2230      	movs	r2, #48	; 0x30
 800a34a:	9903      	ldr	r1, [sp, #12]
 800a34c:	f108 0801 	add.w	r8, r8, #1
 800a350:	700a      	strb	r2, [r1, #0]
 800a352:	781a      	ldrb	r2, [r3, #0]
 800a354:	3201      	adds	r2, #1
 800a356:	701a      	strb	r2, [r3, #0]
 800a358:	e79e      	b.n	800a298 <_dtoa_r+0x638>
 800a35a:	46d8      	mov	r8, fp
 800a35c:	e7eb      	b.n	800a336 <_dtoa_r+0x6d6>
 800a35e:	2200      	movs	r2, #0
 800a360:	4b6d      	ldr	r3, [pc, #436]	; (800a518 <_dtoa_r+0x8b8>)
 800a362:	f7f6 f8b9 	bl	80004d8 <__aeabi_dmul>
 800a366:	2200      	movs	r2, #0
 800a368:	2300      	movs	r3, #0
 800a36a:	4680      	mov	r8, r0
 800a36c:	4689      	mov	r9, r1
 800a36e:	f7f6 fb1b 	bl	80009a8 <__aeabi_dcmpeq>
 800a372:	2800      	cmp	r0, #0
 800a374:	d09b      	beq.n	800a2ae <_dtoa_r+0x64e>
 800a376:	e7cd      	b.n	800a314 <_dtoa_r+0x6b4>
 800a378:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a37a:	2a00      	cmp	r2, #0
 800a37c:	f000 80c4 	beq.w	800a508 <_dtoa_r+0x8a8>
 800a380:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a382:	2a01      	cmp	r2, #1
 800a384:	f300 80a8 	bgt.w	800a4d8 <_dtoa_r+0x878>
 800a388:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	f000 80a0 	beq.w	800a4d0 <_dtoa_r+0x870>
 800a390:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a394:	464f      	mov	r7, r9
 800a396:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a39a:	2101      	movs	r1, #1
 800a39c:	441a      	add	r2, r3
 800a39e:	4628      	mov	r0, r5
 800a3a0:	4499      	add	r9, r3
 800a3a2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3a4:	f000 fc32 	bl	800ac0c <__i2b>
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	b15f      	cbz	r7, 800a3c4 <_dtoa_r+0x764>
 800a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	dd08      	ble.n	800a3c4 <_dtoa_r+0x764>
 800a3b2:	42bb      	cmp	r3, r7
 800a3b4:	bfa8      	it	ge
 800a3b6:	463b      	movge	r3, r7
 800a3b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3ba:	eba9 0903 	sub.w	r9, r9, r3
 800a3be:	1aff      	subs	r7, r7, r3
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c6:	b1f3      	cbz	r3, 800a406 <_dtoa_r+0x7a6>
 800a3c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 80a0 	beq.w	800a510 <_dtoa_r+0x8b0>
 800a3d0:	2c00      	cmp	r4, #0
 800a3d2:	dd10      	ble.n	800a3f6 <_dtoa_r+0x796>
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4622      	mov	r2, r4
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f000 fcd5 	bl	800ad88 <__pow5mult>
 800a3de:	4652      	mov	r2, sl
 800a3e0:	4601      	mov	r1, r0
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	f000 fc27 	bl	800ac38 <__multiply>
 800a3ea:	4680      	mov	r8, r0
 800a3ec:	4651      	mov	r1, sl
 800a3ee:	4628      	mov	r0, r5
 800a3f0:	f000 fb56 	bl	800aaa0 <_Bfree>
 800a3f4:	46c2      	mov	sl, r8
 800a3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3f8:	1b1a      	subs	r2, r3, r4
 800a3fa:	d004      	beq.n	800a406 <_dtoa_r+0x7a6>
 800a3fc:	4651      	mov	r1, sl
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 fcc2 	bl	800ad88 <__pow5mult>
 800a404:	4682      	mov	sl, r0
 800a406:	2101      	movs	r1, #1
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 fbff 	bl	800ac0c <__i2b>
 800a40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a410:	4604      	mov	r4, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	f340 8082 	ble.w	800a51c <_dtoa_r+0x8bc>
 800a418:	461a      	mov	r2, r3
 800a41a:	4601      	mov	r1, r0
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 fcb3 	bl	800ad88 <__pow5mult>
 800a422:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a424:	4604      	mov	r4, r0
 800a426:	2b01      	cmp	r3, #1
 800a428:	dd7b      	ble.n	800a522 <_dtoa_r+0x8c2>
 800a42a:	f04f 0800 	mov.w	r8, #0
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a434:	6918      	ldr	r0, [r3, #16]
 800a436:	f000 fb9b 	bl	800ab70 <__hi0bits>
 800a43a:	f1c0 0020 	rsb	r0, r0, #32
 800a43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a440:	4418      	add	r0, r3
 800a442:	f010 001f 	ands.w	r0, r0, #31
 800a446:	f000 8092 	beq.w	800a56e <_dtoa_r+0x90e>
 800a44a:	f1c0 0320 	rsb	r3, r0, #32
 800a44e:	2b04      	cmp	r3, #4
 800a450:	f340 8085 	ble.w	800a55e <_dtoa_r+0x8fe>
 800a454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a456:	f1c0 001c 	rsb	r0, r0, #28
 800a45a:	4403      	add	r3, r0
 800a45c:	4481      	add	r9, r0
 800a45e:	4407      	add	r7, r0
 800a460:	9309      	str	r3, [sp, #36]	; 0x24
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	dd05      	ble.n	800a474 <_dtoa_r+0x814>
 800a468:	4651      	mov	r1, sl
 800a46a:	464a      	mov	r2, r9
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 fce5 	bl	800ae3c <__lshift>
 800a472:	4682      	mov	sl, r0
 800a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	dd05      	ble.n	800a486 <_dtoa_r+0x826>
 800a47a:	4621      	mov	r1, r4
 800a47c:	461a      	mov	r2, r3
 800a47e:	4628      	mov	r0, r5
 800a480:	f000 fcdc 	bl	800ae3c <__lshift>
 800a484:	4604      	mov	r4, r0
 800a486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d072      	beq.n	800a572 <_dtoa_r+0x912>
 800a48c:	4621      	mov	r1, r4
 800a48e:	4650      	mov	r0, sl
 800a490:	f000 fd40 	bl	800af14 <__mcmp>
 800a494:	2800      	cmp	r0, #0
 800a496:	da6c      	bge.n	800a572 <_dtoa_r+0x912>
 800a498:	2300      	movs	r3, #0
 800a49a:	4651      	mov	r1, sl
 800a49c:	220a      	movs	r2, #10
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 fb20 	bl	800aae4 <__multadd>
 800a4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4a6:	4682      	mov	sl, r0
 800a4a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 81ac 	beq.w	800a80a <_dtoa_r+0xbaa>
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	220a      	movs	r2, #10
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f000 fb13 	bl	800aae4 <__multadd>
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f300 8093 	bgt.w	800a5ee <_dtoa_r+0x98e>
 800a4c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	dc59      	bgt.n	800a582 <_dtoa_r+0x922>
 800a4ce:	e08e      	b.n	800a5ee <_dtoa_r+0x98e>
 800a4d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a4d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a4d6:	e75d      	b.n	800a394 <_dtoa_r+0x734>
 800a4d8:	9b08      	ldr	r3, [sp, #32]
 800a4da:	1e5c      	subs	r4, r3, #1
 800a4dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4de:	42a3      	cmp	r3, r4
 800a4e0:	bfbf      	itttt	lt
 800a4e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a4e6:	1ae3      	sublt	r3, r4, r3
 800a4e8:	18d2      	addlt	r2, r2, r3
 800a4ea:	bfa8      	it	ge
 800a4ec:	1b1c      	subge	r4, r3, r4
 800a4ee:	9b08      	ldr	r3, [sp, #32]
 800a4f0:	bfbe      	ittt	lt
 800a4f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a4f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a4f6:	2400      	movlt	r4, #0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bfb5      	itete	lt
 800a4fc:	eba9 0703 	sublt.w	r7, r9, r3
 800a500:	464f      	movge	r7, r9
 800a502:	2300      	movlt	r3, #0
 800a504:	9b08      	ldrge	r3, [sp, #32]
 800a506:	e747      	b.n	800a398 <_dtoa_r+0x738>
 800a508:	464f      	mov	r7, r9
 800a50a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a50c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a50e:	e74c      	b.n	800a3aa <_dtoa_r+0x74a>
 800a510:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a512:	e773      	b.n	800a3fc <_dtoa_r+0x79c>
 800a514:	3fe00000 	.word	0x3fe00000
 800a518:	40240000 	.word	0x40240000
 800a51c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a51e:	2b01      	cmp	r3, #1
 800a520:	dc18      	bgt.n	800a554 <_dtoa_r+0x8f4>
 800a522:	9b04      	ldr	r3, [sp, #16]
 800a524:	b9b3      	cbnz	r3, 800a554 <_dtoa_r+0x8f4>
 800a526:	9b05      	ldr	r3, [sp, #20]
 800a528:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a52c:	b993      	cbnz	r3, 800a554 <_dtoa_r+0x8f4>
 800a52e:	9b05      	ldr	r3, [sp, #20]
 800a530:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a534:	0d1b      	lsrs	r3, r3, #20
 800a536:	051b      	lsls	r3, r3, #20
 800a538:	b17b      	cbz	r3, 800a55a <_dtoa_r+0x8fa>
 800a53a:	f04f 0801 	mov.w	r8, #1
 800a53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a540:	f109 0901 	add.w	r9, r9, #1
 800a544:	3301      	adds	r3, #1
 800a546:	9309      	str	r3, [sp, #36]	; 0x24
 800a548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f47f af6f 	bne.w	800a42e <_dtoa_r+0x7ce>
 800a550:	2001      	movs	r0, #1
 800a552:	e774      	b.n	800a43e <_dtoa_r+0x7de>
 800a554:	f04f 0800 	mov.w	r8, #0
 800a558:	e7f6      	b.n	800a548 <_dtoa_r+0x8e8>
 800a55a:	4698      	mov	r8, r3
 800a55c:	e7f4      	b.n	800a548 <_dtoa_r+0x8e8>
 800a55e:	d080      	beq.n	800a462 <_dtoa_r+0x802>
 800a560:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a562:	331c      	adds	r3, #28
 800a564:	441a      	add	r2, r3
 800a566:	4499      	add	r9, r3
 800a568:	441f      	add	r7, r3
 800a56a:	9209      	str	r2, [sp, #36]	; 0x24
 800a56c:	e779      	b.n	800a462 <_dtoa_r+0x802>
 800a56e:	4603      	mov	r3, r0
 800a570:	e7f6      	b.n	800a560 <_dtoa_r+0x900>
 800a572:	9b08      	ldr	r3, [sp, #32]
 800a574:	2b00      	cmp	r3, #0
 800a576:	dc34      	bgt.n	800a5e2 <_dtoa_r+0x982>
 800a578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	dd31      	ble.n	800a5e2 <_dtoa_r+0x982>
 800a57e:	9b08      	ldr	r3, [sp, #32]
 800a580:	9306      	str	r3, [sp, #24]
 800a582:	9b06      	ldr	r3, [sp, #24]
 800a584:	b963      	cbnz	r3, 800a5a0 <_dtoa_r+0x940>
 800a586:	4621      	mov	r1, r4
 800a588:	2205      	movs	r2, #5
 800a58a:	4628      	mov	r0, r5
 800a58c:	f000 faaa 	bl	800aae4 <__multadd>
 800a590:	4601      	mov	r1, r0
 800a592:	4604      	mov	r4, r0
 800a594:	4650      	mov	r0, sl
 800a596:	f000 fcbd 	bl	800af14 <__mcmp>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f73f adbf 	bgt.w	800a11e <_dtoa_r+0x4be>
 800a5a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a5a2:	9f03      	ldr	r7, [sp, #12]
 800a5a4:	ea6f 0b03 	mvn.w	fp, r3
 800a5a8:	f04f 0800 	mov.w	r8, #0
 800a5ac:	4621      	mov	r1, r4
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	f000 fa76 	bl	800aaa0 <_Bfree>
 800a5b4:	2e00      	cmp	r6, #0
 800a5b6:	f43f aead 	beq.w	800a314 <_dtoa_r+0x6b4>
 800a5ba:	f1b8 0f00 	cmp.w	r8, #0
 800a5be:	d005      	beq.n	800a5cc <_dtoa_r+0x96c>
 800a5c0:	45b0      	cmp	r8, r6
 800a5c2:	d003      	beq.n	800a5cc <_dtoa_r+0x96c>
 800a5c4:	4641      	mov	r1, r8
 800a5c6:	4628      	mov	r0, r5
 800a5c8:	f000 fa6a 	bl	800aaa0 <_Bfree>
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 fa66 	bl	800aaa0 <_Bfree>
 800a5d4:	e69e      	b.n	800a314 <_dtoa_r+0x6b4>
 800a5d6:	2400      	movs	r4, #0
 800a5d8:	4626      	mov	r6, r4
 800a5da:	e7e1      	b.n	800a5a0 <_dtoa_r+0x940>
 800a5dc:	46c3      	mov	fp, r8
 800a5de:	4626      	mov	r6, r4
 800a5e0:	e59d      	b.n	800a11e <_dtoa_r+0x4be>
 800a5e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f000 80c8 	beq.w	800a77a <_dtoa_r+0xb1a>
 800a5ea:	9b08      	ldr	r3, [sp, #32]
 800a5ec:	9306      	str	r3, [sp, #24]
 800a5ee:	2f00      	cmp	r7, #0
 800a5f0:	dd05      	ble.n	800a5fe <_dtoa_r+0x99e>
 800a5f2:	4631      	mov	r1, r6
 800a5f4:	463a      	mov	r2, r7
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 fc20 	bl	800ae3c <__lshift>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	f1b8 0f00 	cmp.w	r8, #0
 800a602:	d05b      	beq.n	800a6bc <_dtoa_r+0xa5c>
 800a604:	4628      	mov	r0, r5
 800a606:	6871      	ldr	r1, [r6, #4]
 800a608:	f000 fa0a 	bl	800aa20 <_Balloc>
 800a60c:	4607      	mov	r7, r0
 800a60e:	b928      	cbnz	r0, 800a61c <_dtoa_r+0x9bc>
 800a610:	4602      	mov	r2, r0
 800a612:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a616:	4b81      	ldr	r3, [pc, #516]	; (800a81c <_dtoa_r+0xbbc>)
 800a618:	f7ff bb36 	b.w	8009c88 <_dtoa_r+0x28>
 800a61c:	6932      	ldr	r2, [r6, #16]
 800a61e:	f106 010c 	add.w	r1, r6, #12
 800a622:	3202      	adds	r2, #2
 800a624:	0092      	lsls	r2, r2, #2
 800a626:	300c      	adds	r0, #12
 800a628:	f7ff fa83 	bl	8009b32 <memcpy>
 800a62c:	2201      	movs	r2, #1
 800a62e:	4639      	mov	r1, r7
 800a630:	4628      	mov	r0, r5
 800a632:	f000 fc03 	bl	800ae3c <__lshift>
 800a636:	46b0      	mov	r8, r6
 800a638:	4606      	mov	r6, r0
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	9a03      	ldr	r2, [sp, #12]
 800a63e:	3301      	adds	r3, #1
 800a640:	9308      	str	r3, [sp, #32]
 800a642:	9b06      	ldr	r3, [sp, #24]
 800a644:	4413      	add	r3, r2
 800a646:	930b      	str	r3, [sp, #44]	; 0x2c
 800a648:	9b04      	ldr	r3, [sp, #16]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	930a      	str	r3, [sp, #40]	; 0x28
 800a650:	9b08      	ldr	r3, [sp, #32]
 800a652:	4621      	mov	r1, r4
 800a654:	3b01      	subs	r3, #1
 800a656:	4650      	mov	r0, sl
 800a658:	9304      	str	r3, [sp, #16]
 800a65a:	f7ff fa78 	bl	8009b4e <quorem>
 800a65e:	4641      	mov	r1, r8
 800a660:	9006      	str	r0, [sp, #24]
 800a662:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a666:	4650      	mov	r0, sl
 800a668:	f000 fc54 	bl	800af14 <__mcmp>
 800a66c:	4632      	mov	r2, r6
 800a66e:	9009      	str	r0, [sp, #36]	; 0x24
 800a670:	4621      	mov	r1, r4
 800a672:	4628      	mov	r0, r5
 800a674:	f000 fc6a 	bl	800af4c <__mdiff>
 800a678:	68c2      	ldr	r2, [r0, #12]
 800a67a:	4607      	mov	r7, r0
 800a67c:	bb02      	cbnz	r2, 800a6c0 <_dtoa_r+0xa60>
 800a67e:	4601      	mov	r1, r0
 800a680:	4650      	mov	r0, sl
 800a682:	f000 fc47 	bl	800af14 <__mcmp>
 800a686:	4602      	mov	r2, r0
 800a688:	4639      	mov	r1, r7
 800a68a:	4628      	mov	r0, r5
 800a68c:	920c      	str	r2, [sp, #48]	; 0x30
 800a68e:	f000 fa07 	bl	800aaa0 <_Bfree>
 800a692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a694:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a696:	9f08      	ldr	r7, [sp, #32]
 800a698:	ea43 0102 	orr.w	r1, r3, r2
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	4319      	orrs	r1, r3
 800a6a0:	d110      	bne.n	800a6c4 <_dtoa_r+0xa64>
 800a6a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6a6:	d029      	beq.n	800a6fc <_dtoa_r+0xa9c>
 800a6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd02      	ble.n	800a6b4 <_dtoa_r+0xa54>
 800a6ae:	9b06      	ldr	r3, [sp, #24]
 800a6b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	f883 9000 	strb.w	r9, [r3]
 800a6ba:	e777      	b.n	800a5ac <_dtoa_r+0x94c>
 800a6bc:	4630      	mov	r0, r6
 800a6be:	e7ba      	b.n	800a636 <_dtoa_r+0x9d6>
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	e7e1      	b.n	800a688 <_dtoa_r+0xa28>
 800a6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	db04      	blt.n	800a6d4 <_dtoa_r+0xa74>
 800a6ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a6cc:	430b      	orrs	r3, r1
 800a6ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a6d0:	430b      	orrs	r3, r1
 800a6d2:	d120      	bne.n	800a716 <_dtoa_r+0xab6>
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	dded      	ble.n	800a6b4 <_dtoa_r+0xa54>
 800a6d8:	4651      	mov	r1, sl
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f000 fbad 	bl	800ae3c <__lshift>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4682      	mov	sl, r0
 800a6e6:	f000 fc15 	bl	800af14 <__mcmp>
 800a6ea:	2800      	cmp	r0, #0
 800a6ec:	dc03      	bgt.n	800a6f6 <_dtoa_r+0xa96>
 800a6ee:	d1e1      	bne.n	800a6b4 <_dtoa_r+0xa54>
 800a6f0:	f019 0f01 	tst.w	r9, #1
 800a6f4:	d0de      	beq.n	800a6b4 <_dtoa_r+0xa54>
 800a6f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6fa:	d1d8      	bne.n	800a6ae <_dtoa_r+0xa4e>
 800a6fc:	2339      	movs	r3, #57	; 0x39
 800a6fe:	9a04      	ldr	r2, [sp, #16]
 800a700:	7013      	strb	r3, [r2, #0]
 800a702:	463b      	mov	r3, r7
 800a704:	461f      	mov	r7, r3
 800a706:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2a39      	cmp	r2, #57	; 0x39
 800a70e:	d06b      	beq.n	800a7e8 <_dtoa_r+0xb88>
 800a710:	3201      	adds	r2, #1
 800a712:	701a      	strb	r2, [r3, #0]
 800a714:	e74a      	b.n	800a5ac <_dtoa_r+0x94c>
 800a716:	2a00      	cmp	r2, #0
 800a718:	dd07      	ble.n	800a72a <_dtoa_r+0xaca>
 800a71a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a71e:	d0ed      	beq.n	800a6fc <_dtoa_r+0xa9c>
 800a720:	9a04      	ldr	r2, [sp, #16]
 800a722:	f109 0301 	add.w	r3, r9, #1
 800a726:	7013      	strb	r3, [r2, #0]
 800a728:	e740      	b.n	800a5ac <_dtoa_r+0x94c>
 800a72a:	9b08      	ldr	r3, [sp, #32]
 800a72c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a72e:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a732:	4293      	cmp	r3, r2
 800a734:	d042      	beq.n	800a7bc <_dtoa_r+0xb5c>
 800a736:	4651      	mov	r1, sl
 800a738:	2300      	movs	r3, #0
 800a73a:	220a      	movs	r2, #10
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 f9d1 	bl	800aae4 <__multadd>
 800a742:	45b0      	cmp	r8, r6
 800a744:	4682      	mov	sl, r0
 800a746:	f04f 0300 	mov.w	r3, #0
 800a74a:	f04f 020a 	mov.w	r2, #10
 800a74e:	4641      	mov	r1, r8
 800a750:	4628      	mov	r0, r5
 800a752:	d107      	bne.n	800a764 <_dtoa_r+0xb04>
 800a754:	f000 f9c6 	bl	800aae4 <__multadd>
 800a758:	4680      	mov	r8, r0
 800a75a:	4606      	mov	r6, r0
 800a75c:	9b08      	ldr	r3, [sp, #32]
 800a75e:	3301      	adds	r3, #1
 800a760:	9308      	str	r3, [sp, #32]
 800a762:	e775      	b.n	800a650 <_dtoa_r+0x9f0>
 800a764:	f000 f9be 	bl	800aae4 <__multadd>
 800a768:	4631      	mov	r1, r6
 800a76a:	4680      	mov	r8, r0
 800a76c:	2300      	movs	r3, #0
 800a76e:	220a      	movs	r2, #10
 800a770:	4628      	mov	r0, r5
 800a772:	f000 f9b7 	bl	800aae4 <__multadd>
 800a776:	4606      	mov	r6, r0
 800a778:	e7f0      	b.n	800a75c <_dtoa_r+0xafc>
 800a77a:	9b08      	ldr	r3, [sp, #32]
 800a77c:	9306      	str	r3, [sp, #24]
 800a77e:	9f03      	ldr	r7, [sp, #12]
 800a780:	4621      	mov	r1, r4
 800a782:	4650      	mov	r0, sl
 800a784:	f7ff f9e3 	bl	8009b4e <quorem>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a78e:	f807 9b01 	strb.w	r9, [r7], #1
 800a792:	1afa      	subs	r2, r7, r3
 800a794:	9b06      	ldr	r3, [sp, #24]
 800a796:	4293      	cmp	r3, r2
 800a798:	dd07      	ble.n	800a7aa <_dtoa_r+0xb4a>
 800a79a:	4651      	mov	r1, sl
 800a79c:	2300      	movs	r3, #0
 800a79e:	220a      	movs	r2, #10
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f99f 	bl	800aae4 <__multadd>
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	e7ea      	b.n	800a780 <_dtoa_r+0xb20>
 800a7aa:	9b06      	ldr	r3, [sp, #24]
 800a7ac:	f04f 0800 	mov.w	r8, #0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bfcc      	ite	gt
 800a7b4:	461f      	movgt	r7, r3
 800a7b6:	2701      	movle	r7, #1
 800a7b8:	9b03      	ldr	r3, [sp, #12]
 800a7ba:	441f      	add	r7, r3
 800a7bc:	4651      	mov	r1, sl
 800a7be:	2201      	movs	r2, #1
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 fb3b 	bl	800ae3c <__lshift>
 800a7c6:	4621      	mov	r1, r4
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	f000 fba3 	bl	800af14 <__mcmp>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	dc97      	bgt.n	800a702 <_dtoa_r+0xaa2>
 800a7d2:	d102      	bne.n	800a7da <_dtoa_r+0xb7a>
 800a7d4:	f019 0f01 	tst.w	r9, #1
 800a7d8:	d193      	bne.n	800a702 <_dtoa_r+0xaa2>
 800a7da:	463b      	mov	r3, r7
 800a7dc:	461f      	mov	r7, r3
 800a7de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7e2:	2a30      	cmp	r2, #48	; 0x30
 800a7e4:	d0fa      	beq.n	800a7dc <_dtoa_r+0xb7c>
 800a7e6:	e6e1      	b.n	800a5ac <_dtoa_r+0x94c>
 800a7e8:	9a03      	ldr	r2, [sp, #12]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d18a      	bne.n	800a704 <_dtoa_r+0xaa4>
 800a7ee:	2331      	movs	r3, #49	; 0x31
 800a7f0:	f10b 0b01 	add.w	fp, fp, #1
 800a7f4:	e797      	b.n	800a726 <_dtoa_r+0xac6>
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <_dtoa_r+0xbc0>)
 800a7f8:	f7ff ba9f 	b.w	8009d3a <_dtoa_r+0xda>
 800a7fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f47f aa77 	bne.w	8009cf2 <_dtoa_r+0x92>
 800a804:	4b07      	ldr	r3, [pc, #28]	; (800a824 <_dtoa_r+0xbc4>)
 800a806:	f7ff ba98 	b.w	8009d3a <_dtoa_r+0xda>
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dcb6      	bgt.n	800a77e <_dtoa_r+0xb1e>
 800a810:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a812:	2b02      	cmp	r3, #2
 800a814:	f73f aeb5 	bgt.w	800a582 <_dtoa_r+0x922>
 800a818:	e7b1      	b.n	800a77e <_dtoa_r+0xb1e>
 800a81a:	bf00      	nop
 800a81c:	0800bd1e 	.word	0x0800bd1e
 800a820:	0800bc7e 	.word	0x0800bc7e
 800a824:	0800bca2 	.word	0x0800bca2

0800a828 <_free_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4605      	mov	r5, r0
 800a82c:	2900      	cmp	r1, #0
 800a82e:	d040      	beq.n	800a8b2 <_free_r+0x8a>
 800a830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a834:	1f0c      	subs	r4, r1, #4
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	18e4      	addlt	r4, r4, r3
 800a83c:	f000 f8e4 	bl	800aa08 <__malloc_lock>
 800a840:	4a1c      	ldr	r2, [pc, #112]	; (800a8b4 <_free_r+0x8c>)
 800a842:	6813      	ldr	r3, [r2, #0]
 800a844:	b933      	cbnz	r3, 800a854 <_free_r+0x2c>
 800a846:	6063      	str	r3, [r4, #4]
 800a848:	6014      	str	r4, [r2, #0]
 800a84a:	4628      	mov	r0, r5
 800a84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a850:	f000 b8e0 	b.w	800aa14 <__malloc_unlock>
 800a854:	42a3      	cmp	r3, r4
 800a856:	d908      	bls.n	800a86a <_free_r+0x42>
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	1821      	adds	r1, r4, r0
 800a85c:	428b      	cmp	r3, r1
 800a85e:	bf01      	itttt	eq
 800a860:	6819      	ldreq	r1, [r3, #0]
 800a862:	685b      	ldreq	r3, [r3, #4]
 800a864:	1809      	addeq	r1, r1, r0
 800a866:	6021      	streq	r1, [r4, #0]
 800a868:	e7ed      	b.n	800a846 <_free_r+0x1e>
 800a86a:	461a      	mov	r2, r3
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	b10b      	cbz	r3, 800a874 <_free_r+0x4c>
 800a870:	42a3      	cmp	r3, r4
 800a872:	d9fa      	bls.n	800a86a <_free_r+0x42>
 800a874:	6811      	ldr	r1, [r2, #0]
 800a876:	1850      	adds	r0, r2, r1
 800a878:	42a0      	cmp	r0, r4
 800a87a:	d10b      	bne.n	800a894 <_free_r+0x6c>
 800a87c:	6820      	ldr	r0, [r4, #0]
 800a87e:	4401      	add	r1, r0
 800a880:	1850      	adds	r0, r2, r1
 800a882:	4283      	cmp	r3, r0
 800a884:	6011      	str	r1, [r2, #0]
 800a886:	d1e0      	bne.n	800a84a <_free_r+0x22>
 800a888:	6818      	ldr	r0, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	4408      	add	r0, r1
 800a88e:	6010      	str	r0, [r2, #0]
 800a890:	6053      	str	r3, [r2, #4]
 800a892:	e7da      	b.n	800a84a <_free_r+0x22>
 800a894:	d902      	bls.n	800a89c <_free_r+0x74>
 800a896:	230c      	movs	r3, #12
 800a898:	602b      	str	r3, [r5, #0]
 800a89a:	e7d6      	b.n	800a84a <_free_r+0x22>
 800a89c:	6820      	ldr	r0, [r4, #0]
 800a89e:	1821      	adds	r1, r4, r0
 800a8a0:	428b      	cmp	r3, r1
 800a8a2:	bf01      	itttt	eq
 800a8a4:	6819      	ldreq	r1, [r3, #0]
 800a8a6:	685b      	ldreq	r3, [r3, #4]
 800a8a8:	1809      	addeq	r1, r1, r0
 800a8aa:	6021      	streq	r1, [r4, #0]
 800a8ac:	6063      	str	r3, [r4, #4]
 800a8ae:	6054      	str	r4, [r2, #4]
 800a8b0:	e7cb      	b.n	800a84a <_free_r+0x22>
 800a8b2:	bd38      	pop	{r3, r4, r5, pc}
 800a8b4:	20000548 	.word	0x20000548

0800a8b8 <malloc>:
 800a8b8:	4b02      	ldr	r3, [pc, #8]	; (800a8c4 <malloc+0xc>)
 800a8ba:	4601      	mov	r1, r0
 800a8bc:	6818      	ldr	r0, [r3, #0]
 800a8be:	f000 b823 	b.w	800a908 <_malloc_r>
 800a8c2:	bf00      	nop
 800a8c4:	20000094 	.word	0x20000094

0800a8c8 <sbrk_aligned>:
 800a8c8:	b570      	push	{r4, r5, r6, lr}
 800a8ca:	4e0e      	ldr	r6, [pc, #56]	; (800a904 <sbrk_aligned+0x3c>)
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	6831      	ldr	r1, [r6, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	b911      	cbnz	r1, 800a8da <sbrk_aligned+0x12>
 800a8d4:	f000 fe38 	bl	800b548 <_sbrk_r>
 800a8d8:	6030      	str	r0, [r6, #0]
 800a8da:	4621      	mov	r1, r4
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f000 fe33 	bl	800b548 <_sbrk_r>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	d00a      	beq.n	800a8fc <sbrk_aligned+0x34>
 800a8e6:	1cc4      	adds	r4, r0, #3
 800a8e8:	f024 0403 	bic.w	r4, r4, #3
 800a8ec:	42a0      	cmp	r0, r4
 800a8ee:	d007      	beq.n	800a900 <sbrk_aligned+0x38>
 800a8f0:	1a21      	subs	r1, r4, r0
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	f000 fe28 	bl	800b548 <_sbrk_r>
 800a8f8:	3001      	adds	r0, #1
 800a8fa:	d101      	bne.n	800a900 <sbrk_aligned+0x38>
 800a8fc:	f04f 34ff 	mov.w	r4, #4294967295
 800a900:	4620      	mov	r0, r4
 800a902:	bd70      	pop	{r4, r5, r6, pc}
 800a904:	2000054c 	.word	0x2000054c

0800a908 <_malloc_r>:
 800a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a90c:	1ccd      	adds	r5, r1, #3
 800a90e:	f025 0503 	bic.w	r5, r5, #3
 800a912:	3508      	adds	r5, #8
 800a914:	2d0c      	cmp	r5, #12
 800a916:	bf38      	it	cc
 800a918:	250c      	movcc	r5, #12
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	4607      	mov	r7, r0
 800a91e:	db01      	blt.n	800a924 <_malloc_r+0x1c>
 800a920:	42a9      	cmp	r1, r5
 800a922:	d905      	bls.n	800a930 <_malloc_r+0x28>
 800a924:	230c      	movs	r3, #12
 800a926:	2600      	movs	r6, #0
 800a928:	603b      	str	r3, [r7, #0]
 800a92a:	4630      	mov	r0, r6
 800a92c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a930:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa04 <_malloc_r+0xfc>
 800a934:	f000 f868 	bl	800aa08 <__malloc_lock>
 800a938:	f8d8 3000 	ldr.w	r3, [r8]
 800a93c:	461c      	mov	r4, r3
 800a93e:	bb5c      	cbnz	r4, 800a998 <_malloc_r+0x90>
 800a940:	4629      	mov	r1, r5
 800a942:	4638      	mov	r0, r7
 800a944:	f7ff ffc0 	bl	800a8c8 <sbrk_aligned>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	4604      	mov	r4, r0
 800a94c:	d155      	bne.n	800a9fa <_malloc_r+0xf2>
 800a94e:	f8d8 4000 	ldr.w	r4, [r8]
 800a952:	4626      	mov	r6, r4
 800a954:	2e00      	cmp	r6, #0
 800a956:	d145      	bne.n	800a9e4 <_malloc_r+0xdc>
 800a958:	2c00      	cmp	r4, #0
 800a95a:	d048      	beq.n	800a9ee <_malloc_r+0xe6>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	4631      	mov	r1, r6
 800a960:	4638      	mov	r0, r7
 800a962:	eb04 0903 	add.w	r9, r4, r3
 800a966:	f000 fdef 	bl	800b548 <_sbrk_r>
 800a96a:	4581      	cmp	r9, r0
 800a96c:	d13f      	bne.n	800a9ee <_malloc_r+0xe6>
 800a96e:	6821      	ldr	r1, [r4, #0]
 800a970:	4638      	mov	r0, r7
 800a972:	1a6d      	subs	r5, r5, r1
 800a974:	4629      	mov	r1, r5
 800a976:	f7ff ffa7 	bl	800a8c8 <sbrk_aligned>
 800a97a:	3001      	adds	r0, #1
 800a97c:	d037      	beq.n	800a9ee <_malloc_r+0xe6>
 800a97e:	6823      	ldr	r3, [r4, #0]
 800a980:	442b      	add	r3, r5
 800a982:	6023      	str	r3, [r4, #0]
 800a984:	f8d8 3000 	ldr.w	r3, [r8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d038      	beq.n	800a9fe <_malloc_r+0xf6>
 800a98c:	685a      	ldr	r2, [r3, #4]
 800a98e:	42a2      	cmp	r2, r4
 800a990:	d12b      	bne.n	800a9ea <_malloc_r+0xe2>
 800a992:	2200      	movs	r2, #0
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	e00f      	b.n	800a9b8 <_malloc_r+0xb0>
 800a998:	6822      	ldr	r2, [r4, #0]
 800a99a:	1b52      	subs	r2, r2, r5
 800a99c:	d41f      	bmi.n	800a9de <_malloc_r+0xd6>
 800a99e:	2a0b      	cmp	r2, #11
 800a9a0:	d917      	bls.n	800a9d2 <_malloc_r+0xca>
 800a9a2:	1961      	adds	r1, r4, r5
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	6025      	str	r5, [r4, #0]
 800a9a8:	bf18      	it	ne
 800a9aa:	6059      	strne	r1, [r3, #4]
 800a9ac:	6863      	ldr	r3, [r4, #4]
 800a9ae:	bf08      	it	eq
 800a9b0:	f8c8 1000 	streq.w	r1, [r8]
 800a9b4:	5162      	str	r2, [r4, r5]
 800a9b6:	604b      	str	r3, [r1, #4]
 800a9b8:	4638      	mov	r0, r7
 800a9ba:	f104 060b 	add.w	r6, r4, #11
 800a9be:	f000 f829 	bl	800aa14 <__malloc_unlock>
 800a9c2:	f026 0607 	bic.w	r6, r6, #7
 800a9c6:	1d23      	adds	r3, r4, #4
 800a9c8:	1af2      	subs	r2, r6, r3
 800a9ca:	d0ae      	beq.n	800a92a <_malloc_r+0x22>
 800a9cc:	1b9b      	subs	r3, r3, r6
 800a9ce:	50a3      	str	r3, [r4, r2]
 800a9d0:	e7ab      	b.n	800a92a <_malloc_r+0x22>
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	6862      	ldr	r2, [r4, #4]
 800a9d6:	d1dd      	bne.n	800a994 <_malloc_r+0x8c>
 800a9d8:	f8c8 2000 	str.w	r2, [r8]
 800a9dc:	e7ec      	b.n	800a9b8 <_malloc_r+0xb0>
 800a9de:	4623      	mov	r3, r4
 800a9e0:	6864      	ldr	r4, [r4, #4]
 800a9e2:	e7ac      	b.n	800a93e <_malloc_r+0x36>
 800a9e4:	4634      	mov	r4, r6
 800a9e6:	6876      	ldr	r6, [r6, #4]
 800a9e8:	e7b4      	b.n	800a954 <_malloc_r+0x4c>
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	e7cc      	b.n	800a988 <_malloc_r+0x80>
 800a9ee:	230c      	movs	r3, #12
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	603b      	str	r3, [r7, #0]
 800a9f4:	f000 f80e 	bl	800aa14 <__malloc_unlock>
 800a9f8:	e797      	b.n	800a92a <_malloc_r+0x22>
 800a9fa:	6025      	str	r5, [r4, #0]
 800a9fc:	e7dc      	b.n	800a9b8 <_malloc_r+0xb0>
 800a9fe:	605b      	str	r3, [r3, #4]
 800aa00:	deff      	udf	#255	; 0xff
 800aa02:	bf00      	nop
 800aa04:	20000548 	.word	0x20000548

0800aa08 <__malloc_lock>:
 800aa08:	4801      	ldr	r0, [pc, #4]	; (800aa10 <__malloc_lock+0x8>)
 800aa0a:	f7ff b882 	b.w	8009b12 <__retarget_lock_acquire_recursive>
 800aa0e:	bf00      	nop
 800aa10:	20000544 	.word	0x20000544

0800aa14 <__malloc_unlock>:
 800aa14:	4801      	ldr	r0, [pc, #4]	; (800aa1c <__malloc_unlock+0x8>)
 800aa16:	f7ff b87d 	b.w	8009b14 <__retarget_lock_release_recursive>
 800aa1a:	bf00      	nop
 800aa1c:	20000544 	.word	0x20000544

0800aa20 <_Balloc>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	69c6      	ldr	r6, [r0, #28]
 800aa24:	4604      	mov	r4, r0
 800aa26:	460d      	mov	r5, r1
 800aa28:	b976      	cbnz	r6, 800aa48 <_Balloc+0x28>
 800aa2a:	2010      	movs	r0, #16
 800aa2c:	f7ff ff44 	bl	800a8b8 <malloc>
 800aa30:	4602      	mov	r2, r0
 800aa32:	61e0      	str	r0, [r4, #28]
 800aa34:	b920      	cbnz	r0, 800aa40 <_Balloc+0x20>
 800aa36:	216b      	movs	r1, #107	; 0x6b
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <_Balloc+0x78>)
 800aa3a:	4818      	ldr	r0, [pc, #96]	; (800aa9c <_Balloc+0x7c>)
 800aa3c:	f000 fd94 	bl	800b568 <__assert_func>
 800aa40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa44:	6006      	str	r6, [r0, #0]
 800aa46:	60c6      	str	r6, [r0, #12]
 800aa48:	69e6      	ldr	r6, [r4, #28]
 800aa4a:	68f3      	ldr	r3, [r6, #12]
 800aa4c:	b183      	cbz	r3, 800aa70 <_Balloc+0x50>
 800aa4e:	69e3      	ldr	r3, [r4, #28]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa56:	b9b8      	cbnz	r0, 800aa88 <_Balloc+0x68>
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa5e:	1d72      	adds	r2, r6, #5
 800aa60:	4620      	mov	r0, r4
 800aa62:	0092      	lsls	r2, r2, #2
 800aa64:	f000 fd9e 	bl	800b5a4 <_calloc_r>
 800aa68:	b160      	cbz	r0, 800aa84 <_Balloc+0x64>
 800aa6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa6e:	e00e      	b.n	800aa8e <_Balloc+0x6e>
 800aa70:	2221      	movs	r2, #33	; 0x21
 800aa72:	2104      	movs	r1, #4
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 fd95 	bl	800b5a4 <_calloc_r>
 800aa7a:	69e3      	ldr	r3, [r4, #28]
 800aa7c:	60f0      	str	r0, [r6, #12]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e4      	bne.n	800aa4e <_Balloc+0x2e>
 800aa84:	2000      	movs	r0, #0
 800aa86:	bd70      	pop	{r4, r5, r6, pc}
 800aa88:	6802      	ldr	r2, [r0, #0]
 800aa8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa94:	e7f7      	b.n	800aa86 <_Balloc+0x66>
 800aa96:	bf00      	nop
 800aa98:	0800bcaf 	.word	0x0800bcaf
 800aa9c:	0800bd2f 	.word	0x0800bd2f

0800aaa0 <_Bfree>:
 800aaa0:	b570      	push	{r4, r5, r6, lr}
 800aaa2:	69c6      	ldr	r6, [r0, #28]
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	b976      	cbnz	r6, 800aac8 <_Bfree+0x28>
 800aaaa:	2010      	movs	r0, #16
 800aaac:	f7ff ff04 	bl	800a8b8 <malloc>
 800aab0:	4602      	mov	r2, r0
 800aab2:	61e8      	str	r0, [r5, #28]
 800aab4:	b920      	cbnz	r0, 800aac0 <_Bfree+0x20>
 800aab6:	218f      	movs	r1, #143	; 0x8f
 800aab8:	4b08      	ldr	r3, [pc, #32]	; (800aadc <_Bfree+0x3c>)
 800aaba:	4809      	ldr	r0, [pc, #36]	; (800aae0 <_Bfree+0x40>)
 800aabc:	f000 fd54 	bl	800b568 <__assert_func>
 800aac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aac4:	6006      	str	r6, [r0, #0]
 800aac6:	60c6      	str	r6, [r0, #12]
 800aac8:	b13c      	cbz	r4, 800aada <_Bfree+0x3a>
 800aaca:	69eb      	ldr	r3, [r5, #28]
 800aacc:	6862      	ldr	r2, [r4, #4]
 800aace:	68db      	ldr	r3, [r3, #12]
 800aad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aad4:	6021      	str	r1, [r4, #0]
 800aad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	0800bcaf 	.word	0x0800bcaf
 800aae0:	0800bd2f 	.word	0x0800bd2f

0800aae4 <__multadd>:
 800aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae8:	4607      	mov	r7, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	461e      	mov	r6, r3
 800aaee:	2000      	movs	r0, #0
 800aaf0:	690d      	ldr	r5, [r1, #16]
 800aaf2:	f101 0c14 	add.w	ip, r1, #20
 800aaf6:	f8dc 3000 	ldr.w	r3, [ip]
 800aafa:	3001      	adds	r0, #1
 800aafc:	b299      	uxth	r1, r3
 800aafe:	fb02 6101 	mla	r1, r2, r1, r6
 800ab02:	0c1e      	lsrs	r6, r3, #16
 800ab04:	0c0b      	lsrs	r3, r1, #16
 800ab06:	fb02 3306 	mla	r3, r2, r6, r3
 800ab0a:	b289      	uxth	r1, r1
 800ab0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ab10:	4285      	cmp	r5, r0
 800ab12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ab16:	f84c 1b04 	str.w	r1, [ip], #4
 800ab1a:	dcec      	bgt.n	800aaf6 <__multadd+0x12>
 800ab1c:	b30e      	cbz	r6, 800ab62 <__multadd+0x7e>
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	dc19      	bgt.n	800ab58 <__multadd+0x74>
 800ab24:	6861      	ldr	r1, [r4, #4]
 800ab26:	4638      	mov	r0, r7
 800ab28:	3101      	adds	r1, #1
 800ab2a:	f7ff ff79 	bl	800aa20 <_Balloc>
 800ab2e:	4680      	mov	r8, r0
 800ab30:	b928      	cbnz	r0, 800ab3e <__multadd+0x5a>
 800ab32:	4602      	mov	r2, r0
 800ab34:	21ba      	movs	r1, #186	; 0xba
 800ab36:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <__multadd+0x84>)
 800ab38:	480c      	ldr	r0, [pc, #48]	; (800ab6c <__multadd+0x88>)
 800ab3a:	f000 fd15 	bl	800b568 <__assert_func>
 800ab3e:	6922      	ldr	r2, [r4, #16]
 800ab40:	f104 010c 	add.w	r1, r4, #12
 800ab44:	3202      	adds	r2, #2
 800ab46:	0092      	lsls	r2, r2, #2
 800ab48:	300c      	adds	r0, #12
 800ab4a:	f7fe fff2 	bl	8009b32 <memcpy>
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ffa5 	bl	800aaa0 <_Bfree>
 800ab56:	4644      	mov	r4, r8
 800ab58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	615e      	str	r6, [r3, #20]
 800ab60:	6125      	str	r5, [r4, #16]
 800ab62:	4620      	mov	r0, r4
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	0800bd1e 	.word	0x0800bd1e
 800ab6c:	0800bd2f 	.word	0x0800bd2f

0800ab70 <__hi0bits>:
 800ab70:	0c02      	lsrs	r2, r0, #16
 800ab72:	0412      	lsls	r2, r2, #16
 800ab74:	4603      	mov	r3, r0
 800ab76:	b9ca      	cbnz	r2, 800abac <__hi0bits+0x3c>
 800ab78:	0403      	lsls	r3, r0, #16
 800ab7a:	2010      	movs	r0, #16
 800ab7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ab80:	bf04      	itt	eq
 800ab82:	021b      	lsleq	r3, r3, #8
 800ab84:	3008      	addeq	r0, #8
 800ab86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ab8a:	bf04      	itt	eq
 800ab8c:	011b      	lsleq	r3, r3, #4
 800ab8e:	3004      	addeq	r0, #4
 800ab90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ab94:	bf04      	itt	eq
 800ab96:	009b      	lsleq	r3, r3, #2
 800ab98:	3002      	addeq	r0, #2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	db05      	blt.n	800abaa <__hi0bits+0x3a>
 800ab9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800aba2:	f100 0001 	add.w	r0, r0, #1
 800aba6:	bf08      	it	eq
 800aba8:	2020      	moveq	r0, #32
 800abaa:	4770      	bx	lr
 800abac:	2000      	movs	r0, #0
 800abae:	e7e5      	b.n	800ab7c <__hi0bits+0xc>

0800abb0 <__lo0bits>:
 800abb0:	6803      	ldr	r3, [r0, #0]
 800abb2:	4602      	mov	r2, r0
 800abb4:	f013 0007 	ands.w	r0, r3, #7
 800abb8:	d00b      	beq.n	800abd2 <__lo0bits+0x22>
 800abba:	07d9      	lsls	r1, r3, #31
 800abbc:	d421      	bmi.n	800ac02 <__lo0bits+0x52>
 800abbe:	0798      	lsls	r0, r3, #30
 800abc0:	bf49      	itett	mi
 800abc2:	085b      	lsrmi	r3, r3, #1
 800abc4:	089b      	lsrpl	r3, r3, #2
 800abc6:	2001      	movmi	r0, #1
 800abc8:	6013      	strmi	r3, [r2, #0]
 800abca:	bf5c      	itt	pl
 800abcc:	2002      	movpl	r0, #2
 800abce:	6013      	strpl	r3, [r2, #0]
 800abd0:	4770      	bx	lr
 800abd2:	b299      	uxth	r1, r3
 800abd4:	b909      	cbnz	r1, 800abda <__lo0bits+0x2a>
 800abd6:	2010      	movs	r0, #16
 800abd8:	0c1b      	lsrs	r3, r3, #16
 800abda:	b2d9      	uxtb	r1, r3
 800abdc:	b909      	cbnz	r1, 800abe2 <__lo0bits+0x32>
 800abde:	3008      	adds	r0, #8
 800abe0:	0a1b      	lsrs	r3, r3, #8
 800abe2:	0719      	lsls	r1, r3, #28
 800abe4:	bf04      	itt	eq
 800abe6:	091b      	lsreq	r3, r3, #4
 800abe8:	3004      	addeq	r0, #4
 800abea:	0799      	lsls	r1, r3, #30
 800abec:	bf04      	itt	eq
 800abee:	089b      	lsreq	r3, r3, #2
 800abf0:	3002      	addeq	r0, #2
 800abf2:	07d9      	lsls	r1, r3, #31
 800abf4:	d403      	bmi.n	800abfe <__lo0bits+0x4e>
 800abf6:	085b      	lsrs	r3, r3, #1
 800abf8:	f100 0001 	add.w	r0, r0, #1
 800abfc:	d003      	beq.n	800ac06 <__lo0bits+0x56>
 800abfe:	6013      	str	r3, [r2, #0]
 800ac00:	4770      	bx	lr
 800ac02:	2000      	movs	r0, #0
 800ac04:	4770      	bx	lr
 800ac06:	2020      	movs	r0, #32
 800ac08:	4770      	bx	lr
	...

0800ac0c <__i2b>:
 800ac0c:	b510      	push	{r4, lr}
 800ac0e:	460c      	mov	r4, r1
 800ac10:	2101      	movs	r1, #1
 800ac12:	f7ff ff05 	bl	800aa20 <_Balloc>
 800ac16:	4602      	mov	r2, r0
 800ac18:	b928      	cbnz	r0, 800ac26 <__i2b+0x1a>
 800ac1a:	f240 1145 	movw	r1, #325	; 0x145
 800ac1e:	4b04      	ldr	r3, [pc, #16]	; (800ac30 <__i2b+0x24>)
 800ac20:	4804      	ldr	r0, [pc, #16]	; (800ac34 <__i2b+0x28>)
 800ac22:	f000 fca1 	bl	800b568 <__assert_func>
 800ac26:	2301      	movs	r3, #1
 800ac28:	6144      	str	r4, [r0, #20]
 800ac2a:	6103      	str	r3, [r0, #16]
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	bf00      	nop
 800ac30:	0800bd1e 	.word	0x0800bd1e
 800ac34:	0800bd2f 	.word	0x0800bd2f

0800ac38 <__multiply>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	4691      	mov	r9, r2
 800ac3e:	690a      	ldr	r2, [r1, #16]
 800ac40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac44:	460c      	mov	r4, r1
 800ac46:	429a      	cmp	r2, r3
 800ac48:	bfbe      	ittt	lt
 800ac4a:	460b      	movlt	r3, r1
 800ac4c:	464c      	movlt	r4, r9
 800ac4e:	4699      	movlt	r9, r3
 800ac50:	6927      	ldr	r7, [r4, #16]
 800ac52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	6861      	ldr	r1, [r4, #4]
 800ac5a:	eb07 060a 	add.w	r6, r7, sl
 800ac5e:	42b3      	cmp	r3, r6
 800ac60:	b085      	sub	sp, #20
 800ac62:	bfb8      	it	lt
 800ac64:	3101      	addlt	r1, #1
 800ac66:	f7ff fedb 	bl	800aa20 <_Balloc>
 800ac6a:	b930      	cbnz	r0, 800ac7a <__multiply+0x42>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ac72:	4b43      	ldr	r3, [pc, #268]	; (800ad80 <__multiply+0x148>)
 800ac74:	4843      	ldr	r0, [pc, #268]	; (800ad84 <__multiply+0x14c>)
 800ac76:	f000 fc77 	bl	800b568 <__assert_func>
 800ac7a:	f100 0514 	add.w	r5, r0, #20
 800ac7e:	462b      	mov	r3, r5
 800ac80:	2200      	movs	r2, #0
 800ac82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ac86:	4543      	cmp	r3, r8
 800ac88:	d321      	bcc.n	800acce <__multiply+0x96>
 800ac8a:	f104 0314 	add.w	r3, r4, #20
 800ac8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ac92:	f109 0314 	add.w	r3, r9, #20
 800ac96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ac9a:	9202      	str	r2, [sp, #8]
 800ac9c:	1b3a      	subs	r2, r7, r4
 800ac9e:	3a15      	subs	r2, #21
 800aca0:	f022 0203 	bic.w	r2, r2, #3
 800aca4:	3204      	adds	r2, #4
 800aca6:	f104 0115 	add.w	r1, r4, #21
 800acaa:	428f      	cmp	r7, r1
 800acac:	bf38      	it	cc
 800acae:	2204      	movcc	r2, #4
 800acb0:	9201      	str	r2, [sp, #4]
 800acb2:	9a02      	ldr	r2, [sp, #8]
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d80c      	bhi.n	800acd4 <__multiply+0x9c>
 800acba:	2e00      	cmp	r6, #0
 800acbc:	dd03      	ble.n	800acc6 <__multiply+0x8e>
 800acbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d05a      	beq.n	800ad7c <__multiply+0x144>
 800acc6:	6106      	str	r6, [r0, #16]
 800acc8:	b005      	add	sp, #20
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	f843 2b04 	str.w	r2, [r3], #4
 800acd2:	e7d8      	b.n	800ac86 <__multiply+0x4e>
 800acd4:	f8b3 a000 	ldrh.w	sl, [r3]
 800acd8:	f1ba 0f00 	cmp.w	sl, #0
 800acdc:	d023      	beq.n	800ad26 <__multiply+0xee>
 800acde:	46a9      	mov	r9, r5
 800ace0:	f04f 0c00 	mov.w	ip, #0
 800ace4:	f104 0e14 	add.w	lr, r4, #20
 800ace8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800acec:	f8d9 1000 	ldr.w	r1, [r9]
 800acf0:	fa1f fb82 	uxth.w	fp, r2
 800acf4:	b289      	uxth	r1, r1
 800acf6:	fb0a 110b 	mla	r1, sl, fp, r1
 800acfa:	4461      	add	r1, ip
 800acfc:	f8d9 c000 	ldr.w	ip, [r9]
 800ad00:	0c12      	lsrs	r2, r2, #16
 800ad02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ad06:	fb0a c202 	mla	r2, sl, r2, ip
 800ad0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad0e:	b289      	uxth	r1, r1
 800ad10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad14:	4577      	cmp	r7, lr
 800ad16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad1a:	f849 1b04 	str.w	r1, [r9], #4
 800ad1e:	d8e3      	bhi.n	800ace8 <__multiply+0xb0>
 800ad20:	9a01      	ldr	r2, [sp, #4]
 800ad22:	f845 c002 	str.w	ip, [r5, r2]
 800ad26:	9a03      	ldr	r2, [sp, #12]
 800ad28:	3304      	adds	r3, #4
 800ad2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad2e:	f1b9 0f00 	cmp.w	r9, #0
 800ad32:	d021      	beq.n	800ad78 <__multiply+0x140>
 800ad34:	46ae      	mov	lr, r5
 800ad36:	f04f 0a00 	mov.w	sl, #0
 800ad3a:	6829      	ldr	r1, [r5, #0]
 800ad3c:	f104 0c14 	add.w	ip, r4, #20
 800ad40:	f8bc b000 	ldrh.w	fp, [ip]
 800ad44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad48:	b289      	uxth	r1, r1
 800ad4a:	fb09 220b 	mla	r2, r9, fp, r2
 800ad4e:	4452      	add	r2, sl
 800ad50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad54:	f84e 1b04 	str.w	r1, [lr], #4
 800ad58:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ad5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad60:	f8be 1000 	ldrh.w	r1, [lr]
 800ad64:	4567      	cmp	r7, ip
 800ad66:	fb09 110a 	mla	r1, r9, sl, r1
 800ad6a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ad6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad72:	d8e5      	bhi.n	800ad40 <__multiply+0x108>
 800ad74:	9a01      	ldr	r2, [sp, #4]
 800ad76:	50a9      	str	r1, [r5, r2]
 800ad78:	3504      	adds	r5, #4
 800ad7a:	e79a      	b.n	800acb2 <__multiply+0x7a>
 800ad7c:	3e01      	subs	r6, #1
 800ad7e:	e79c      	b.n	800acba <__multiply+0x82>
 800ad80:	0800bd1e 	.word	0x0800bd1e
 800ad84:	0800bd2f 	.word	0x0800bd2f

0800ad88 <__pow5mult>:
 800ad88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad8c:	4615      	mov	r5, r2
 800ad8e:	f012 0203 	ands.w	r2, r2, #3
 800ad92:	4606      	mov	r6, r0
 800ad94:	460f      	mov	r7, r1
 800ad96:	d007      	beq.n	800ada8 <__pow5mult+0x20>
 800ad98:	4c25      	ldr	r4, [pc, #148]	; (800ae30 <__pow5mult+0xa8>)
 800ad9a:	3a01      	subs	r2, #1
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ada2:	f7ff fe9f 	bl	800aae4 <__multadd>
 800ada6:	4607      	mov	r7, r0
 800ada8:	10ad      	asrs	r5, r5, #2
 800adaa:	d03d      	beq.n	800ae28 <__pow5mult+0xa0>
 800adac:	69f4      	ldr	r4, [r6, #28]
 800adae:	b97c      	cbnz	r4, 800add0 <__pow5mult+0x48>
 800adb0:	2010      	movs	r0, #16
 800adb2:	f7ff fd81 	bl	800a8b8 <malloc>
 800adb6:	4602      	mov	r2, r0
 800adb8:	61f0      	str	r0, [r6, #28]
 800adba:	b928      	cbnz	r0, 800adc8 <__pow5mult+0x40>
 800adbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800adc0:	4b1c      	ldr	r3, [pc, #112]	; (800ae34 <__pow5mult+0xac>)
 800adc2:	481d      	ldr	r0, [pc, #116]	; (800ae38 <__pow5mult+0xb0>)
 800adc4:	f000 fbd0 	bl	800b568 <__assert_func>
 800adc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adcc:	6004      	str	r4, [r0, #0]
 800adce:	60c4      	str	r4, [r0, #12]
 800add0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800add4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800add8:	b94c      	cbnz	r4, 800adee <__pow5mult+0x66>
 800adda:	f240 2171 	movw	r1, #625	; 0x271
 800adde:	4630      	mov	r0, r6
 800ade0:	f7ff ff14 	bl	800ac0c <__i2b>
 800ade4:	2300      	movs	r3, #0
 800ade6:	4604      	mov	r4, r0
 800ade8:	f8c8 0008 	str.w	r0, [r8, #8]
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	f04f 0900 	mov.w	r9, #0
 800adf2:	07eb      	lsls	r3, r5, #31
 800adf4:	d50a      	bpl.n	800ae0c <__pow5mult+0x84>
 800adf6:	4639      	mov	r1, r7
 800adf8:	4622      	mov	r2, r4
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7ff ff1c 	bl	800ac38 <__multiply>
 800ae00:	4680      	mov	r8, r0
 800ae02:	4639      	mov	r1, r7
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff fe4b 	bl	800aaa0 <_Bfree>
 800ae0a:	4647      	mov	r7, r8
 800ae0c:	106d      	asrs	r5, r5, #1
 800ae0e:	d00b      	beq.n	800ae28 <__pow5mult+0xa0>
 800ae10:	6820      	ldr	r0, [r4, #0]
 800ae12:	b938      	cbnz	r0, 800ae24 <__pow5mult+0x9c>
 800ae14:	4622      	mov	r2, r4
 800ae16:	4621      	mov	r1, r4
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff ff0d 	bl	800ac38 <__multiply>
 800ae1e:	6020      	str	r0, [r4, #0]
 800ae20:	f8c0 9000 	str.w	r9, [r0]
 800ae24:	4604      	mov	r4, r0
 800ae26:	e7e4      	b.n	800adf2 <__pow5mult+0x6a>
 800ae28:	4638      	mov	r0, r7
 800ae2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	bf00      	nop
 800ae30:	0800be78 	.word	0x0800be78
 800ae34:	0800bcaf 	.word	0x0800bcaf
 800ae38:	0800bd2f 	.word	0x0800bd2f

0800ae3c <__lshift>:
 800ae3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae40:	460c      	mov	r4, r1
 800ae42:	4607      	mov	r7, r0
 800ae44:	4691      	mov	r9, r2
 800ae46:	6923      	ldr	r3, [r4, #16]
 800ae48:	6849      	ldr	r1, [r1, #4]
 800ae4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae54:	f108 0601 	add.w	r6, r8, #1
 800ae58:	42b3      	cmp	r3, r6
 800ae5a:	db0b      	blt.n	800ae74 <__lshift+0x38>
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff fddf 	bl	800aa20 <_Balloc>
 800ae62:	4605      	mov	r5, r0
 800ae64:	b948      	cbnz	r0, 800ae7a <__lshift+0x3e>
 800ae66:	4602      	mov	r2, r0
 800ae68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ae6c:	4b27      	ldr	r3, [pc, #156]	; (800af0c <__lshift+0xd0>)
 800ae6e:	4828      	ldr	r0, [pc, #160]	; (800af10 <__lshift+0xd4>)
 800ae70:	f000 fb7a 	bl	800b568 <__assert_func>
 800ae74:	3101      	adds	r1, #1
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	e7ee      	b.n	800ae58 <__lshift+0x1c>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	f100 0114 	add.w	r1, r0, #20
 800ae80:	f100 0210 	add.w	r2, r0, #16
 800ae84:	4618      	mov	r0, r3
 800ae86:	4553      	cmp	r3, sl
 800ae88:	db33      	blt.n	800aef2 <__lshift+0xb6>
 800ae8a:	6920      	ldr	r0, [r4, #16]
 800ae8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ae90:	f104 0314 	add.w	r3, r4, #20
 800ae94:	f019 091f 	ands.w	r9, r9, #31
 800ae98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ae9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aea0:	d02b      	beq.n	800aefa <__lshift+0xbe>
 800aea2:	468a      	mov	sl, r1
 800aea4:	2200      	movs	r2, #0
 800aea6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeaa:	6818      	ldr	r0, [r3, #0]
 800aeac:	fa00 f009 	lsl.w	r0, r0, r9
 800aeb0:	4310      	orrs	r0, r2
 800aeb2:	f84a 0b04 	str.w	r0, [sl], #4
 800aeb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeba:	459c      	cmp	ip, r3
 800aebc:	fa22 f20e 	lsr.w	r2, r2, lr
 800aec0:	d8f3      	bhi.n	800aeaa <__lshift+0x6e>
 800aec2:	ebac 0304 	sub.w	r3, ip, r4
 800aec6:	3b15      	subs	r3, #21
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	3304      	adds	r3, #4
 800aece:	f104 0015 	add.w	r0, r4, #21
 800aed2:	4584      	cmp	ip, r0
 800aed4:	bf38      	it	cc
 800aed6:	2304      	movcc	r3, #4
 800aed8:	50ca      	str	r2, [r1, r3]
 800aeda:	b10a      	cbz	r2, 800aee0 <__lshift+0xa4>
 800aedc:	f108 0602 	add.w	r6, r8, #2
 800aee0:	3e01      	subs	r6, #1
 800aee2:	4638      	mov	r0, r7
 800aee4:	4621      	mov	r1, r4
 800aee6:	612e      	str	r6, [r5, #16]
 800aee8:	f7ff fdda 	bl	800aaa0 <_Bfree>
 800aeec:	4628      	mov	r0, r5
 800aeee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aef6:	3301      	adds	r3, #1
 800aef8:	e7c5      	b.n	800ae86 <__lshift+0x4a>
 800aefa:	3904      	subs	r1, #4
 800aefc:	f853 2b04 	ldr.w	r2, [r3], #4
 800af00:	459c      	cmp	ip, r3
 800af02:	f841 2f04 	str.w	r2, [r1, #4]!
 800af06:	d8f9      	bhi.n	800aefc <__lshift+0xc0>
 800af08:	e7ea      	b.n	800aee0 <__lshift+0xa4>
 800af0a:	bf00      	nop
 800af0c:	0800bd1e 	.word	0x0800bd1e
 800af10:	0800bd2f 	.word	0x0800bd2f

0800af14 <__mcmp>:
 800af14:	4603      	mov	r3, r0
 800af16:	690a      	ldr	r2, [r1, #16]
 800af18:	6900      	ldr	r0, [r0, #16]
 800af1a:	b530      	push	{r4, r5, lr}
 800af1c:	1a80      	subs	r0, r0, r2
 800af1e:	d10d      	bne.n	800af3c <__mcmp+0x28>
 800af20:	3314      	adds	r3, #20
 800af22:	3114      	adds	r1, #20
 800af24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af34:	4295      	cmp	r5, r2
 800af36:	d002      	beq.n	800af3e <__mcmp+0x2a>
 800af38:	d304      	bcc.n	800af44 <__mcmp+0x30>
 800af3a:	2001      	movs	r0, #1
 800af3c:	bd30      	pop	{r4, r5, pc}
 800af3e:	42a3      	cmp	r3, r4
 800af40:	d3f4      	bcc.n	800af2c <__mcmp+0x18>
 800af42:	e7fb      	b.n	800af3c <__mcmp+0x28>
 800af44:	f04f 30ff 	mov.w	r0, #4294967295
 800af48:	e7f8      	b.n	800af3c <__mcmp+0x28>
	...

0800af4c <__mdiff>:
 800af4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af50:	460d      	mov	r5, r1
 800af52:	4607      	mov	r7, r0
 800af54:	4611      	mov	r1, r2
 800af56:	4628      	mov	r0, r5
 800af58:	4614      	mov	r4, r2
 800af5a:	f7ff ffdb 	bl	800af14 <__mcmp>
 800af5e:	1e06      	subs	r6, r0, #0
 800af60:	d111      	bne.n	800af86 <__mdiff+0x3a>
 800af62:	4631      	mov	r1, r6
 800af64:	4638      	mov	r0, r7
 800af66:	f7ff fd5b 	bl	800aa20 <_Balloc>
 800af6a:	4602      	mov	r2, r0
 800af6c:	b928      	cbnz	r0, 800af7a <__mdiff+0x2e>
 800af6e:	f240 2137 	movw	r1, #567	; 0x237
 800af72:	4b3a      	ldr	r3, [pc, #232]	; (800b05c <__mdiff+0x110>)
 800af74:	483a      	ldr	r0, [pc, #232]	; (800b060 <__mdiff+0x114>)
 800af76:	f000 faf7 	bl	800b568 <__assert_func>
 800af7a:	2301      	movs	r3, #1
 800af7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800af80:	4610      	mov	r0, r2
 800af82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af86:	bfa4      	itt	ge
 800af88:	4623      	movge	r3, r4
 800af8a:	462c      	movge	r4, r5
 800af8c:	4638      	mov	r0, r7
 800af8e:	6861      	ldr	r1, [r4, #4]
 800af90:	bfa6      	itte	ge
 800af92:	461d      	movge	r5, r3
 800af94:	2600      	movge	r6, #0
 800af96:	2601      	movlt	r6, #1
 800af98:	f7ff fd42 	bl	800aa20 <_Balloc>
 800af9c:	4602      	mov	r2, r0
 800af9e:	b918      	cbnz	r0, 800afa8 <__mdiff+0x5c>
 800afa0:	f240 2145 	movw	r1, #581	; 0x245
 800afa4:	4b2d      	ldr	r3, [pc, #180]	; (800b05c <__mdiff+0x110>)
 800afa6:	e7e5      	b.n	800af74 <__mdiff+0x28>
 800afa8:	f102 0814 	add.w	r8, r2, #20
 800afac:	46c2      	mov	sl, r8
 800afae:	f04f 0c00 	mov.w	ip, #0
 800afb2:	6927      	ldr	r7, [r4, #16]
 800afb4:	60c6      	str	r6, [r0, #12]
 800afb6:	692e      	ldr	r6, [r5, #16]
 800afb8:	f104 0014 	add.w	r0, r4, #20
 800afbc:	f105 0914 	add.w	r9, r5, #20
 800afc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800afc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800afc8:	3410      	adds	r4, #16
 800afca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800afce:	f859 3b04 	ldr.w	r3, [r9], #4
 800afd2:	fa1f f18b 	uxth.w	r1, fp
 800afd6:	4461      	add	r1, ip
 800afd8:	fa1f fc83 	uxth.w	ip, r3
 800afdc:	0c1b      	lsrs	r3, r3, #16
 800afde:	eba1 010c 	sub.w	r1, r1, ip
 800afe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800afe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800afea:	b289      	uxth	r1, r1
 800afec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800aff0:	454e      	cmp	r6, r9
 800aff2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800aff6:	f84a 1b04 	str.w	r1, [sl], #4
 800affa:	d8e6      	bhi.n	800afca <__mdiff+0x7e>
 800affc:	1b73      	subs	r3, r6, r5
 800affe:	3b15      	subs	r3, #21
 800b000:	f023 0303 	bic.w	r3, r3, #3
 800b004:	3515      	adds	r5, #21
 800b006:	3304      	adds	r3, #4
 800b008:	42ae      	cmp	r6, r5
 800b00a:	bf38      	it	cc
 800b00c:	2304      	movcc	r3, #4
 800b00e:	4418      	add	r0, r3
 800b010:	4443      	add	r3, r8
 800b012:	461e      	mov	r6, r3
 800b014:	4605      	mov	r5, r0
 800b016:	4575      	cmp	r5, lr
 800b018:	d30e      	bcc.n	800b038 <__mdiff+0xec>
 800b01a:	f10e 0103 	add.w	r1, lr, #3
 800b01e:	1a09      	subs	r1, r1, r0
 800b020:	f021 0103 	bic.w	r1, r1, #3
 800b024:	3803      	subs	r0, #3
 800b026:	4586      	cmp	lr, r0
 800b028:	bf38      	it	cc
 800b02a:	2100      	movcc	r1, #0
 800b02c:	440b      	add	r3, r1
 800b02e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b032:	b189      	cbz	r1, 800b058 <__mdiff+0x10c>
 800b034:	6117      	str	r7, [r2, #16]
 800b036:	e7a3      	b.n	800af80 <__mdiff+0x34>
 800b038:	f855 8b04 	ldr.w	r8, [r5], #4
 800b03c:	fa1f f188 	uxth.w	r1, r8
 800b040:	4461      	add	r1, ip
 800b042:	140c      	asrs	r4, r1, #16
 800b044:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b048:	b289      	uxth	r1, r1
 800b04a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b04e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b052:	f846 1b04 	str.w	r1, [r6], #4
 800b056:	e7de      	b.n	800b016 <__mdiff+0xca>
 800b058:	3f01      	subs	r7, #1
 800b05a:	e7e8      	b.n	800b02e <__mdiff+0xe2>
 800b05c:	0800bd1e 	.word	0x0800bd1e
 800b060:	0800bd2f 	.word	0x0800bd2f

0800b064 <__d2b>:
 800b064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b066:	2101      	movs	r1, #1
 800b068:	4617      	mov	r7, r2
 800b06a:	461c      	mov	r4, r3
 800b06c:	9e08      	ldr	r6, [sp, #32]
 800b06e:	f7ff fcd7 	bl	800aa20 <_Balloc>
 800b072:	4605      	mov	r5, r0
 800b074:	b930      	cbnz	r0, 800b084 <__d2b+0x20>
 800b076:	4602      	mov	r2, r0
 800b078:	f240 310f 	movw	r1, #783	; 0x30f
 800b07c:	4b22      	ldr	r3, [pc, #136]	; (800b108 <__d2b+0xa4>)
 800b07e:	4823      	ldr	r0, [pc, #140]	; (800b10c <__d2b+0xa8>)
 800b080:	f000 fa72 	bl	800b568 <__assert_func>
 800b084:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b088:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b08c:	bb24      	cbnz	r4, 800b0d8 <__d2b+0x74>
 800b08e:	2f00      	cmp	r7, #0
 800b090:	9301      	str	r3, [sp, #4]
 800b092:	d026      	beq.n	800b0e2 <__d2b+0x7e>
 800b094:	4668      	mov	r0, sp
 800b096:	9700      	str	r7, [sp, #0]
 800b098:	f7ff fd8a 	bl	800abb0 <__lo0bits>
 800b09c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b0a0:	b1e8      	cbz	r0, 800b0de <__d2b+0x7a>
 800b0a2:	f1c0 0320 	rsb	r3, r0, #32
 800b0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	40c2      	lsrs	r2, r0
 800b0ae:	616b      	str	r3, [r5, #20]
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	9b01      	ldr	r3, [sp, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	bf14      	ite	ne
 800b0b8:	2102      	movne	r1, #2
 800b0ba:	2101      	moveq	r1, #1
 800b0bc:	61ab      	str	r3, [r5, #24]
 800b0be:	6129      	str	r1, [r5, #16]
 800b0c0:	b1bc      	cbz	r4, 800b0f2 <__d2b+0x8e>
 800b0c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b0c6:	4404      	add	r4, r0
 800b0c8:	6034      	str	r4, [r6, #0]
 800b0ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0d0:	6018      	str	r0, [r3, #0]
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	b003      	add	sp, #12
 800b0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0dc:	e7d7      	b.n	800b08e <__d2b+0x2a>
 800b0de:	6169      	str	r1, [r5, #20]
 800b0e0:	e7e7      	b.n	800b0b2 <__d2b+0x4e>
 800b0e2:	a801      	add	r0, sp, #4
 800b0e4:	f7ff fd64 	bl	800abb0 <__lo0bits>
 800b0e8:	9b01      	ldr	r3, [sp, #4]
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	616b      	str	r3, [r5, #20]
 800b0ee:	3020      	adds	r0, #32
 800b0f0:	e7e5      	b.n	800b0be <__d2b+0x5a>
 800b0f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b0fa:	6030      	str	r0, [r6, #0]
 800b0fc:	6918      	ldr	r0, [r3, #16]
 800b0fe:	f7ff fd37 	bl	800ab70 <__hi0bits>
 800b102:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b106:	e7e2      	b.n	800b0ce <__d2b+0x6a>
 800b108:	0800bd1e 	.word	0x0800bd1e
 800b10c:	0800bd2f 	.word	0x0800bd2f

0800b110 <__ssputs_r>:
 800b110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b114:	461f      	mov	r7, r3
 800b116:	688e      	ldr	r6, [r1, #8]
 800b118:	4682      	mov	sl, r0
 800b11a:	42be      	cmp	r6, r7
 800b11c:	460c      	mov	r4, r1
 800b11e:	4690      	mov	r8, r2
 800b120:	680b      	ldr	r3, [r1, #0]
 800b122:	d82c      	bhi.n	800b17e <__ssputs_r+0x6e>
 800b124:	898a      	ldrh	r2, [r1, #12]
 800b126:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b12a:	d026      	beq.n	800b17a <__ssputs_r+0x6a>
 800b12c:	6965      	ldr	r5, [r4, #20]
 800b12e:	6909      	ldr	r1, [r1, #16]
 800b130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b134:	eba3 0901 	sub.w	r9, r3, r1
 800b138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b13c:	1c7b      	adds	r3, r7, #1
 800b13e:	444b      	add	r3, r9
 800b140:	106d      	asrs	r5, r5, #1
 800b142:	429d      	cmp	r5, r3
 800b144:	bf38      	it	cc
 800b146:	461d      	movcc	r5, r3
 800b148:	0553      	lsls	r3, r2, #21
 800b14a:	d527      	bpl.n	800b19c <__ssputs_r+0x8c>
 800b14c:	4629      	mov	r1, r5
 800b14e:	f7ff fbdb 	bl	800a908 <_malloc_r>
 800b152:	4606      	mov	r6, r0
 800b154:	b360      	cbz	r0, 800b1b0 <__ssputs_r+0xa0>
 800b156:	464a      	mov	r2, r9
 800b158:	6921      	ldr	r1, [r4, #16]
 800b15a:	f7fe fcea 	bl	8009b32 <memcpy>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b168:	81a3      	strh	r3, [r4, #12]
 800b16a:	6126      	str	r6, [r4, #16]
 800b16c:	444e      	add	r6, r9
 800b16e:	6026      	str	r6, [r4, #0]
 800b170:	463e      	mov	r6, r7
 800b172:	6165      	str	r5, [r4, #20]
 800b174:	eba5 0509 	sub.w	r5, r5, r9
 800b178:	60a5      	str	r5, [r4, #8]
 800b17a:	42be      	cmp	r6, r7
 800b17c:	d900      	bls.n	800b180 <__ssputs_r+0x70>
 800b17e:	463e      	mov	r6, r7
 800b180:	4632      	mov	r2, r6
 800b182:	4641      	mov	r1, r8
 800b184:	6820      	ldr	r0, [r4, #0]
 800b186:	f000 f9c5 	bl	800b514 <memmove>
 800b18a:	2000      	movs	r0, #0
 800b18c:	68a3      	ldr	r3, [r4, #8]
 800b18e:	1b9b      	subs	r3, r3, r6
 800b190:	60a3      	str	r3, [r4, #8]
 800b192:	6823      	ldr	r3, [r4, #0]
 800b194:	4433      	add	r3, r6
 800b196:	6023      	str	r3, [r4, #0]
 800b198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19c:	462a      	mov	r2, r5
 800b19e:	f000 fa27 	bl	800b5f0 <_realloc_r>
 800b1a2:	4606      	mov	r6, r0
 800b1a4:	2800      	cmp	r0, #0
 800b1a6:	d1e0      	bne.n	800b16a <__ssputs_r+0x5a>
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	6921      	ldr	r1, [r4, #16]
 800b1ac:	f7ff fb3c 	bl	800a828 <_free_r>
 800b1b0:	230c      	movs	r3, #12
 800b1b2:	f8ca 3000 	str.w	r3, [sl]
 800b1b6:	89a3      	ldrh	r3, [r4, #12]
 800b1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1c0:	81a3      	strh	r3, [r4, #12]
 800b1c2:	e7e9      	b.n	800b198 <__ssputs_r+0x88>

0800b1c4 <_svfiprintf_r>:
 800b1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c8:	4698      	mov	r8, r3
 800b1ca:	898b      	ldrh	r3, [r1, #12]
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	061b      	lsls	r3, r3, #24
 800b1d0:	460d      	mov	r5, r1
 800b1d2:	4614      	mov	r4, r2
 800b1d4:	b09d      	sub	sp, #116	; 0x74
 800b1d6:	d50e      	bpl.n	800b1f6 <_svfiprintf_r+0x32>
 800b1d8:	690b      	ldr	r3, [r1, #16]
 800b1da:	b963      	cbnz	r3, 800b1f6 <_svfiprintf_r+0x32>
 800b1dc:	2140      	movs	r1, #64	; 0x40
 800b1de:	f7ff fb93 	bl	800a908 <_malloc_r>
 800b1e2:	6028      	str	r0, [r5, #0]
 800b1e4:	6128      	str	r0, [r5, #16]
 800b1e6:	b920      	cbnz	r0, 800b1f2 <_svfiprintf_r+0x2e>
 800b1e8:	230c      	movs	r3, #12
 800b1ea:	603b      	str	r3, [r7, #0]
 800b1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f0:	e0d0      	b.n	800b394 <_svfiprintf_r+0x1d0>
 800b1f2:	2340      	movs	r3, #64	; 0x40
 800b1f4:	616b      	str	r3, [r5, #20]
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fa:	2320      	movs	r3, #32
 800b1fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b200:	2330      	movs	r3, #48	; 0x30
 800b202:	f04f 0901 	mov.w	r9, #1
 800b206:	f8cd 800c 	str.w	r8, [sp, #12]
 800b20a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b3ac <_svfiprintf_r+0x1e8>
 800b20e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b212:	4623      	mov	r3, r4
 800b214:	469a      	mov	sl, r3
 800b216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21a:	b10a      	cbz	r2, 800b220 <_svfiprintf_r+0x5c>
 800b21c:	2a25      	cmp	r2, #37	; 0x25
 800b21e:	d1f9      	bne.n	800b214 <_svfiprintf_r+0x50>
 800b220:	ebba 0b04 	subs.w	fp, sl, r4
 800b224:	d00b      	beq.n	800b23e <_svfiprintf_r+0x7a>
 800b226:	465b      	mov	r3, fp
 800b228:	4622      	mov	r2, r4
 800b22a:	4629      	mov	r1, r5
 800b22c:	4638      	mov	r0, r7
 800b22e:	f7ff ff6f 	bl	800b110 <__ssputs_r>
 800b232:	3001      	adds	r0, #1
 800b234:	f000 80a9 	beq.w	800b38a <_svfiprintf_r+0x1c6>
 800b238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b23a:	445a      	add	r2, fp
 800b23c:	9209      	str	r2, [sp, #36]	; 0x24
 800b23e:	f89a 3000 	ldrb.w	r3, [sl]
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 80a1 	beq.w	800b38a <_svfiprintf_r+0x1c6>
 800b248:	2300      	movs	r3, #0
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295
 800b24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b252:	f10a 0a01 	add.w	sl, sl, #1
 800b256:	9304      	str	r3, [sp, #16]
 800b258:	9307      	str	r3, [sp, #28]
 800b25a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b25e:	931a      	str	r3, [sp, #104]	; 0x68
 800b260:	4654      	mov	r4, sl
 800b262:	2205      	movs	r2, #5
 800b264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b268:	4850      	ldr	r0, [pc, #320]	; (800b3ac <_svfiprintf_r+0x1e8>)
 800b26a:	f7fe fc54 	bl	8009b16 <memchr>
 800b26e:	9a04      	ldr	r2, [sp, #16]
 800b270:	b9d8      	cbnz	r0, 800b2aa <_svfiprintf_r+0xe6>
 800b272:	06d0      	lsls	r0, r2, #27
 800b274:	bf44      	itt	mi
 800b276:	2320      	movmi	r3, #32
 800b278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27c:	0711      	lsls	r1, r2, #28
 800b27e:	bf44      	itt	mi
 800b280:	232b      	movmi	r3, #43	; 0x2b
 800b282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b286:	f89a 3000 	ldrb.w	r3, [sl]
 800b28a:	2b2a      	cmp	r3, #42	; 0x2a
 800b28c:	d015      	beq.n	800b2ba <_svfiprintf_r+0xf6>
 800b28e:	4654      	mov	r4, sl
 800b290:	2000      	movs	r0, #0
 800b292:	f04f 0c0a 	mov.w	ip, #10
 800b296:	9a07      	ldr	r2, [sp, #28]
 800b298:	4621      	mov	r1, r4
 800b29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b29e:	3b30      	subs	r3, #48	; 0x30
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	d94d      	bls.n	800b340 <_svfiprintf_r+0x17c>
 800b2a4:	b1b0      	cbz	r0, 800b2d4 <_svfiprintf_r+0x110>
 800b2a6:	9207      	str	r2, [sp, #28]
 800b2a8:	e014      	b.n	800b2d4 <_svfiprintf_r+0x110>
 800b2aa:	eba0 0308 	sub.w	r3, r0, r8
 800b2ae:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	46a2      	mov	sl, r4
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	e7d2      	b.n	800b260 <_svfiprintf_r+0x9c>
 800b2ba:	9b03      	ldr	r3, [sp, #12]
 800b2bc:	1d19      	adds	r1, r3, #4
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	9103      	str	r1, [sp, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfbb      	ittet	lt
 800b2c6:	425b      	neglt	r3, r3
 800b2c8:	f042 0202 	orrlt.w	r2, r2, #2
 800b2cc:	9307      	strge	r3, [sp, #28]
 800b2ce:	9307      	strlt	r3, [sp, #28]
 800b2d0:	bfb8      	it	lt
 800b2d2:	9204      	strlt	r2, [sp, #16]
 800b2d4:	7823      	ldrb	r3, [r4, #0]
 800b2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2d8:	d10c      	bne.n	800b2f4 <_svfiprintf_r+0x130>
 800b2da:	7863      	ldrb	r3, [r4, #1]
 800b2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800b2de:	d134      	bne.n	800b34a <_svfiprintf_r+0x186>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	3402      	adds	r4, #2
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9203      	str	r2, [sp, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfb8      	it	lt
 800b2ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2f2:	9305      	str	r3, [sp, #20]
 800b2f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b3b0 <_svfiprintf_r+0x1ec>
 800b2f8:	2203      	movs	r2, #3
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	7821      	ldrb	r1, [r4, #0]
 800b2fe:	f7fe fc0a 	bl	8009b16 <memchr>
 800b302:	b138      	cbz	r0, 800b314 <_svfiprintf_r+0x150>
 800b304:	2240      	movs	r2, #64	; 0x40
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	eba0 000a 	sub.w	r0, r0, sl
 800b30c:	4082      	lsls	r2, r0
 800b30e:	4313      	orrs	r3, r2
 800b310:	3401      	adds	r4, #1
 800b312:	9304      	str	r3, [sp, #16]
 800b314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b318:	2206      	movs	r2, #6
 800b31a:	4826      	ldr	r0, [pc, #152]	; (800b3b4 <_svfiprintf_r+0x1f0>)
 800b31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b320:	f7fe fbf9 	bl	8009b16 <memchr>
 800b324:	2800      	cmp	r0, #0
 800b326:	d038      	beq.n	800b39a <_svfiprintf_r+0x1d6>
 800b328:	4b23      	ldr	r3, [pc, #140]	; (800b3b8 <_svfiprintf_r+0x1f4>)
 800b32a:	bb1b      	cbnz	r3, 800b374 <_svfiprintf_r+0x1b0>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	3307      	adds	r3, #7
 800b330:	f023 0307 	bic.w	r3, r3, #7
 800b334:	3308      	adds	r3, #8
 800b336:	9303      	str	r3, [sp, #12]
 800b338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33a:	4433      	add	r3, r6
 800b33c:	9309      	str	r3, [sp, #36]	; 0x24
 800b33e:	e768      	b.n	800b212 <_svfiprintf_r+0x4e>
 800b340:	460c      	mov	r4, r1
 800b342:	2001      	movs	r0, #1
 800b344:	fb0c 3202 	mla	r2, ip, r2, r3
 800b348:	e7a6      	b.n	800b298 <_svfiprintf_r+0xd4>
 800b34a:	2300      	movs	r3, #0
 800b34c:	f04f 0c0a 	mov.w	ip, #10
 800b350:	4619      	mov	r1, r3
 800b352:	3401      	adds	r4, #1
 800b354:	9305      	str	r3, [sp, #20]
 800b356:	4620      	mov	r0, r4
 800b358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35c:	3a30      	subs	r2, #48	; 0x30
 800b35e:	2a09      	cmp	r2, #9
 800b360:	d903      	bls.n	800b36a <_svfiprintf_r+0x1a6>
 800b362:	2b00      	cmp	r3, #0
 800b364:	d0c6      	beq.n	800b2f4 <_svfiprintf_r+0x130>
 800b366:	9105      	str	r1, [sp, #20]
 800b368:	e7c4      	b.n	800b2f4 <_svfiprintf_r+0x130>
 800b36a:	4604      	mov	r4, r0
 800b36c:	2301      	movs	r3, #1
 800b36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b372:	e7f0      	b.n	800b356 <_svfiprintf_r+0x192>
 800b374:	ab03      	add	r3, sp, #12
 800b376:	9300      	str	r3, [sp, #0]
 800b378:	462a      	mov	r2, r5
 800b37a:	4638      	mov	r0, r7
 800b37c:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <_svfiprintf_r+0x1f8>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	f7fd fe50 	bl	8009024 <_printf_float>
 800b384:	1c42      	adds	r2, r0, #1
 800b386:	4606      	mov	r6, r0
 800b388:	d1d6      	bne.n	800b338 <_svfiprintf_r+0x174>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	065b      	lsls	r3, r3, #25
 800b38e:	f53f af2d 	bmi.w	800b1ec <_svfiprintf_r+0x28>
 800b392:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b394:	b01d      	add	sp, #116	; 0x74
 800b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b39a:	ab03      	add	r3, sp, #12
 800b39c:	9300      	str	r3, [sp, #0]
 800b39e:	462a      	mov	r2, r5
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	4b06      	ldr	r3, [pc, #24]	; (800b3bc <_svfiprintf_r+0x1f8>)
 800b3a4:	a904      	add	r1, sp, #16
 800b3a6:	f7fe f8dd 	bl	8009564 <_printf_i>
 800b3aa:	e7eb      	b.n	800b384 <_svfiprintf_r+0x1c0>
 800b3ac:	0800be84 	.word	0x0800be84
 800b3b0:	0800be8a 	.word	0x0800be8a
 800b3b4:	0800be8e 	.word	0x0800be8e
 800b3b8:	08009025 	.word	0x08009025
 800b3bc:	0800b111 	.word	0x0800b111

0800b3c0 <__sflush_r>:
 800b3c0:	898a      	ldrh	r2, [r1, #12]
 800b3c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c4:	4605      	mov	r5, r0
 800b3c6:	0710      	lsls	r0, r2, #28
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	d457      	bmi.n	800b47c <__sflush_r+0xbc>
 800b3cc:	684b      	ldr	r3, [r1, #4]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	dc04      	bgt.n	800b3dc <__sflush_r+0x1c>
 800b3d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	dc01      	bgt.n	800b3dc <__sflush_r+0x1c>
 800b3d8:	2000      	movs	r0, #0
 800b3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3de:	2e00      	cmp	r6, #0
 800b3e0:	d0fa      	beq.n	800b3d8 <__sflush_r+0x18>
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3e8:	682f      	ldr	r7, [r5, #0]
 800b3ea:	6a21      	ldr	r1, [r4, #32]
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	d032      	beq.n	800b456 <__sflush_r+0x96>
 800b3f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3f2:	89a3      	ldrh	r3, [r4, #12]
 800b3f4:	075a      	lsls	r2, r3, #29
 800b3f6:	d505      	bpl.n	800b404 <__sflush_r+0x44>
 800b3f8:	6863      	ldr	r3, [r4, #4]
 800b3fa:	1ac0      	subs	r0, r0, r3
 800b3fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3fe:	b10b      	cbz	r3, 800b404 <__sflush_r+0x44>
 800b400:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b402:	1ac0      	subs	r0, r0, r3
 800b404:	2300      	movs	r3, #0
 800b406:	4602      	mov	r2, r0
 800b408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b40a:	4628      	mov	r0, r5
 800b40c:	6a21      	ldr	r1, [r4, #32]
 800b40e:	47b0      	blx	r6
 800b410:	1c43      	adds	r3, r0, #1
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	d106      	bne.n	800b424 <__sflush_r+0x64>
 800b416:	6829      	ldr	r1, [r5, #0]
 800b418:	291d      	cmp	r1, #29
 800b41a:	d82b      	bhi.n	800b474 <__sflush_r+0xb4>
 800b41c:	4a28      	ldr	r2, [pc, #160]	; (800b4c0 <__sflush_r+0x100>)
 800b41e:	410a      	asrs	r2, r1
 800b420:	07d6      	lsls	r6, r2, #31
 800b422:	d427      	bmi.n	800b474 <__sflush_r+0xb4>
 800b424:	2200      	movs	r2, #0
 800b426:	6062      	str	r2, [r4, #4]
 800b428:	6922      	ldr	r2, [r4, #16]
 800b42a:	04d9      	lsls	r1, r3, #19
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	d504      	bpl.n	800b43a <__sflush_r+0x7a>
 800b430:	1c42      	adds	r2, r0, #1
 800b432:	d101      	bne.n	800b438 <__sflush_r+0x78>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	b903      	cbnz	r3, 800b43a <__sflush_r+0x7a>
 800b438:	6560      	str	r0, [r4, #84]	; 0x54
 800b43a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b43c:	602f      	str	r7, [r5, #0]
 800b43e:	2900      	cmp	r1, #0
 800b440:	d0ca      	beq.n	800b3d8 <__sflush_r+0x18>
 800b442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b446:	4299      	cmp	r1, r3
 800b448:	d002      	beq.n	800b450 <__sflush_r+0x90>
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7ff f9ec 	bl	800a828 <_free_r>
 800b450:	2000      	movs	r0, #0
 800b452:	6360      	str	r0, [r4, #52]	; 0x34
 800b454:	e7c1      	b.n	800b3da <__sflush_r+0x1a>
 800b456:	2301      	movs	r3, #1
 800b458:	4628      	mov	r0, r5
 800b45a:	47b0      	blx	r6
 800b45c:	1c41      	adds	r1, r0, #1
 800b45e:	d1c8      	bne.n	800b3f2 <__sflush_r+0x32>
 800b460:	682b      	ldr	r3, [r5, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d0c5      	beq.n	800b3f2 <__sflush_r+0x32>
 800b466:	2b1d      	cmp	r3, #29
 800b468:	d001      	beq.n	800b46e <__sflush_r+0xae>
 800b46a:	2b16      	cmp	r3, #22
 800b46c:	d101      	bne.n	800b472 <__sflush_r+0xb2>
 800b46e:	602f      	str	r7, [r5, #0]
 800b470:	e7b2      	b.n	800b3d8 <__sflush_r+0x18>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b478:	81a3      	strh	r3, [r4, #12]
 800b47a:	e7ae      	b.n	800b3da <__sflush_r+0x1a>
 800b47c:	690f      	ldr	r7, [r1, #16]
 800b47e:	2f00      	cmp	r7, #0
 800b480:	d0aa      	beq.n	800b3d8 <__sflush_r+0x18>
 800b482:	0793      	lsls	r3, r2, #30
 800b484:	bf18      	it	ne
 800b486:	2300      	movne	r3, #0
 800b488:	680e      	ldr	r6, [r1, #0]
 800b48a:	bf08      	it	eq
 800b48c:	694b      	ldreq	r3, [r1, #20]
 800b48e:	1bf6      	subs	r6, r6, r7
 800b490:	600f      	str	r7, [r1, #0]
 800b492:	608b      	str	r3, [r1, #8]
 800b494:	2e00      	cmp	r6, #0
 800b496:	dd9f      	ble.n	800b3d8 <__sflush_r+0x18>
 800b498:	4633      	mov	r3, r6
 800b49a:	463a      	mov	r2, r7
 800b49c:	4628      	mov	r0, r5
 800b49e:	6a21      	ldr	r1, [r4, #32]
 800b4a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b4a4:	47e0      	blx	ip
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	dc06      	bgt.n	800b4b8 <__sflush_r+0xf8>
 800b4aa:	89a3      	ldrh	r3, [r4, #12]
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4b4:	81a3      	strh	r3, [r4, #12]
 800b4b6:	e790      	b.n	800b3da <__sflush_r+0x1a>
 800b4b8:	4407      	add	r7, r0
 800b4ba:	1a36      	subs	r6, r6, r0
 800b4bc:	e7ea      	b.n	800b494 <__sflush_r+0xd4>
 800b4be:	bf00      	nop
 800b4c0:	dfbffffe 	.word	0xdfbffffe

0800b4c4 <_fflush_r>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	690b      	ldr	r3, [r1, #16]
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	460c      	mov	r4, r1
 800b4cc:	b913      	cbnz	r3, 800b4d4 <_fflush_r+0x10>
 800b4ce:	2500      	movs	r5, #0
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	b118      	cbz	r0, 800b4de <_fflush_r+0x1a>
 800b4d6:	6a03      	ldr	r3, [r0, #32]
 800b4d8:	b90b      	cbnz	r3, 800b4de <_fflush_r+0x1a>
 800b4da:	f7fe f9f1 	bl	80098c0 <__sinit>
 800b4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f3      	beq.n	800b4ce <_fflush_r+0xa>
 800b4e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4e8:	07d0      	lsls	r0, r2, #31
 800b4ea:	d404      	bmi.n	800b4f6 <_fflush_r+0x32>
 800b4ec:	0599      	lsls	r1, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_fflush_r+0x32>
 800b4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4f2:	f7fe fb0e 	bl	8009b12 <__retarget_lock_acquire_recursive>
 800b4f6:	4628      	mov	r0, r5
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	f7ff ff61 	bl	800b3c0 <__sflush_r>
 800b4fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b500:	4605      	mov	r5, r0
 800b502:	07da      	lsls	r2, r3, #31
 800b504:	d4e4      	bmi.n	800b4d0 <_fflush_r+0xc>
 800b506:	89a3      	ldrh	r3, [r4, #12]
 800b508:	059b      	lsls	r3, r3, #22
 800b50a:	d4e1      	bmi.n	800b4d0 <_fflush_r+0xc>
 800b50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50e:	f7fe fb01 	bl	8009b14 <__retarget_lock_release_recursive>
 800b512:	e7dd      	b.n	800b4d0 <_fflush_r+0xc>

0800b514 <memmove>:
 800b514:	4288      	cmp	r0, r1
 800b516:	b510      	push	{r4, lr}
 800b518:	eb01 0402 	add.w	r4, r1, r2
 800b51c:	d902      	bls.n	800b524 <memmove+0x10>
 800b51e:	4284      	cmp	r4, r0
 800b520:	4623      	mov	r3, r4
 800b522:	d807      	bhi.n	800b534 <memmove+0x20>
 800b524:	1e43      	subs	r3, r0, #1
 800b526:	42a1      	cmp	r1, r4
 800b528:	d008      	beq.n	800b53c <memmove+0x28>
 800b52a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b52e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b532:	e7f8      	b.n	800b526 <memmove+0x12>
 800b534:	4601      	mov	r1, r0
 800b536:	4402      	add	r2, r0
 800b538:	428a      	cmp	r2, r1
 800b53a:	d100      	bne.n	800b53e <memmove+0x2a>
 800b53c:	bd10      	pop	{r4, pc}
 800b53e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b546:	e7f7      	b.n	800b538 <memmove+0x24>

0800b548 <_sbrk_r>:
 800b548:	b538      	push	{r3, r4, r5, lr}
 800b54a:	2300      	movs	r3, #0
 800b54c:	4d05      	ldr	r5, [pc, #20]	; (800b564 <_sbrk_r+0x1c>)
 800b54e:	4604      	mov	r4, r0
 800b550:	4608      	mov	r0, r1
 800b552:	602b      	str	r3, [r5, #0]
 800b554:	f7f5 fec8 	bl	80012e8 <_sbrk>
 800b558:	1c43      	adds	r3, r0, #1
 800b55a:	d102      	bne.n	800b562 <_sbrk_r+0x1a>
 800b55c:	682b      	ldr	r3, [r5, #0]
 800b55e:	b103      	cbz	r3, 800b562 <_sbrk_r+0x1a>
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	bd38      	pop	{r3, r4, r5, pc}
 800b564:	20000540 	.word	0x20000540

0800b568 <__assert_func>:
 800b568:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b56a:	4614      	mov	r4, r2
 800b56c:	461a      	mov	r2, r3
 800b56e:	4b09      	ldr	r3, [pc, #36]	; (800b594 <__assert_func+0x2c>)
 800b570:	4605      	mov	r5, r0
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68d8      	ldr	r0, [r3, #12]
 800b576:	b14c      	cbz	r4, 800b58c <__assert_func+0x24>
 800b578:	4b07      	ldr	r3, [pc, #28]	; (800b598 <__assert_func+0x30>)
 800b57a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b57e:	9100      	str	r1, [sp, #0]
 800b580:	462b      	mov	r3, r5
 800b582:	4906      	ldr	r1, [pc, #24]	; (800b59c <__assert_func+0x34>)
 800b584:	f000 f870 	bl	800b668 <fiprintf>
 800b588:	f000 f880 	bl	800b68c <abort>
 800b58c:	4b04      	ldr	r3, [pc, #16]	; (800b5a0 <__assert_func+0x38>)
 800b58e:	461c      	mov	r4, r3
 800b590:	e7f3      	b.n	800b57a <__assert_func+0x12>
 800b592:	bf00      	nop
 800b594:	20000094 	.word	0x20000094
 800b598:	0800be9f 	.word	0x0800be9f
 800b59c:	0800beac 	.word	0x0800beac
 800b5a0:	0800beda 	.word	0x0800beda

0800b5a4 <_calloc_r>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	fba1 5402 	umull	r5, r4, r1, r2
 800b5aa:	b934      	cbnz	r4, 800b5ba <_calloc_r+0x16>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7ff f9ab 	bl	800a908 <_malloc_r>
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	b928      	cbnz	r0, 800b5c2 <_calloc_r+0x1e>
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	220c      	movs	r2, #12
 800b5bc:	2600      	movs	r6, #0
 800b5be:	6002      	str	r2, [r0, #0]
 800b5c0:	e7f9      	b.n	800b5b6 <_calloc_r+0x12>
 800b5c2:	462a      	mov	r2, r5
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7fe fa14 	bl	80099f2 <memset>
 800b5ca:	e7f4      	b.n	800b5b6 <_calloc_r+0x12>

0800b5cc <__ascii_mbtowc>:
 800b5cc:	b082      	sub	sp, #8
 800b5ce:	b901      	cbnz	r1, 800b5d2 <__ascii_mbtowc+0x6>
 800b5d0:	a901      	add	r1, sp, #4
 800b5d2:	b142      	cbz	r2, 800b5e6 <__ascii_mbtowc+0x1a>
 800b5d4:	b14b      	cbz	r3, 800b5ea <__ascii_mbtowc+0x1e>
 800b5d6:	7813      	ldrb	r3, [r2, #0]
 800b5d8:	600b      	str	r3, [r1, #0]
 800b5da:	7812      	ldrb	r2, [r2, #0]
 800b5dc:	1e10      	subs	r0, r2, #0
 800b5de:	bf18      	it	ne
 800b5e0:	2001      	movne	r0, #1
 800b5e2:	b002      	add	sp, #8
 800b5e4:	4770      	bx	lr
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	e7fb      	b.n	800b5e2 <__ascii_mbtowc+0x16>
 800b5ea:	f06f 0001 	mvn.w	r0, #1
 800b5ee:	e7f8      	b.n	800b5e2 <__ascii_mbtowc+0x16>

0800b5f0 <_realloc_r>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4614      	mov	r4, r2
 800b5f8:	460e      	mov	r6, r1
 800b5fa:	b921      	cbnz	r1, 800b606 <_realloc_r+0x16>
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b602:	f7ff b981 	b.w	800a908 <_malloc_r>
 800b606:	b92a      	cbnz	r2, 800b614 <_realloc_r+0x24>
 800b608:	f7ff f90e 	bl	800a828 <_free_r>
 800b60c:	4625      	mov	r5, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b614:	f000 f841 	bl	800b69a <_malloc_usable_size_r>
 800b618:	4284      	cmp	r4, r0
 800b61a:	4607      	mov	r7, r0
 800b61c:	d802      	bhi.n	800b624 <_realloc_r+0x34>
 800b61e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b622:	d812      	bhi.n	800b64a <_realloc_r+0x5a>
 800b624:	4621      	mov	r1, r4
 800b626:	4640      	mov	r0, r8
 800b628:	f7ff f96e 	bl	800a908 <_malloc_r>
 800b62c:	4605      	mov	r5, r0
 800b62e:	2800      	cmp	r0, #0
 800b630:	d0ed      	beq.n	800b60e <_realloc_r+0x1e>
 800b632:	42bc      	cmp	r4, r7
 800b634:	4622      	mov	r2, r4
 800b636:	4631      	mov	r1, r6
 800b638:	bf28      	it	cs
 800b63a:	463a      	movcs	r2, r7
 800b63c:	f7fe fa79 	bl	8009b32 <memcpy>
 800b640:	4631      	mov	r1, r6
 800b642:	4640      	mov	r0, r8
 800b644:	f7ff f8f0 	bl	800a828 <_free_r>
 800b648:	e7e1      	b.n	800b60e <_realloc_r+0x1e>
 800b64a:	4635      	mov	r5, r6
 800b64c:	e7df      	b.n	800b60e <_realloc_r+0x1e>

0800b64e <__ascii_wctomb>:
 800b64e:	4603      	mov	r3, r0
 800b650:	4608      	mov	r0, r1
 800b652:	b141      	cbz	r1, 800b666 <__ascii_wctomb+0x18>
 800b654:	2aff      	cmp	r2, #255	; 0xff
 800b656:	d904      	bls.n	800b662 <__ascii_wctomb+0x14>
 800b658:	228a      	movs	r2, #138	; 0x8a
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	4770      	bx	lr
 800b662:	2001      	movs	r0, #1
 800b664:	700a      	strb	r2, [r1, #0]
 800b666:	4770      	bx	lr

0800b668 <fiprintf>:
 800b668:	b40e      	push	{r1, r2, r3}
 800b66a:	b503      	push	{r0, r1, lr}
 800b66c:	4601      	mov	r1, r0
 800b66e:	ab03      	add	r3, sp, #12
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <fiprintf+0x20>)
 800b672:	f853 2b04 	ldr.w	r2, [r3], #4
 800b676:	6800      	ldr	r0, [r0, #0]
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	f000 f83d 	bl	800b6f8 <_vfiprintf_r>
 800b67e:	b002      	add	sp, #8
 800b680:	f85d eb04 	ldr.w	lr, [sp], #4
 800b684:	b003      	add	sp, #12
 800b686:	4770      	bx	lr
 800b688:	20000094 	.word	0x20000094

0800b68c <abort>:
 800b68c:	2006      	movs	r0, #6
 800b68e:	b508      	push	{r3, lr}
 800b690:	f000 fa0a 	bl	800baa8 <raise>
 800b694:	2001      	movs	r0, #1
 800b696:	f7f5 fdb3 	bl	8001200 <_exit>

0800b69a <_malloc_usable_size_r>:
 800b69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69e:	1f18      	subs	r0, r3, #4
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	bfbc      	itt	lt
 800b6a4:	580b      	ldrlt	r3, [r1, r0]
 800b6a6:	18c0      	addlt	r0, r0, r3
 800b6a8:	4770      	bx	lr

0800b6aa <__sfputc_r>:
 800b6aa:	6893      	ldr	r3, [r2, #8]
 800b6ac:	b410      	push	{r4}
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	6093      	str	r3, [r2, #8]
 800b6b4:	da07      	bge.n	800b6c6 <__sfputc_r+0x1c>
 800b6b6:	6994      	ldr	r4, [r2, #24]
 800b6b8:	42a3      	cmp	r3, r4
 800b6ba:	db01      	blt.n	800b6c0 <__sfputc_r+0x16>
 800b6bc:	290a      	cmp	r1, #10
 800b6be:	d102      	bne.n	800b6c6 <__sfputc_r+0x1c>
 800b6c0:	bc10      	pop	{r4}
 800b6c2:	f000 b933 	b.w	800b92c <__swbuf_r>
 800b6c6:	6813      	ldr	r3, [r2, #0]
 800b6c8:	1c58      	adds	r0, r3, #1
 800b6ca:	6010      	str	r0, [r2, #0]
 800b6cc:	7019      	strb	r1, [r3, #0]
 800b6ce:	4608      	mov	r0, r1
 800b6d0:	bc10      	pop	{r4}
 800b6d2:	4770      	bx	lr

0800b6d4 <__sfputs_r>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	4606      	mov	r6, r0
 800b6d8:	460f      	mov	r7, r1
 800b6da:	4614      	mov	r4, r2
 800b6dc:	18d5      	adds	r5, r2, r3
 800b6de:	42ac      	cmp	r4, r5
 800b6e0:	d101      	bne.n	800b6e6 <__sfputs_r+0x12>
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	e007      	b.n	800b6f6 <__sfputs_r+0x22>
 800b6e6:	463a      	mov	r2, r7
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ee:	f7ff ffdc 	bl	800b6aa <__sfputc_r>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	d1f3      	bne.n	800b6de <__sfputs_r+0xa>
 800b6f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b6f8 <_vfiprintf_r>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	4614      	mov	r4, r2
 800b700:	4698      	mov	r8, r3
 800b702:	4606      	mov	r6, r0
 800b704:	b09d      	sub	sp, #116	; 0x74
 800b706:	b118      	cbz	r0, 800b710 <_vfiprintf_r+0x18>
 800b708:	6a03      	ldr	r3, [r0, #32]
 800b70a:	b90b      	cbnz	r3, 800b710 <_vfiprintf_r+0x18>
 800b70c:	f7fe f8d8 	bl	80098c0 <__sinit>
 800b710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b712:	07d9      	lsls	r1, r3, #31
 800b714:	d405      	bmi.n	800b722 <_vfiprintf_r+0x2a>
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	059a      	lsls	r2, r3, #22
 800b71a:	d402      	bmi.n	800b722 <_vfiprintf_r+0x2a>
 800b71c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b71e:	f7fe f9f8 	bl	8009b12 <__retarget_lock_acquire_recursive>
 800b722:	89ab      	ldrh	r3, [r5, #12]
 800b724:	071b      	lsls	r3, r3, #28
 800b726:	d501      	bpl.n	800b72c <_vfiprintf_r+0x34>
 800b728:	692b      	ldr	r3, [r5, #16]
 800b72a:	b99b      	cbnz	r3, 800b754 <_vfiprintf_r+0x5c>
 800b72c:	4629      	mov	r1, r5
 800b72e:	4630      	mov	r0, r6
 800b730:	f000 f93a 	bl	800b9a8 <__swsetup_r>
 800b734:	b170      	cbz	r0, 800b754 <_vfiprintf_r+0x5c>
 800b736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b738:	07dc      	lsls	r4, r3, #31
 800b73a:	d504      	bpl.n	800b746 <_vfiprintf_r+0x4e>
 800b73c:	f04f 30ff 	mov.w	r0, #4294967295
 800b740:	b01d      	add	sp, #116	; 0x74
 800b742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	0598      	lsls	r0, r3, #22
 800b74a:	d4f7      	bmi.n	800b73c <_vfiprintf_r+0x44>
 800b74c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b74e:	f7fe f9e1 	bl	8009b14 <__retarget_lock_release_recursive>
 800b752:	e7f3      	b.n	800b73c <_vfiprintf_r+0x44>
 800b754:	2300      	movs	r3, #0
 800b756:	9309      	str	r3, [sp, #36]	; 0x24
 800b758:	2320      	movs	r3, #32
 800b75a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b75e:	2330      	movs	r3, #48	; 0x30
 800b760:	f04f 0901 	mov.w	r9, #1
 800b764:	f8cd 800c 	str.w	r8, [sp, #12]
 800b768:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b918 <_vfiprintf_r+0x220>
 800b76c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b770:	4623      	mov	r3, r4
 800b772:	469a      	mov	sl, r3
 800b774:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b778:	b10a      	cbz	r2, 800b77e <_vfiprintf_r+0x86>
 800b77a:	2a25      	cmp	r2, #37	; 0x25
 800b77c:	d1f9      	bne.n	800b772 <_vfiprintf_r+0x7a>
 800b77e:	ebba 0b04 	subs.w	fp, sl, r4
 800b782:	d00b      	beq.n	800b79c <_vfiprintf_r+0xa4>
 800b784:	465b      	mov	r3, fp
 800b786:	4622      	mov	r2, r4
 800b788:	4629      	mov	r1, r5
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7ff ffa2 	bl	800b6d4 <__sfputs_r>
 800b790:	3001      	adds	r0, #1
 800b792:	f000 80a9 	beq.w	800b8e8 <_vfiprintf_r+0x1f0>
 800b796:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b798:	445a      	add	r2, fp
 800b79a:	9209      	str	r2, [sp, #36]	; 0x24
 800b79c:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 80a1 	beq.w	800b8e8 <_vfiprintf_r+0x1f0>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b0:	f10a 0a01 	add.w	sl, sl, #1
 800b7b4:	9304      	str	r3, [sp, #16]
 800b7b6:	9307      	str	r3, [sp, #28]
 800b7b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7be:	4654      	mov	r4, sl
 800b7c0:	2205      	movs	r2, #5
 800b7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7c6:	4854      	ldr	r0, [pc, #336]	; (800b918 <_vfiprintf_r+0x220>)
 800b7c8:	f7fe f9a5 	bl	8009b16 <memchr>
 800b7cc:	9a04      	ldr	r2, [sp, #16]
 800b7ce:	b9d8      	cbnz	r0, 800b808 <_vfiprintf_r+0x110>
 800b7d0:	06d1      	lsls	r1, r2, #27
 800b7d2:	bf44      	itt	mi
 800b7d4:	2320      	movmi	r3, #32
 800b7d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7da:	0713      	lsls	r3, r2, #28
 800b7dc:	bf44      	itt	mi
 800b7de:	232b      	movmi	r3, #43	; 0x2b
 800b7e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ea:	d015      	beq.n	800b818 <_vfiprintf_r+0x120>
 800b7ec:	4654      	mov	r4, sl
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f04f 0c0a 	mov.w	ip, #10
 800b7f4:	9a07      	ldr	r2, [sp, #28]
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7fc:	3b30      	subs	r3, #48	; 0x30
 800b7fe:	2b09      	cmp	r3, #9
 800b800:	d94d      	bls.n	800b89e <_vfiprintf_r+0x1a6>
 800b802:	b1b0      	cbz	r0, 800b832 <_vfiprintf_r+0x13a>
 800b804:	9207      	str	r2, [sp, #28]
 800b806:	e014      	b.n	800b832 <_vfiprintf_r+0x13a>
 800b808:	eba0 0308 	sub.w	r3, r0, r8
 800b80c:	fa09 f303 	lsl.w	r3, r9, r3
 800b810:	4313      	orrs	r3, r2
 800b812:	46a2      	mov	sl, r4
 800b814:	9304      	str	r3, [sp, #16]
 800b816:	e7d2      	b.n	800b7be <_vfiprintf_r+0xc6>
 800b818:	9b03      	ldr	r3, [sp, #12]
 800b81a:	1d19      	adds	r1, r3, #4
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	9103      	str	r1, [sp, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	bfbb      	ittet	lt
 800b824:	425b      	neglt	r3, r3
 800b826:	f042 0202 	orrlt.w	r2, r2, #2
 800b82a:	9307      	strge	r3, [sp, #28]
 800b82c:	9307      	strlt	r3, [sp, #28]
 800b82e:	bfb8      	it	lt
 800b830:	9204      	strlt	r2, [sp, #16]
 800b832:	7823      	ldrb	r3, [r4, #0]
 800b834:	2b2e      	cmp	r3, #46	; 0x2e
 800b836:	d10c      	bne.n	800b852 <_vfiprintf_r+0x15a>
 800b838:	7863      	ldrb	r3, [r4, #1]
 800b83a:	2b2a      	cmp	r3, #42	; 0x2a
 800b83c:	d134      	bne.n	800b8a8 <_vfiprintf_r+0x1b0>
 800b83e:	9b03      	ldr	r3, [sp, #12]
 800b840:	3402      	adds	r4, #2
 800b842:	1d1a      	adds	r2, r3, #4
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	9203      	str	r2, [sp, #12]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	bfb8      	it	lt
 800b84c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b850:	9305      	str	r3, [sp, #20]
 800b852:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b91c <_vfiprintf_r+0x224>
 800b856:	2203      	movs	r2, #3
 800b858:	4650      	mov	r0, sl
 800b85a:	7821      	ldrb	r1, [r4, #0]
 800b85c:	f7fe f95b 	bl	8009b16 <memchr>
 800b860:	b138      	cbz	r0, 800b872 <_vfiprintf_r+0x17a>
 800b862:	2240      	movs	r2, #64	; 0x40
 800b864:	9b04      	ldr	r3, [sp, #16]
 800b866:	eba0 000a 	sub.w	r0, r0, sl
 800b86a:	4082      	lsls	r2, r0
 800b86c:	4313      	orrs	r3, r2
 800b86e:	3401      	adds	r4, #1
 800b870:	9304      	str	r3, [sp, #16]
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	2206      	movs	r2, #6
 800b878:	4829      	ldr	r0, [pc, #164]	; (800b920 <_vfiprintf_r+0x228>)
 800b87a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b87e:	f7fe f94a 	bl	8009b16 <memchr>
 800b882:	2800      	cmp	r0, #0
 800b884:	d03f      	beq.n	800b906 <_vfiprintf_r+0x20e>
 800b886:	4b27      	ldr	r3, [pc, #156]	; (800b924 <_vfiprintf_r+0x22c>)
 800b888:	bb1b      	cbnz	r3, 800b8d2 <_vfiprintf_r+0x1da>
 800b88a:	9b03      	ldr	r3, [sp, #12]
 800b88c:	3307      	adds	r3, #7
 800b88e:	f023 0307 	bic.w	r3, r3, #7
 800b892:	3308      	adds	r3, #8
 800b894:	9303      	str	r3, [sp, #12]
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	443b      	add	r3, r7
 800b89a:	9309      	str	r3, [sp, #36]	; 0x24
 800b89c:	e768      	b.n	800b770 <_vfiprintf_r+0x78>
 800b89e:	460c      	mov	r4, r1
 800b8a0:	2001      	movs	r0, #1
 800b8a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8a6:	e7a6      	b.n	800b7f6 <_vfiprintf_r+0xfe>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f04f 0c0a 	mov.w	ip, #10
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	3401      	adds	r4, #1
 800b8b2:	9305      	str	r3, [sp, #20]
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8ba:	3a30      	subs	r2, #48	; 0x30
 800b8bc:	2a09      	cmp	r2, #9
 800b8be:	d903      	bls.n	800b8c8 <_vfiprintf_r+0x1d0>
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d0c6      	beq.n	800b852 <_vfiprintf_r+0x15a>
 800b8c4:	9105      	str	r1, [sp, #20]
 800b8c6:	e7c4      	b.n	800b852 <_vfiprintf_r+0x15a>
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d0:	e7f0      	b.n	800b8b4 <_vfiprintf_r+0x1bc>
 800b8d2:	ab03      	add	r3, sp, #12
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	462a      	mov	r2, r5
 800b8d8:	4630      	mov	r0, r6
 800b8da:	4b13      	ldr	r3, [pc, #76]	; (800b928 <_vfiprintf_r+0x230>)
 800b8dc:	a904      	add	r1, sp, #16
 800b8de:	f7fd fba1 	bl	8009024 <_printf_float>
 800b8e2:	4607      	mov	r7, r0
 800b8e4:	1c78      	adds	r0, r7, #1
 800b8e6:	d1d6      	bne.n	800b896 <_vfiprintf_r+0x19e>
 800b8e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ea:	07d9      	lsls	r1, r3, #31
 800b8ec:	d405      	bmi.n	800b8fa <_vfiprintf_r+0x202>
 800b8ee:	89ab      	ldrh	r3, [r5, #12]
 800b8f0:	059a      	lsls	r2, r3, #22
 800b8f2:	d402      	bmi.n	800b8fa <_vfiprintf_r+0x202>
 800b8f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8f6:	f7fe f90d 	bl	8009b14 <__retarget_lock_release_recursive>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	065b      	lsls	r3, r3, #25
 800b8fe:	f53f af1d 	bmi.w	800b73c <_vfiprintf_r+0x44>
 800b902:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b904:	e71c      	b.n	800b740 <_vfiprintf_r+0x48>
 800b906:	ab03      	add	r3, sp, #12
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	462a      	mov	r2, r5
 800b90c:	4630      	mov	r0, r6
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <_vfiprintf_r+0x230>)
 800b910:	a904      	add	r1, sp, #16
 800b912:	f7fd fe27 	bl	8009564 <_printf_i>
 800b916:	e7e4      	b.n	800b8e2 <_vfiprintf_r+0x1ea>
 800b918:	0800be84 	.word	0x0800be84
 800b91c:	0800be8a 	.word	0x0800be8a
 800b920:	0800be8e 	.word	0x0800be8e
 800b924:	08009025 	.word	0x08009025
 800b928:	0800b6d5 	.word	0x0800b6d5

0800b92c <__swbuf_r>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	460e      	mov	r6, r1
 800b930:	4614      	mov	r4, r2
 800b932:	4605      	mov	r5, r0
 800b934:	b118      	cbz	r0, 800b93e <__swbuf_r+0x12>
 800b936:	6a03      	ldr	r3, [r0, #32]
 800b938:	b90b      	cbnz	r3, 800b93e <__swbuf_r+0x12>
 800b93a:	f7fd ffc1 	bl	80098c0 <__sinit>
 800b93e:	69a3      	ldr	r3, [r4, #24]
 800b940:	60a3      	str	r3, [r4, #8]
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	071a      	lsls	r2, r3, #28
 800b946:	d525      	bpl.n	800b994 <__swbuf_r+0x68>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	b31b      	cbz	r3, 800b994 <__swbuf_r+0x68>
 800b94c:	6823      	ldr	r3, [r4, #0]
 800b94e:	6922      	ldr	r2, [r4, #16]
 800b950:	b2f6      	uxtb	r6, r6
 800b952:	1a98      	subs	r0, r3, r2
 800b954:	6963      	ldr	r3, [r4, #20]
 800b956:	4637      	mov	r7, r6
 800b958:	4283      	cmp	r3, r0
 800b95a:	dc04      	bgt.n	800b966 <__swbuf_r+0x3a>
 800b95c:	4621      	mov	r1, r4
 800b95e:	4628      	mov	r0, r5
 800b960:	f7ff fdb0 	bl	800b4c4 <_fflush_r>
 800b964:	b9e0      	cbnz	r0, 800b9a0 <__swbuf_r+0x74>
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	3b01      	subs	r3, #1
 800b96a:	60a3      	str	r3, [r4, #8]
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	6022      	str	r2, [r4, #0]
 800b972:	701e      	strb	r6, [r3, #0]
 800b974:	6962      	ldr	r2, [r4, #20]
 800b976:	1c43      	adds	r3, r0, #1
 800b978:	429a      	cmp	r2, r3
 800b97a:	d004      	beq.n	800b986 <__swbuf_r+0x5a>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d506      	bpl.n	800b990 <__swbuf_r+0x64>
 800b982:	2e0a      	cmp	r6, #10
 800b984:	d104      	bne.n	800b990 <__swbuf_r+0x64>
 800b986:	4621      	mov	r1, r4
 800b988:	4628      	mov	r0, r5
 800b98a:	f7ff fd9b 	bl	800b4c4 <_fflush_r>
 800b98e:	b938      	cbnz	r0, 800b9a0 <__swbuf_r+0x74>
 800b990:	4638      	mov	r0, r7
 800b992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b994:	4621      	mov	r1, r4
 800b996:	4628      	mov	r0, r5
 800b998:	f000 f806 	bl	800b9a8 <__swsetup_r>
 800b99c:	2800      	cmp	r0, #0
 800b99e:	d0d5      	beq.n	800b94c <__swbuf_r+0x20>
 800b9a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9a4:	e7f4      	b.n	800b990 <__swbuf_r+0x64>
	...

0800b9a8 <__swsetup_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <__swsetup_r+0xac>)
 800b9ac:	4605      	mov	r5, r0
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	460c      	mov	r4, r1
 800b9b2:	b118      	cbz	r0, 800b9bc <__swsetup_r+0x14>
 800b9b4:	6a03      	ldr	r3, [r0, #32]
 800b9b6:	b90b      	cbnz	r3, 800b9bc <__swsetup_r+0x14>
 800b9b8:	f7fd ff82 	bl	80098c0 <__sinit>
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9c2:	0718      	lsls	r0, r3, #28
 800b9c4:	d422      	bmi.n	800ba0c <__swsetup_r+0x64>
 800b9c6:	06d9      	lsls	r1, r3, #27
 800b9c8:	d407      	bmi.n	800b9da <__swsetup_r+0x32>
 800b9ca:	2309      	movs	r3, #9
 800b9cc:	602b      	str	r3, [r5, #0]
 800b9ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9d6:	81a3      	strh	r3, [r4, #12]
 800b9d8:	e034      	b.n	800ba44 <__swsetup_r+0x9c>
 800b9da:	0758      	lsls	r0, r3, #29
 800b9dc:	d512      	bpl.n	800ba04 <__swsetup_r+0x5c>
 800b9de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9e0:	b141      	cbz	r1, 800b9f4 <__swsetup_r+0x4c>
 800b9e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9e6:	4299      	cmp	r1, r3
 800b9e8:	d002      	beq.n	800b9f0 <__swsetup_r+0x48>
 800b9ea:	4628      	mov	r0, r5
 800b9ec:	f7fe ff1c 	bl	800a828 <_free_r>
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	6363      	str	r3, [r4, #52]	; 0x34
 800b9f4:	89a3      	ldrh	r3, [r4, #12]
 800b9f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b9fa:	81a3      	strh	r3, [r4, #12]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	6063      	str	r3, [r4, #4]
 800ba00:	6923      	ldr	r3, [r4, #16]
 800ba02:	6023      	str	r3, [r4, #0]
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	f043 0308 	orr.w	r3, r3, #8
 800ba0a:	81a3      	strh	r3, [r4, #12]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	b94b      	cbnz	r3, 800ba24 <__swsetup_r+0x7c>
 800ba10:	89a3      	ldrh	r3, [r4, #12]
 800ba12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba1a:	d003      	beq.n	800ba24 <__swsetup_r+0x7c>
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f000 f883 	bl	800bb2a <__smakebuf_r>
 800ba24:	89a0      	ldrh	r0, [r4, #12]
 800ba26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba2a:	f010 0301 	ands.w	r3, r0, #1
 800ba2e:	d00a      	beq.n	800ba46 <__swsetup_r+0x9e>
 800ba30:	2300      	movs	r3, #0
 800ba32:	60a3      	str	r3, [r4, #8]
 800ba34:	6963      	ldr	r3, [r4, #20]
 800ba36:	425b      	negs	r3, r3
 800ba38:	61a3      	str	r3, [r4, #24]
 800ba3a:	6923      	ldr	r3, [r4, #16]
 800ba3c:	b943      	cbnz	r3, 800ba50 <__swsetup_r+0xa8>
 800ba3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba42:	d1c4      	bne.n	800b9ce <__swsetup_r+0x26>
 800ba44:	bd38      	pop	{r3, r4, r5, pc}
 800ba46:	0781      	lsls	r1, r0, #30
 800ba48:	bf58      	it	pl
 800ba4a:	6963      	ldrpl	r3, [r4, #20]
 800ba4c:	60a3      	str	r3, [r4, #8]
 800ba4e:	e7f4      	b.n	800ba3a <__swsetup_r+0x92>
 800ba50:	2000      	movs	r0, #0
 800ba52:	e7f7      	b.n	800ba44 <__swsetup_r+0x9c>
 800ba54:	20000094 	.word	0x20000094

0800ba58 <_raise_r>:
 800ba58:	291f      	cmp	r1, #31
 800ba5a:	b538      	push	{r3, r4, r5, lr}
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	460d      	mov	r5, r1
 800ba60:	d904      	bls.n	800ba6c <_raise_r+0x14>
 800ba62:	2316      	movs	r3, #22
 800ba64:	6003      	str	r3, [r0, #0]
 800ba66:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6a:	bd38      	pop	{r3, r4, r5, pc}
 800ba6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba6e:	b112      	cbz	r2, 800ba76 <_raise_r+0x1e>
 800ba70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba74:	b94b      	cbnz	r3, 800ba8a <_raise_r+0x32>
 800ba76:	4620      	mov	r0, r4
 800ba78:	f000 f830 	bl	800badc <_getpid_r>
 800ba7c:	462a      	mov	r2, r5
 800ba7e:	4601      	mov	r1, r0
 800ba80:	4620      	mov	r0, r4
 800ba82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba86:	f000 b817 	b.w	800bab8 <_kill_r>
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d00a      	beq.n	800baa4 <_raise_r+0x4c>
 800ba8e:	1c59      	adds	r1, r3, #1
 800ba90:	d103      	bne.n	800ba9a <_raise_r+0x42>
 800ba92:	2316      	movs	r3, #22
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	2001      	movs	r0, #1
 800ba98:	e7e7      	b.n	800ba6a <_raise_r+0x12>
 800ba9a:	2400      	movs	r4, #0
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800baa2:	4798      	blx	r3
 800baa4:	2000      	movs	r0, #0
 800baa6:	e7e0      	b.n	800ba6a <_raise_r+0x12>

0800baa8 <raise>:
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <raise+0xc>)
 800baaa:	4601      	mov	r1, r0
 800baac:	6818      	ldr	r0, [r3, #0]
 800baae:	f7ff bfd3 	b.w	800ba58 <_raise_r>
 800bab2:	bf00      	nop
 800bab4:	20000094 	.word	0x20000094

0800bab8 <_kill_r>:
 800bab8:	b538      	push	{r3, r4, r5, lr}
 800baba:	2300      	movs	r3, #0
 800babc:	4d06      	ldr	r5, [pc, #24]	; (800bad8 <_kill_r+0x20>)
 800babe:	4604      	mov	r4, r0
 800bac0:	4608      	mov	r0, r1
 800bac2:	4611      	mov	r1, r2
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	f7f5 fb8b 	bl	80011e0 <_kill>
 800baca:	1c43      	adds	r3, r0, #1
 800bacc:	d102      	bne.n	800bad4 <_kill_r+0x1c>
 800bace:	682b      	ldr	r3, [r5, #0]
 800bad0:	b103      	cbz	r3, 800bad4 <_kill_r+0x1c>
 800bad2:	6023      	str	r3, [r4, #0]
 800bad4:	bd38      	pop	{r3, r4, r5, pc}
 800bad6:	bf00      	nop
 800bad8:	20000540 	.word	0x20000540

0800badc <_getpid_r>:
 800badc:	f7f5 bb79 	b.w	80011d2 <_getpid>

0800bae0 <__swhatbuf_r>:
 800bae0:	b570      	push	{r4, r5, r6, lr}
 800bae2:	460c      	mov	r4, r1
 800bae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bae8:	4615      	mov	r5, r2
 800baea:	2900      	cmp	r1, #0
 800baec:	461e      	mov	r6, r3
 800baee:	b096      	sub	sp, #88	; 0x58
 800baf0:	da0c      	bge.n	800bb0c <__swhatbuf_r+0x2c>
 800baf2:	89a3      	ldrh	r3, [r4, #12]
 800baf4:	2100      	movs	r1, #0
 800baf6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bafa:	bf0c      	ite	eq
 800bafc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb00:	2340      	movne	r3, #64	; 0x40
 800bb02:	2000      	movs	r0, #0
 800bb04:	6031      	str	r1, [r6, #0]
 800bb06:	602b      	str	r3, [r5, #0]
 800bb08:	b016      	add	sp, #88	; 0x58
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	466a      	mov	r2, sp
 800bb0e:	f000 f849 	bl	800bba4 <_fstat_r>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	dbed      	blt.n	800baf2 <__swhatbuf_r+0x12>
 800bb16:	9901      	ldr	r1, [sp, #4]
 800bb18:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb1c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb20:	4259      	negs	r1, r3
 800bb22:	4159      	adcs	r1, r3
 800bb24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb28:	e7eb      	b.n	800bb02 <__swhatbuf_r+0x22>

0800bb2a <__smakebuf_r>:
 800bb2a:	898b      	ldrh	r3, [r1, #12]
 800bb2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb2e:	079d      	lsls	r5, r3, #30
 800bb30:	4606      	mov	r6, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	d507      	bpl.n	800bb46 <__smakebuf_r+0x1c>
 800bb36:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	6123      	str	r3, [r4, #16]
 800bb3e:	2301      	movs	r3, #1
 800bb40:	6163      	str	r3, [r4, #20]
 800bb42:	b002      	add	sp, #8
 800bb44:	bd70      	pop	{r4, r5, r6, pc}
 800bb46:	466a      	mov	r2, sp
 800bb48:	ab01      	add	r3, sp, #4
 800bb4a:	f7ff ffc9 	bl	800bae0 <__swhatbuf_r>
 800bb4e:	9900      	ldr	r1, [sp, #0]
 800bb50:	4605      	mov	r5, r0
 800bb52:	4630      	mov	r0, r6
 800bb54:	f7fe fed8 	bl	800a908 <_malloc_r>
 800bb58:	b948      	cbnz	r0, 800bb6e <__smakebuf_r+0x44>
 800bb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5e:	059a      	lsls	r2, r3, #22
 800bb60:	d4ef      	bmi.n	800bb42 <__smakebuf_r+0x18>
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	f043 0302 	orr.w	r3, r3, #2
 800bb6a:	81a3      	strh	r3, [r4, #12]
 800bb6c:	e7e3      	b.n	800bb36 <__smakebuf_r+0xc>
 800bb6e:	89a3      	ldrh	r3, [r4, #12]
 800bb70:	6020      	str	r0, [r4, #0]
 800bb72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb76:	81a3      	strh	r3, [r4, #12]
 800bb78:	9b00      	ldr	r3, [sp, #0]
 800bb7a:	6120      	str	r0, [r4, #16]
 800bb7c:	6163      	str	r3, [r4, #20]
 800bb7e:	9b01      	ldr	r3, [sp, #4]
 800bb80:	b15b      	cbz	r3, 800bb9a <__smakebuf_r+0x70>
 800bb82:	4630      	mov	r0, r6
 800bb84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb88:	f000 f81e 	bl	800bbc8 <_isatty_r>
 800bb8c:	b128      	cbz	r0, 800bb9a <__smakebuf_r+0x70>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f023 0303 	bic.w	r3, r3, #3
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	89a3      	ldrh	r3, [r4, #12]
 800bb9c:	431d      	orrs	r5, r3
 800bb9e:	81a5      	strh	r5, [r4, #12]
 800bba0:	e7cf      	b.n	800bb42 <__smakebuf_r+0x18>
	...

0800bba4 <_fstat_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	2300      	movs	r3, #0
 800bba8:	4d06      	ldr	r5, [pc, #24]	; (800bbc4 <_fstat_r+0x20>)
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	4611      	mov	r1, r2
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	f7f5 fb73 	bl	800129c <_fstat>
 800bbb6:	1c43      	adds	r3, r0, #1
 800bbb8:	d102      	bne.n	800bbc0 <_fstat_r+0x1c>
 800bbba:	682b      	ldr	r3, [r5, #0]
 800bbbc:	b103      	cbz	r3, 800bbc0 <_fstat_r+0x1c>
 800bbbe:	6023      	str	r3, [r4, #0]
 800bbc0:	bd38      	pop	{r3, r4, r5, pc}
 800bbc2:	bf00      	nop
 800bbc4:	20000540 	.word	0x20000540

0800bbc8 <_isatty_r>:
 800bbc8:	b538      	push	{r3, r4, r5, lr}
 800bbca:	2300      	movs	r3, #0
 800bbcc:	4d05      	ldr	r5, [pc, #20]	; (800bbe4 <_isatty_r+0x1c>)
 800bbce:	4604      	mov	r4, r0
 800bbd0:	4608      	mov	r0, r1
 800bbd2:	602b      	str	r3, [r5, #0]
 800bbd4:	f7f5 fb71 	bl	80012ba <_isatty>
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	d102      	bne.n	800bbe2 <_isatty_r+0x1a>
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	b103      	cbz	r3, 800bbe2 <_isatty_r+0x1a>
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	20000540 	.word	0x20000540

0800bbe8 <_init>:
 800bbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbea:	bf00      	nop
 800bbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbee:	bc08      	pop	{r3}
 800bbf0:	469e      	mov	lr, r3
 800bbf2:	4770      	bx	lr

0800bbf4 <_fini>:
 800bbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf6:	bf00      	nop
 800bbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbfa:	bc08      	pop	{r3}
 800bbfc:	469e      	mov	lr, r3
 800bbfe:	4770      	bx	lr
